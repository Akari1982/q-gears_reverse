#include <stdio.h>

using namespace std;

const unsigned char unk1[ 0x80 ] =
{
    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x10, 0x11, 0x12, 0x13,
    0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27,
    0x28, 0x29, 0x2A, 0x2B, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B,
    0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x50, 0x51, 0x52, 0x53,
    0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
    0x68, 0x69, 0x6A, 0x6B, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x7B,
    0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x90, 0x91, 0x92, 0x93,
    0x94, 0x95, 0x96, 0x97, 0x98, 0x00, 0x00, 0x00, 0x00, 0x20, 0x02, 0x20, 0x04, 0x20, 0x06, 0x20,
};

const unsigned short unk2[ 0x100 ] =
{
    0x0020, 0x0220, 0x0420, 0x0620, 0x0720, 0x0920, 0x0B20, 0x0D20, 0x0F20, 0x1120, 0x1320, 0x1420, 0x1620, 0x1820, 0x1A20, 0x1C20,
    0x1E20, 0x1F20, 0x2120, 0x2320, 0x2520, 0x2720, 0x2920, 0x2B20, 0x2C20, 0x2E20, 0x3020, 0x3220, 0x3420, 0x3620, 0x3820, 0x3A20,
    0x3B20, 0x3D20, 0x3F20, 0x4120, 0x4320, 0x4520, 0x4720, 0x4820, 0x4A20, 0x4C20, 0x4E20, 0x5020, 0x5220, 0x5420, 0x5520, 0x5720,
    0x5920, 0x5B20, 0x5D20, 0x5F20, 0x6120, 0x6320, 0x6420, 0x6620, 0x6820, 0x6A20, 0x6C20, 0x6E20, 0x7020, 0x7220, 0x7320, 0x7520,
    0x7720, 0x7920, 0x7B20, 0x7D20, 0x7F20, 0x8120, 0x8220, 0x8420, 0x8620, 0x8820, 0x8A20, 0x8C20, 0x8E20, 0x9020, 0x9120, 0x9320,
    0x9520, 0x9720, 0x9920, 0x9B20, 0x9D20, 0x9F20, 0xA120, 0xA220, 0xA420, 0xA620, 0xA820, 0xAA20, 0xAC20, 0xAE20, 0xB020, 0xB120,
    0xB320, 0xB520, 0xB720, 0xB920, 0xBB20, 0xBD20, 0xBF20, 0xC120, 0xC320, 0xC420, 0xC620, 0xC820, 0xCA20, 0xCC20, 0xCE20, 0xD020,
    0xD220, 0xD420, 0xD520, 0xD720, 0xD920, 0xDB20, 0xDD20, 0xDF20, 0xE120, 0xE320, 0xE520, 0xE720, 0xE820, 0xEA20, 0xEC20, 0xEE20,
    0xF020, 0xF220, 0xF420, 0xF620, 0xF820, 0xFA20, 0xFB20, 0xFD20, 0xFF20, 0x0121, 0x0321, 0x0521, 0x0721, 0x0921, 0x0B21, 0x0D21,
    0x0F21, 0x1021, 0x1221, 0x1421, 0x1621, 0x1821, 0x1A21, 0x1C21, 0x1E21, 0x2021, 0x2221, 0x2421, 0x2521, 0x2721, 0x2921, 0x2B21,
    0x2D21, 0x2F21, 0x3121, 0x3321, 0x3521, 0x3721, 0x3921, 0x3B21, 0x3C21, 0x3E21, 0x4021, 0x4221, 0x4421, 0x4621, 0x4821, 0x4A21,
    0x4C21, 0x4E21, 0x5021, 0x5221, 0x5421, 0x5521, 0x5721, 0x5921, 0x5B21, 0x5D21, 0x5F21, 0x6121, 0x6321, 0x6521, 0x6721, 0x6921,
    0x6B21, 0x6D21, 0x6F21, 0x7021, 0x7221, 0x7421, 0x7621, 0x7821, 0x7A21, 0x7C21, 0x7E21, 0x8021, 0x8221, 0x8421, 0x8621, 0x8821,
    0x8A21, 0x8C21, 0x8E21, 0x8F21, 0x9121, 0x9321, 0x9521, 0x9721, 0x9921, 0x9B21, 0x9D21, 0x9F21, 0xA121, 0xA321, 0xA521, 0xA721,
    0xA921, 0xAB21, 0xAD21, 0xAF21, 0xB021, 0xB221, 0xB421, 0xB621, 0xB821, 0xBA21, 0xBC21, 0xBE21, 0xC021, 0xC221, 0xC421, 0xC621,
    0xC821, 0xCA21, 0xCC21, 0xCE21, 0xD021, 0xD221, 0xD421, 0xD621, 0xD721, 0xD921, 0xDB21, 0xDD21, 0xDF21, 0xE121, 0xE321, 0xE521,
};



int main()
{
/*
    for( int i = 10000; i < 10300; i += 1 )
    {
        unsigned char temp1 = unk1[ ( i & 0x7fff ) >> 0x8 ];
        unsigned char temp2 = ( ( i & 0xff ) + ( ( temp1 & 0xf ) << 8 ) ) << 1;
        signed char temp3 = 6 - ( temp1 >> 4 );
        temp3 = ( temp3 < 0 ) ? -temp3 : temp3;
        unsigned short temp4 = unk2[ temp2 ] >> temp3;
        printf( "%d - %d - %d - %d\n", i, temp1, temp2, temp4 );
    }
*/
/*
    for( __int64 n = 0; n <= 100; ++n )
    {
        printf( "%d:", (int)n );

        __int64 V0 = n * 0x92492493;
        int x = ((V0 >> 0x20) + n) >> 2;

        int y = ((4 * n) / 7 + n ) >> 2;
        printf( "%d %d\n", x, y );
    }
*/
    for( __int64 n = 0; n <= 100; ++n )
    {
        printf( "%d:", (int)n );

        int V0 = n * 0x8100;
        __int64 T0 = V0 * 0x81020409;
        T0 = T0 >> 0x20;
        V1 = ((T0 + V0) >> 0x6) - (V0 >> 0x1f);

        printf( "%d\n", V1 );
    }

/*
    for( __int64 A0 = 0; A0 <= 100; ++A0 )
    {
        printf( "%d:", (int)A0 );

        __int64 A2 = A0 * 0x55555556;
        A2 = A2 >> 0x20;
        int x = A2 - (A0 >> 0x1f);
        printf("%d\n", x);
    }
*/
/*
    for( __int64 A0 = 0; A0 <= 1000; A0 += 10 )
    {
        printf( "%d", (int)A0 );
        __int64 A3 = A0;
        __int64 T0 = A3 * 0x51eb851f;
        T0 = T0 >> 0x20;
        A3 = A3 >> 0x1f;
        A3 = (T0 >> 5) - A3;
        printf(" - %d\n", (int)A3);
    }
*/
/*
    for (__int64 A0 = 0; A0 <= 100; ++A0)
    {
        printf("%d:", A0);

        __int64 A2 = A0 * 0xcccccccd;
        A2 = A2 >> 0x24;
        printf(" - %d\n", A2);
    }
*/
/*
    for (__int64 x = 0; x <= 1000; x = x + 10)
    {
        printf("%d:", x);
        __int64 A0 = x * 0x10624dd3;
        A0 = A0 >> 0x25;

        __int64 V1 = x >> 0x1f;

        A0 = A0 - V1;
        V1 = A0 << 5;
        V1 = V1 - A0;
        V1 = V1 << 2;
        V1 = V1 + A0;
        V1 = V1 << 2;
        __int64 V0 = x - V1;

        printf(" - %d\n", V0);
    }
*/
/*
    for (__int64 A0 = 0; A0 <= 100; ++A0)
    {
        printf("%d:", A0);

        __int64 V0 = A0 * 0xaaaaaaab;
        V0 = V0 >> 0x23;
        printf(" - %d\n", V0);
    }
*/
/*
    for (__int64 A0 = 0; A0 <= 100; ++A0)
    {
        printf("%d:", A0);

        __int64 V0 = A0 * 0xba2e8ba3;
        V0 = V0 >> 0x23;
        printf(" - %d\n", V0);
    }
*/
/*
    for (__int64 A0 = 0; A0 <= 100; ++A0)
    {
        printf("%d:", A0);

        __int64 T0 = A0 * 0x30c30c31;
        T0 = T0 >> 0x22;
        T0 = (A0 - T0 * 0x15) * 0xc;
        printf(" - %d\n", T0);
    }
*/
/* /10
    for (__int64 V1 = 0; V1 <= 100; ++V1)
    {
        printf("%d:", V1);
        __int64 T3 = V1 * 0x66666667;
        T3 = T3 >> 0x20;
        __int64 V0 = V1 >> 0x1f;
        int x = (T3 >> 2) - V0;
        printf(" - %d\n", x);
    }
*/
    return 0;
}
