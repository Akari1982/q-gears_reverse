0x04 A::operator++(int)
    pop and increment stack value by 1 and store to stack previous value.

0x05 A::operator--(int)
    pop and decrement stack value by 1 and store to stack previous value.

0x0e B::operator!()
    pop 1 value from stack, push result !B to stack.

0x11 B::operator*( A )
    pop 2 value from stack, push result B * A to stack.

0x12 B::operator/( A )
    pop 2 value from stack, push result B / A to stack.

0x13 B::operator%( A )
    pop 2 value from stack, push result B % A to stack.

0x14 B::operator+( A )
    pop 2 value from stack, push result B + A to stack.

0x15 B::operator-( A )
    pop 2 value from stack, push result B - A to stack.

0x16 B::operator<<( A )
    pop 2 value from stack, push result B << A to stack.

0x18 B::operator<( A )
    pop 2 value from stack, push result B < A to stack.

0x19 B::operator>( A )
    pop 2 value from stack, push result B > A to stack.

0x1a B::operator<=( A )
    pop 2 value from stack in load, push result B <= A to stack.

0x1b B::operator>=( A )
    pop 2 value from stack in load, push result B >= A to stack.

0x20 B::operator==( A )
    pop 2 value from stack in load, push result B == A to stack.

0x21 B::operator!=( A )
    pop 2 value from stack, push result B != A to stack.

0x22 MultipleEqual
    pop 3 values from stack.
    3rd value from stack - units mask.
    2nd value from stack - unit parameter.
    1st value from stack - value to check equality with.
    compare unit parameter with value for all units in mask. Push mask of yes/no checks for all units in mask back to stack.

0x24 B::operator&( A )
    pop 2 value from stack, push result B & A to stack.

0x25 B::operatorXOR( A )
    pop 2 value from stack, push result B XOR A to stack.

0x27 MathBothTrue
    pop 2 value from stack, push result A == true && B == true to stack.

0x28 MathOneTrue
    pop 2 value from stack, push result A == true || B == true to stack.

0x29 AddValueToStack [value]
    push value to stack as 0x18.

0x2a CountActiveBits
    count number of active bits in top of stack and store it to stack as 0x1c.

0x2b GetUnitParameter
    pop 2 values from stack.
    2nd value from stack - units mask.
    1st value from stack - unit parameter.
    get parameter from 1st unit in mask and store it back to stack as 0x1c.

0x2c StoreValue
    pop value from stack in load, pop next value in save of 1st value. Store 1st loaded value.

0x2d StoreUnitsValuesByMask
    pop 3 values from stack.
    3rd value from stack - units mask.
    2nd value from stack - unit parameter.
    1st value from stack - value to store.
    store value to unit parameter by mask.

0x32 B::operator+=( A )
    pop 2 values from stack, store B + A to stack and to B.

0x33 B::operator-=( A )
    pop 2 values from stack, store B - A to stack and to B.

0x35 B::operator>>=( A )
    pop 2 values from stack, store B >> A to stack and to B.

0x3d B::operator&=( A )
    pop 2 values from stack, store B & A to stack and to B.

0x3e B::operator^=( A )
    pop 2 values from stack, store B ^ A to stack and to B.

0x3f B::operator|=( A )
    pop 2 values from stack, store B | A to stack and to B.

0x4d PickRandomActiveBit
    pop value from stack pick random active bit from it and store result back to stack as 0x1c.

0x4f IsButtonPressed
    pop value from stack and check if any button in this mask pressed now. Store 1 if pressed, 0 otherwise.

0x52 GetCurrentHpForCharacter
    pop 1 value from stack, get current hp for character with this character id and push it to stack as 0x1c.

0x54 MultipleAnd
    pop 3 values from stack.
    3rd value from stack - units mask.
    2nd value from stack - unit parameter.
    1st value from stack - value to check equality with.
    and unit parameter with value for all units in mask. Push mask of yes/no checks for all units in mask back to stack.

0x5d GetCurrentEntityRotationTo
    pop 2 value from stack, get rotation to given vector from current entity and push it to stack as 0x1c.

0x62 GetSinByRotation
    pop 1 value from stack, and store back to stack sin from this value as 0x1c.

0x64 ???
    unknown special opcode. Read top of stack.

0x66 GetRotationBy
    pop 2 value from stack, get rotation by given vector and push it to stack as 0x1c.

0x6b ???
    pop 1 value from stack, call func func4b85c and push result to stack as 0x1c.

0x6d ???
    pop 1 value from stack, call func func378c4 and push result to stack as 0x1c.

0x78 AddValueToStack [[value]]
    push value to stack as 0x10.

0x79 AddValueToStack [value]
    push value to stack as 0x14.

0x7a [type]
    push parameter depending on type to stack as 0x1c.
    0x00 - random byte.
    0x02 - [16ec] value from global script data.
    0x03 - result from funcb0124( 0xc00, 0xffffffff, 0, 0, 0 )
    0x06 - w[w[w[8006794c] + 1c] + 560]
    0x09 - result from func4ecc4. Index of something.
    0x0c - w[8007ae2c].
    0x0d - w[8007ae30].
    0x13 - result from func625f8. This count items in array 80083248.

0x7d AddValueToStack [[value]]
    push value to stack as 0x1c.

0x7e AddValueToStack [[[[value]]]]
    push value to stack as 0x1c.

0x7f FinishSubRoutine
    return to normal bytecode.



