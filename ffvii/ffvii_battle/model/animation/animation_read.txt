////////////////////////////////////////////////////////
// funccd400
unit_id     = A0;
animation_offset  = A1;
model_data = A2;

A0 = unit_id;
A1 = h[801518e4 + unit_id * b9c + 10]; // number of bones
animation_id = h[801518e4 + unit_id * b9c + e];
A2 = model_data2 + w[animation_offset + animation_id * 4];
funcc7b60;
[801518e4 + unit_id * b9c + 3b] = b(V0);

V0 = bu[801518e4 + unit_id * b9c + 27];
if (V0 & 80)
{
    A0 = unit_id;
    A1 = h[800fa6d8 + unit_id * 40 + 3c]; // number of bones in secondary animations
    if (unit_id >= 4)
    {
        A2 = model_data + w[animation_offset + 40 + animation_id * 4];
    }
    else
    {
        A2 = model_data + w[animation_offset + d0 + animation_id * 4];
    }

    funcc7be8;
}
////////////////////////////////////////////////////////




////////////////////////////////////////////////////////
// funcc7b60
// A0 - unit_id
// A1 - bone number
// A2 - offset to animation
init_id = A0;

A3 = A2; // offset to animation
A0 = 801518e4 + init_id * b9c + 174; // start of matrixes to calculate
A2 = A1; // number of bone
A1 = w[801518e4 + init_id * b9c + 74]; // read from start or not
funcd376c;
[801518e4 + A0 * b9c + 74] = w(V0);

return V0 < 1;
////////////////////////////////////////////////////////



////////////////////////////////////////////////////////
// funcc7be8
init_id = A0;
A3 = A2; // offset to animation
A2 = A1; // number of bone
A0 = 800fa6e0 + init_id * 40; // start of matrixes to calculate
A1 = w[800fa6d8 + init_id * 40]; // read from start or not
funcd376c;
[800fa6d8 + init_id * 40] = w(V0);
////////////////////////////////////////////////////////



////////////////////////////////////////////////////////
// funcd376c
// A0 - struct to store
// A1 - 1 if we continue animation - 0 if we read first frame
// A2 - bone number
// A3 - offset to animation

S0 = A0;
S2 = A3;
S7 = hu[S2 + 2];
S5 = bu[S2 + 4];
S2 = S2 + 5;
S4 = A2;
if (A1 == 0)
{
    S3 = SP + 4c;

    A0 = S2; // offset to animation stream
    A1 = S3;
    A2 = 10;
    funcd35d8;
    [S0 + 28] = h(V0);

    A0 = S2;
    A1 = S3;
    A2 = 10;
    funcd35d8;
    [S0 + 2a] = h(V0);

    A0 = S2;
    A1 = S3;
    A2 = 10;
    funcd35d8;
    [S0 + 2c] = h(V0);

    if (S4 > 0)
    {
        S1 = 0;
        S6 = S4;
        S3 = c - S5;
        S4 = S3;

        loopd3814:	; 800D3814
            A0 = S2;
            A1 = S4;
            A2 = S3;
            funcd35d8;
            V0 = V0 << S5;
            [S0 + 20] = h(V0);

            A0 = S2;
            A1 = S4;
            A2 = S3;
            funcd35d8;
            V0 = V0 << S5;
            [S0 + 22] = h(V0);

            A0 = S2;
            A1 = S4;
            A2 = S3;
            funcd35d8;
            V0 = V0 << S5;
            [S0 + 24] = h(V0);

            S1 = S1 + 1;
            V0 = S1 < S6;
            S0 = S0 + 34;
        800D3864	bne    v0, zero, loopd3814 [$800d3814]
    }
}
else
{
    S3 = SP + 4c;
    A0 = S2;
    A1 = S3;
    funcd3548;
    V1 = hu[S0 + 28];
    V1 = V1 + V0;
    [S0 + 28] = h(V1);

    A0 = S2;
    A1 = S3;
    funcd3548;
    V1 = hu[S0 + 2a];
    V1 = V1 + V0;
    [S0 + 2a] = h(V1);

    A0 = S2;
    A1 = S3;
    funcd3548;
    V1 = hu[S0 + 2c];
    V1 = V1 + V0;
    [S0 + 2c] = h(V1);

    S1 = 0;
    if (S4 > 0)
    {
        loopd38d4:	; 800D38D4
            A0 = S2;
            A1 = S3;
            A2 = S5;
            funcd3658;
            V1 = hu[S0 + 20];
            V1 = V1 + V0;
            [S0 + 20] = h(V1);

            A0 = S2;
            A1 = S3;
            A2 = S5;
            funcd3658;
            V1 = hu[S0 + 22];
            V1 = V1 + V0;
            [S0 + 22] = h(V1);

            A0 = S2;
            A1 = S3;
            A2 = S5;
            funcd3658;
            V1 = hu[S0 + 24];
            V1 = V1 + V0;
            [S0 + 24] = h(V1);

            S0 = S0 + 34;
            S1 = S1 + 1;
            V0 = S1 < S4;
        800D3930	bne    v0, zero, loopd38d4 [$800d38d4]
    }
}

V1 = w[SP + 4c];
V0 = V1 + 7;
V0 = V0 >> 3;
V0 = V0 & ffff;
V0 = V0 < S7;
V0 = 0 - V0;
V0 = V1 & V0;
////////////////////////////////////////////////////////



////////////////////////////////////////////////////////
// funcd35d8
// A0 // offset to animation stream
// A1 // current bit stream
// A2 // how much bit to read

T1 = 0;
T0 = 0;
if (A2 > 0)
{
    loopd35ec:	; 800D35EC
        readed_bits = w[A1];
        T0 = T0 << 1;

        readed_bytes = readed_bits >> 3;
        V1 = bu[A0 + readed_bytes]; // read byte from stream
        bit_in_byte = readed_bits & 7;
        V0 = 7 - bit_in_byte;
        V1 = V1 >> V0;
        if (V1 & 1)
        {
            T0 = T0 + 1;
        }

        [A1] = w(readed_bits + 1);
        T1 = T1 + 1;
        V0 = T1 < A2;
    800D3634	bne    v0, zero, loopd35ec [$800d35ec]
}

V0 = 20 - A1;
T0 = T0 << V0;
V0 = T0 >> V0;
////////////////////////////////////////////////////////



////////////////////////////////////////////////////////
// funcd3548
// A0 // offset to animation stream
// A1 // current bit stream

readed_bits = w[A1];
readed_bytes = readed_bits >> 3;
bit_in_byte = readed_bits & 7;
A3 = hu[A0 + readed_bytes + 0];
V1 = f - bit_in_byte;
V0 = 1 << V1;
if (A3 & V0)
{
    [A1] = w(readed_bits + 11);

    V1 = bu[A0 + readed_bytes + 2];
    V0 = A3 << 8;
    A3 = V0 | V1;
    V0 = bit_in_byte + 1;
    V0 = A3 << V0;
    V0 = V0 << 8;
    V0 = V0 >> 10;
}
else
{
    [A1] = w(readed_bits + 8);
    V0 = bit_in_byte + 1;
    V0 = A3 << V0;
    V0 = V0 << 10;
    V0 = V0 >> 19;
}

return V0;
////////////////////////////////////////////////////////



////////////////////////////////////////////////////////
// funcd3658
// A0 // offset to animation stream
// A1 // current bit stream
// A2 // size of whole animation

S1 = A0;
S2 = A1;
S3 = A2;

A0 = A0;
A1 = A1;
A2 = 1;
funcd35d8;

if (V0 == 0)
{
    return 0;
}
else
{
    A0 = S1;
    A1 = S2;
    A2 = 3;
    funcd35d8;
    S0 = V0 & 7;

    if (S0 == 7)
    {
        A0 = S1;
        A1 = S2;
        A2 = c - S3;
        funcd35d8;
        V0 = V0 << S3;
        return V0;
    }
    else if (S0 == 0)
    {
        V0 = ffff0000;
        V0 = V0 << S3;
        V0 = V0 >> 10;
        return V0;
    }
    else
    {
        A0 = S1;
        A1 = S2;
        A2 = S0;
        funcd35d8;

        A0 = V0;
        V1 = S0 - 1;
        if (A0 > 0)
        {
            V0 = 1 << V1;
            A0 = A0 + V0;
        }
        else
        {
            V0 = 1 << V1;
            A0 = A0 - V0;
        }

        V0 = A0 << S3;
        V0 = V0 << 10;
        V0 = V0 >> 10;
        return V0;
    }
{
////////////////////////////////////////////////////////