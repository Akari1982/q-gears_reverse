////////////////////////////////
// funcd55a4
collision = h[801518e4 + A0 * b9c + 12]; // collision radius
V0 = h[801518e4 + A0 * b9c + 106] * 10 * collision;
V0 = V0 >> c;
////////////////////////////////



////////////////////////////////
// funcd4d90
// create number of quads according to data in effect
T8 = hu[A0 + 8]; // in fire function we store frame number here
T9 = w[A0 + 4];
T7 = 0;

if (T8 & 8000)
{
    T8 = T8 & 7fff;
    T7 = hu[A0 + a];
}

A0 = w[A0 + 0] + 8;

while (true)
{
    T8 = T8 - 1;
    if (T8 < 0)
    {
        break;
    }

    V0 = h[A0 + 2];
    A0 = A0 + V0 * 14 + 4;
}

T8 = h[A0 + 2];

800D4DE4	addiu  a0, a0, $0004
800D4DE8	addiu  t8, t8, $ffff (=-$1)
800D4DEC	bltz   t8, Ld4fa0 [$800d4fa0]
800D4DF0	nop
800D4DF4	cfc2   v0,otz
800D4DF8	addiu  v1, zero, $0010
800D4DFC	sub    v1, v1, a2
800D4E00	blez   v0, Ld4fa0 [$800d4fa0]
800D4E04	srav   v0, v1, v0
800D4E08	sll    v0, v0, $02
800D4E0C	add    a2, a1, v0

loopd4e10:	; 800D4E10
    800D4E10	lw     t0, $0004(a0)
    800D4E14	lw     t1, $0010(a0)
    800D4E18	lui    v0, $00ff
    800D4E1C	and    t2, t1, v0
    800D4E20	andi   t1, t1, $00ff
    800D4E24	lui    v0, $1fff
    800D4E28	ori    v0, v0, $1fff
    800D4E2C	and    t0, t0, v0
    800D4E30	sll    t0, t0, $03
    800D4E34	sll    t1, t1, $03
    800D4E38	sll    t2, t2, $03
    800D4E3C	add    t1, t1, t0
    800D4E40	add    t3, t1, t2
    800D4E44	add    t2, t2, t0
    800D4E48	lui    v0, $fff8
    800D4E4C	ori    v0, v0, $fff8
    800D4E50	and    t1, t1, v0
    800D4E54	and    t2, t2, v0
    800D4E58	and    t3, t3, v0
    800D4E5C	mtc2   t0,r11r12
    800D4E60	mtc2   zero,r13r21
    800D4E64	mtc2   t1,r22r23
    800D4E68	mtc2   zero,r31r32
    800D4E6C	mtc2   t2,r33
    800D4E70	mtc2   zero,trx
    800D4E74	gte_func17t0,r11r12
    800D4E78	lw     t0, $0000(a2)
    V0 = 00ffffff;
    V1 = 09000000;

    800D4E88	and    t0, t0, v0
    800D4E8C	or     t0, t0, v1
    [A3 + 0] = w(T0);

    800D4E94	and    v0, a3, v0
    800D4E98	sw     v0, $0000(a2)
    800D4E9C	mfc2   t0,l33
    800D4EA0	mfc2   t1,rbk
    800D4EA4	mfc2   t2,gbk

    [A3 + 8] = w(T0);
    [A3 + 10] = w(T1);
    [A3 + 18] = w(T2);

    VXY0 = T3;
    VZ0 = 0;
    gte_RTPS; // Perspective transform
    [A3 + 20] = SXY2;

    800D4ED4	lw     t6, $0000(a0)
    800D4ED8	lw     t0, $0008(a0)
    800D4EDC	lw     t2, $0010(a0)
    800D4EE0	andi   v0, t6, $0200
    if (V0 != 0)
    {
        800D4EEC	srl    t2, t2, $08
    }

    800D4EF0	lui    v0, $00ff
    800D4EF4	ori    v0, v0, $00ff
    800D4EF8	and    t2, t2, v0
    800D4EFC	add    t2, t0, t2
    800D4F00	srl    t1, t0, $10
    800D4F04	srl    t3, t2, $10
    800D4F08	andi   v0, t6, $0001
    800D4F0C	beq    v0, zero, Ld4f24 [$800d4f24]
    800D4F10	nop
    800D4F14	addu   v0, t0, zero
    800D4F18	addu   t0, t2, zero
    800D4F1C	addu   t2, v0, zero
    800D4F20	addi   t0, t0, $ffff (=-$1)

    Ld4f24:	; 800D4F24
    800D4F24	andi   v0, t6, $0002
    if (V0 != 0)
    {
        800D4F30	addu   v0, t1, zero
        800D4F34	addu   t1, t3, zero
        800D4F38	addu   t3, v0, zero
        800D4F3C	addi   t1, t1, $ffff (=-$1)
    }

    [A3 + c] = b(T0); // vertex1 u
    [A3 + d] = b(T1); // vertex1 v

    [A3 + 14] = b(T2); // vertex2 u
    [A3 + 15] = b(T1); // vertex2 v

    [A3 + 1c] = b(T0); // vertex3 u
    [A3 + 1d] = b(T3); // vertex3 v

    [A3 + 24] = b(T2); // vertex4 u
    [A3 + 25] = b(T3); // vertex4 v


    800D4F60	andi   v0, t6, $0100
    800D4F64	beq    v0, zero, Ld4f74 [$800d4f74]
    800D4F68	addu   v0, t9, zero
    800D4F6C	lui    v1, $0200
    800D4F70	or     v0, v0, v1

    Ld4f74:	; 800D4F74
    800D4F74	sw     v0, $0004(a3)
    800D4F78	lw     t0, $000c(a0)
    800D4F7C	nop
    800D4F80	sh     t0, $0016(a3)
    800D4F84	srl    t0, t0, $10
    800D4F88	addu   t0, t0, t7
    800D4F8C	sh     t0, $000e(a3)
    800D4F90	addi   a0, a0, $0014
    800D4F94	addi   a3, a3, $0028
800D4F98	bgtz   t8, loopd4e10 [$800d4e10]
800D4F9C	addiu  t8, t8, $ffff (=-$1)

Ld4fa0:	; 800D4FA0
return A3;
////////////////////////////////



////////////////////////////////
// funcd4368
position = A0;
scale = A1;
collision = A2;

// scale matrix matrix
[800f0228] = h(scale);
[800f0230] = h(scale);
[800f0238] = h(scale);

A0 = 800fa63c;
system_set_rotation_matrix_to_GTE;

A0 = 800fa63c;
system_set_translation_vector_to_GTE;

A0 = position;
A1 = 800f023c;
A2 = SP + 20;
system_call_rtv0tr_from_GTE;

if (collision != 0)
{
    A0 = 800f023c;
    A1 = SP + 10;
    system_normalize_vector_A0_to_A1;

    [800f023c] = w(w[800f023c] + (collision * w[SP + 10]) >> c);
    [800f0240] = w(w[800f0240] + (collision * w[SP + 14]) >> c);
    [800f0244] = w(w[800f0244] + (collision * w[SP + 18]) >> c);
}

A0 = 800f0228;
system_set_rotation_matrix_to_GTE;

A0 = 800f0228;
system_set_translation_vector_to_GTE;

return 800f0228;
////////////////////////////////



////////////////////////////////
// funcd574c
// A0 - target mask
A1 = SP + 10;
battle_calculate_middle_point_from_target_mask_units_position; // calculate sound position

A0 = SP + 10;
funcd56a8;
return V0;
////////////////////////////////



////////////////////////////////
// funcd56a8
800D56AC	sw     s1, $0024(sp)
800D56B0	addu   s1, a0, zero
800D56B8	lui    s0, $8010
800D56BC	addiu  s0, s0, $a63c (=-$59c4)
800D56C4	jal    system_set_rotation_matrix_to_GTE [$8003b48c]
800D56C8	addu   a0, s0, zero
800D56CC	jal    system_set_translation_vector_to_GTE [$8003b51c]
800D56D0	addu   a0, s0, zero
800D56D4	addu   a0, s1, zero
800D56D8	addiu  a1, sp, $0010
800D56DC	addiu  a2, sp, $0018
800D56E0	jal    func3bbdc [$8003bbdc]
800D56E4	addiu  a3, sp, $001c
800D56E8	lh     v0, $0010(sp)
800D56EC	nop
800D56F0	bgez   v0, Ld5700 [$800d5700]
800D56F4	slti   v0, v0, $0140
800D56F8	j      Ld5710 [$800d5710]
800D56FC	sh     zero, $0010(sp)

Ld5700:	; 800D5700
800D5700	bne    v0, zero, Ld5714 [$800d5714]

800D5708	ori    v0, zero, $013f
800D570C	sh     v0, $0010(sp)

Ld5710:	; 800D5710
Ld5714:	; 800D5714
V0 = 66666667;
800D5714	lh     v1, $0010(sp)
800D571C	sll    v1, v1, $07
800D5720	mult   v1, v0
800D5724	sra    v1, v1, $1f
800D5728	mfhi   v0
800D572C	sra    v0, v0, $07
800D5730	subu   v0, v0, v1
////////////////////////////////



////////////////////////////////
// funcd55f4
[SP + 18] = w(A0);
[SP + 1c] = w(A1);
[SP + 20] = w(A2);
[SP + 24] = w(A3);

[SP + 18] = w(A0);

V1 = hu[SP + 18];

[8009a000] = h(hu[SP + 18]);
A3 = SP + 18;
if (V1 == 21)
{
    A2 = 3;
}
else if (V1 == 22)
{
    A2 = 4;
}
else if (V1 == 23)
{
    A2 = 5;
}
else if (V1 < 21 || V1 > 23)
{
    A2 = 2;
}

A1 = 0;
if (A2 != 0)
{
    loopd5674:	; 800D5674
        [8009a004 + A1 * 4] = w(w[SP + 1c + A1 * 4]);
        A1 = A1 + 1;
        V0 = A2 < A1;
    800D5688	beq    v0, zero, loopd5674 [$800d5674]
}

system_execute_AKAO;
////////////////////////////////



////////////////////////////////
// funcd5444
S0 = A0;
S1 = A1;
S2 = A2;
S3 = A3;

A0 = 800d5350;
funcbbeac;

[80162978 + V0 * 20 + 0] = h(0);
[80162978 + V0 * 20 + 4] = h(S0);
[80162978 + V0 * 20 + 6] = h(S1);
[80162978 + V0 * 20 + 8] = h(S2);
[80162978 + V0 * 20 + c] = w(S3);
////////////////////////////////



////////////////////////////////
// funcceb48
// functions that handles almost all hurt action subaction (sound, impact effect, anim, etc.)
index = h[8015169c];
V0 = w[80162978 + index * 20 + 10]; // impact sound
if (V0 != -1)
{
    // if damage == -1 (death) and attacker id >= 4
    if (h[80162978 + index * 20 + a] == -1 && h[80162978 + index * 20 + c] >= 4)
    {
        A0 = 5;
    }
    else
    {
        A0 = hu[80162978 + index * 20 + 10]; // impact sound
    }

    A1 = h[80162978 + index * 20 + 8]; // unit id
    A2 = 0;
    funcbba84; // play sound
}

V1 = bu[80162978 + index * 20 + 14]; // impact effect id
if (V1 != ff)
{
    A0 = 800cde78;
    funcbc04c;

    [801621f0 + V0 * 20 + 8] = h(hu[80162978 + index * 20 + 8]); // unit id
    [801621f0 + V0 * 20 + 14] = w(w[80162978 + index * 20 + 14]); // effect id
    [1f800000] = w(V0);
}

attacker_id = h[80162978 + index * 20 + c];
target_id = A0 = h[80162978 + index * 20 + 8];

if (target_id != attacker_id)
{
    V1 = h[801518e4 + target_id * b9c + 4];

    if (V1 == 33)
    {
        if (target_id < 4)
        {
            [801518e4 + target_id * b9c + 26] = b(1);
        }
        else
        {
            if (bu[800f8378] != 0)
            {
                V0 = hu[80151200 + target_id * 74 + c] & 0010;
            }
            else
            {
                V0 = (h[80161de8] >> target_id) & 1;
            }

            if (V0 != 0)
            {
                A0 = target_id;
                A1 = 1
                funcce21c; // play die effect
            }
        }
    }
    else
    {
        [801518e4 + target_id * b9c + 26] = b(0);

        800CED08	ori    v0, zero, $004e
        V1 = hu[8016360c + 8]; // enemy id
        if (V1 == 4e) // if enemy id == 4e (NO NAME 12 scene maybe not even used ingame)
        {
            800CEDC0	ori    v0, zero, $000f
            800CEDC4	lui    v1, $8016
            800CEDC8	lbu    v1, $3b38(v1)
            800CEDCC	nop
            800CEDD0	bne    v1, v0, Lcee38 [$800cee38]
            800CEDD4	nop
            800CEDD8	lui    a0, $8016
            800CEDDC	lbu    a0, $90cc(a0)
            800CEDE0	nop
            800CEDE4	sll    v1, a0, $01
            800CEDE8	addu   v1, v1, a0
            800CEDEC	sll    v0, v1, $05
            800CEDF0	subu   v0, v0, v1
            800CEDF4	sll    v0, v0, $03
            800CEDF8	subu   v0, v0, a0
            800CEDFC	sll    a0, v0, $02
            800CEE00	lui    at, $8015
            800CEE04	addiu  at, at, $1906
            800CEE08	addu   at, at, a0
            800CEE0C	lbu    v1, $0000(at)
            800CEE10	ori    v0, zero, $0006
            800CEE14	bne    v1, v0, Lcee38 [$800cee38]
            800CEE18	ori    v0, zero, $0014
            800CEE1C	lui    at, $8015
            800CEE20	addiu  at, at, $1907
            800CEE24	addu   at, at, a0
            800CEE28	lbu    v1, $0000(at)
            800CEE2C	nop
            800CEE30	beq    v1, v0, Lcee4c [$800cee4c]
            800CEE34	nop

            Lcee38:	; 800CEE38
            800CEE38	lui    v1, $8010
            800CEE3C	lbu    v1, $a6d4(v1)
            800CEE40	ori    v0, zero, $0004
            800CEE44	bne    v1, v0, Lceeb4 [$800ceeb4]
            800CEE48	nop

            Lcee4c:	; 800CEE4C
            800CEE4C	lui    v0, $8015
            800CEE50	lh     v0, $169c(v0)
            800CEE54	nop
            800CEE58	sll    v0, v0, $05
            800CEE5C	lui    at, $8016
            800CEE60	addiu  at, at, $2980
            800CEE64	addu   at, at, v0
            800CEE68	lh     a0, $0000(at)
            800CEE6C	nop
            800CEE70	sll    v1, a0, $01
            800CEE74	addu   v1, v1, a0
            800CEE78	sll    v0, v1, $05
            800CEE7C	subu   v0, v0, v1
            800CEE80	sll    v0, v0, $03
            800CEE84	subu   v0, v0, a0
            800CEE88	sll    v0, v0, $02
            800CEE8C	ori    v1, zero, $0001
            800CEE90	lui    at, $8015
            800CEE94	addiu  at, at, $18e6
            800CEE98	addu   at, at, v0
            800CEE9C	sh     v1, $0000(at)
            800CEEA0	ori    v0, zero, $0005
            800CEEA4	lui    at, $8016
            800CEEA8	sb     v0, $36f9(at)
        }
        else
        {
            Lceeb4:	; 800CEEB4
            [801518e4 + target_id * b9c + 2] = h(hu[801518e4 + target_id * b9c + 4]);
        }

        [80151200 + target_id * 74 + c] = h(hu[80151200 + target_id * 74 + c] | 0008);
        [801518e4 + target_id * b9c + 3e] = b(bu[801518e4 + target_id * b9c + 3e] | 01);
        [800fa9c0] = b(target_id);

        attacker_id = bu[801590cc];
        effect_id = bu[801518e4 + attacker_id * b9c + 22];
        action_id = bu[801518e4 + attacker_id * b9c + 23];
        if (effect_id != 15 || action_id != d)
        {
            target_id = bu[800fa6d4];

            if (bu[801518e4 + target_id * b9c + 27] & 40 == 0)
            {
                if (bu[800f31f0] == 0)
                {
                    A1 = ;
                    A0 = w[80151200 + target_id * 74 + 0];
                    if ((A0 & 4000) == 0)
                    {
                        if ((A0 & 0400) == 0)
                        {
                            if (bu[80162090] == 0)
                            {
                                [801518e4 + target_id * b9c + 162] = h(hu[80151200 + target_id * 74 + 2c]); // apply delayed rotation for target
                            }
                        }
                    }
                }
            }
        }
        800CF11C	j      Lcf2c0 [$800cf2c0]
    }
}
else
{
    Lcf124:	; 800CF124
    800CF124	lui    v0, $8016
    800CF128	lh     v0, $1de8(v0)
    800CF12C	nop
    800CF130	srav   v0, a1, v0
    800CF134	andi   v0, v0, $0001
    800CF138	beq    v0, zero, Lcf260 [$800cf260]
    800CF13C	slti   v0, a1, $0004
    800CF140	bne    v0, zero, Lcf2c0 [$800cf2c0]
    800CF144	sll    v1, a1, $01
    800CF148	addu   v1, v1, a1
    800CF14C	sll    v0, v1, $05
    800CF150	subu   v0, v0, v1
    800CF154	sll    v0, v0, $03
    800CF158	subu   v0, v0, a1
    800CF15C	sll    v0, v0, $02
    800CF160	lui    at, $8015
    800CF164	addiu  at, at, $18e8
    800CF168	addu   at, at, v0
    800CF16C	lhu    v1, $0000(at)
    800CF170	nop
    800CF174	lui    at, $8015
    800CF178	addiu  at, at, $18e6
    800CF17C	addu   at, at, v0
    800CF180	sh     v1, $0000(at)
    A0 = h[80162978 + index * 20 + 8];
    800CF198	sll    v1, a0, $01
    800CF19C	addu   v1, v1, a0
    800CF1A0	sll    v0, v1, $05
    800CF1A4	subu   v0, v0, v1
    800CF1A8	sll    v0, v0, $03
    800CF1AC	subu   v0, v0, a0
    800CF1B0	sll    v0, v0, $02
    800CF1B4	lui    at, $8015
    800CF1B8	addiu  at, at, $1922
    800CF1BC	addu   at, at, v0
    800CF1C0	lbu    v1, $0000(at)
    800CF1C4	nop
    800CF1C8	ori    v1, v1, $0001
    800CF1CC	lui    at, $8015
    800CF1D0	addiu  at, at, $1922
    800CF1D4	addu   at, at, v0
    800CF1D8	sb     v1, $0000(at)
    800CF1DC	lui    a0, $8015
    800CF1E0	lh     a0, $169c(a0)
    800CF1E4	nop
    800CF1E8	sll    a0, a0, $05
    800CF1EC	lui    at, $8016
    800CF1F0	addiu  at, at, $2980
    800CF1F4	addu   at, at, a0
    800CF1F8	lh     v1, $0000(at)
    800CF1FC	nop
    800CF200	sll    v0, v1, $03
    800CF204	subu   v0, v0, v1
    800CF208	sll    v0, v0, $02
    800CF20C	addu   v0, v0, v1
    800CF210	sll    v0, v0, $02
    800CF214	lui    at, $8015
    800CF218	addiu  at, at, $120c
    800CF21C	addu   at, at, v0
    800CF220	lhu    v1, $0000(at)
    800CF224	nop
    800CF228	ori    v1, v1, $0008
    800CF22C	lui    at, $8015
    800CF230	addiu  at, at, $120c
    800CF234	addu   at, at, v0
    800CF238	sh     v1, $0000(at)
    800CF23C	lui    at, $8016
    800CF240	addiu  at, at, $2980
    800CF244	addu   at, at, a0
    800CF248	lbu    v0, $0000(at)
    800CF24C	nop
    800CF250	lui    at, $8010
    800CF254	sb     v0, $a9c0(at)
    800CF258	j      Lcf2c0 [$800cf2c0]
    800CF25C	nop

    Lcf260:	; 800CF260
    800CF260	lui    v1, $8016
    800CF264	lbu    v1, $90e0(v1)
    800CF268	nop
    800CF26C	sll    v0, v1, $01
    800CF270	addu   v0, v0, v1
    800CF274	sll    v0, v0, $02
    800CF278	lui    at, $8016
    800CF27C	addiu  at, at, $3799
    800CF280	addu   at, at, v0
    800CF284	lb     v1, $0000(at)
    800CF288	ori    v0, zero, $0003
    800CF28C	bne    v1, v0, Lcf2c0 [$800cf2c0]
    800CF290	sll    v0, a1, $01
    800CF294	addu   v0, v0, a1
    800CF298	sll    v1, v0, $05
    800CF29C	subu   v1, v1, v0
    800CF2A0	sll    v1, v1, $03
    800CF2A4	subu   v1, v1, a1
    800CF2A8	sll    v1, v1, $02
    800CF2AC	ori    v0, zero, $0001
    800CF2B0	lui    at, $8015
    800CF2B4	addiu  at, at, $190a
    800CF2B8	addu   at, at, v1
    800CF2BC	sb     v0, $0000(at)
}

Lcf2c0:	; 800CF2C0
[80162978 + index * 20 + 0] = h(-1);
////////////////////////////////