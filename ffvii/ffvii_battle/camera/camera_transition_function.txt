////////////////////////////////
// 800bfda0_transit_function
struct_id = h[800f8360];

if (h[800f7ed8 + struct_id * 28 + 4] == 1)
{
    [800f7ed8 + struct_id * 28 + 0] = h(-1);
}

A0 = h[800f7ed8 + struct_id * 28 + 8];
A1 = h[800f7ed8 + struct_id * 28 + a];
A2 = SP + 10;
battle_get_point_by_model_bone; // get joint position

V0 = h[800f7ed8 + struct_id * 28 + c];
[801518a4 + V0 * e + 0] = h(hu[SP + 10] + h[800f7ed8 + struct_id * 28 + e]);
[801518a4 + V0 * e + 2] = h(hu[SP + 12] + h[800f7ed8 + struct_id * 28 + 10]);
[801518a4 + V0 * e + 4] = h(hu[SP + 14] + h[800f7ed8 + struct_id * 28 + 6]);

[800f7ed8 + struct_id * 28 + 4] = h(hu[800f7ed8 + struct_id * 28 + 4] - 1);
////////////////////////////////



////////////////////////////////
// 800c0410_transit_function
struct_id = h[800f8360];
if (h[800f7ed8 + struct_id * 28 + 2] == 0)
{
    funcc0480;
}

A0 = struct_id;
funcc0630;
////////////////////////////////



////////////////////////////////
// 800c0900_transit_function
struct_id = h[800f8360];
if (h[800f7ed8 + struct_id * 28 + 2] == 0)
{
    funcc0970;
}

A0 = struct_id;
funcc0b20;
////////////////////////////////



////////////////////////////////
// funcc0480
S0 = 800f7ed8 + A0 * 28;
[S0 + 2] = h(hu[S0 + 2] + 1); // increment state

V1 = h[S0 + 12];
V0 = bu[80151844 + V1 * e + d];
if (V0 == 0)
{
    [S0 + 1e] = h(0);
    [S0 + 1a] = h(hu[S0 + 4]);
}
else
{
    A0 = h[S0 + 6];
    A1 = h[S0 + c];
    funcc03b8;
    A0 = h[S0 + 6] - h[S0 + c];
    A1 = V0;
    funcc03fc;
    [S0 + 14] = h(((V0 + 1) << 4) / h[S0 + 4]);

    A0 = h[S0 + 8];
    A1 = h[S0 + e];
    funcc03b8;
    A0 = h[S0 + 8] - h[S0 + e];
    A1 = V0;
    funcc03fc;
    [S0 + 16] = h(((V0 + 1) << 4) / h[S0 + 4]);

    A0 = h[S0 + a];
    A1 = h[S0 + 10];
    funcc03b8;
    A0 = h[S0 + a] - h[S0 + 10];
    A1 = V0;
    funcc03fc;
    [S0 + 18] = h(((V0 + 1) << 4) / h[S0 + 4]);
}
////////////////////////////////



////////////////////////////////
// funcc0314
if (h[801518e4 + A2 * b9c + 2] != 1 || h[80151200 + A2 * 74 + 30] <= 0)
{
    return h[80151200 + A1 * 74 + 30] + A0;
}

return A0;
////////////////////////////////



////////////////////////////////
// funcc0b20
S0 = 800f7ed8 + A0 * 28;
if (h[S0 + 4] == 1)
{
    [S0 + 0] = h(-1);
    V1 = h[S0 + 12];
    [801518a4 + V1 * e + 0] = h(hu[S0 + 6]);
    [801518a4 + V1 * e + 2] = h(hu[S0 + 8]);
    [801518a4 + V1 * e + 4] = h(hu[S0 + a]);
}
else
{
    V0 = h[S0 + 12];
    if (bu[801518a4 + V0 * e + c] == 0)
    {
        A0 = h[S0 + c];
        A1 = h[S0 + 6];
        A2 = h[S0 + 1a];
        A3 = h[S0 + 1e];
        funcc1304;
        [801518a4 + h[S0 + 12] * e + 0] = h(V0);

        A0 = h[S0 + e];
        A1 = h[S0 + 8];
        A2 = h[S0 + 1a];
        A3 = h[S0 + 1e];
        funcc1304;
        [801518a4 + h[S0 + 12] * e + 2] = h(V0);

        A0 = h[S0 + 10];
        A1 = h[S0 + a];
        A2 = h[S0 + 1a];
        A3 = h[S0 + 1e];
        funcc1304;
        [801518a4 + h[S0 + 12] * e + 4] = h(V0);
    }
    else
    {
        800C0CB4	lh     v0, $0012(s0)
        800C0CB8	lui    at, $8015
        800C0CBC	addiu  at, at, $18a4
        800C0CC0	addu   at, at, v1
        800C0CC4	lh     a2, $0000(at)
        800C0CC8	sll    a1, v0, $03
        800C0CCC	subu   a1, a1, v0
        800C0CD0	sll    a1, a1, $01
        800C0CD4	lh     v0, $0012(s0)
        800C0CD8	lui    at, $8015
        800C0CDC	addiu  at, at, $18a6
        800C0CE0	addu   at, at, a1
        800C0CE4	lh     a1, $0000(at)
        800C0CE8	sll    a2, a2, $04
        800C0CEC	lui    at, $1f80
        800C0CF0	sw     a2, $0000(at)
        800C0CF4	sll    a0, v0, $03
        800C0CF8	subu   a0, a0, v0
        800C0CFC	sll    a0, a0, $01
        800C0D00	lh     v0, $0012(s0)
        800C0D04	lui    at, $8015
        800C0D08	addiu  at, at, $18a8
        800C0D0C	addu   at, at, a0
        800C0D10	lh     a0, $0000(at)
        800C0D14	sll    v1, v0, $03
        800C0D18	subu   v1, v1, v0
        800C0D1C	lh     v0, $0014(s0)
        800C0D20	sll    v1, v1, $01
        800C0D24	addu   v0, v0, a2
        800C0D28	sra    v0, v0, $04
        800C0D2C	lui    at, $8015
        800C0D30	addiu  at, at, $18a4
        800C0D34	addu   at, at, v1
        800C0D38	sh     v0, $0000(at)
        800C0D3C	lh     v0, $0012(s0)
        800C0D40	sll    a1, a1, $04
        800C0D44	lui    at, $1f80
        800C0D48	sw     a1, $0004(at)
        800C0D4C	sll    v1, v0, $03
        800C0D50	subu   v1, v1, v0
        800C0D54	lh     v0, $0016(s0)
        800C0D58	sll    v1, v1, $01
        800C0D5C	addu   v0, v0, a1
        800C0D60	sra    v0, v0, $04
        800C0D64	lui    at, $8015
        800C0D68	addiu  at, at, $18a6
        800C0D6C	addu   at, at, v1
        800C0D70	sh     v0, $0000(at)
        800C0D74	lh     v0, $0012(s0)
        800C0D78	sll    a0, a0, $04
        800C0D7C	lui    at, $1f80
        800C0D80	sw     a0, $0008(at)
        800C0D84	sll    v1, v0, $03
        800C0D88	subu   v1, v1, v0
        800C0D8C	lh     v0, $0018(s0)
        800C0D90	sll    v1, v1, $01
        800C0D94	addu   v0, v0, a0
        800C0D98	sra    v0, v0, $04
        [801518a8 + V1] = h(V0);
    }

    [S0 + 1e] = h(hu[S0 + 1e] + 1);
    [S0 + 4] = h(hu[S0 + 4] - 1);
}
////////////////////////////////



////////////////////////////////
// funcc1304
current_step = A3;
start = A0;
end = A1;

A0 = ((current_step << b) / A2) + 800;
system_get_cos;

return start + ((V0 + 1000) * (end - start)) >> d;
////////////////////////////////



////////////////////////////////
// funcc0970
S0 = 800f7ed8 + A0 * 28;
[S0 + 2] = h(hu[S0 + 2] + 1);

if (bu[801518a4 + h[S0 + 12] * e + c] == 0)
{
    [S0 + 1e] = h(0);
    [S0 + 1a] = h(hu[S0 + 4]);
}
else
{
    A0 = h[S0 + 6];
    A1 = h[S0 + c];
    funcc03b8;
    A0 = h[S0 + 6] + h[S0 + c];
    A1 = V0;
    funcc03fc;
    [S0 + 14] = h(((V0 + 1) << 4) / h[S0 + 4]);

    A0 = h[S0 + 8];
    A1 = h[S0 + e];
    funcc03b8;
    A0 = h[S0 + 8] + h[S0 + e];
    A1 = V0;
    funcc03fc;
    [S0 + 16] = h(((V0 + 1) << 4) / h[S0 + 4]);

    A0 = h[S0 + a];
    A1 = h[S0 + 10];
    funcc03b8;
    A0 = h[S0 + a] + h[S0 + 10];
    A1 = V0;
    funcc03fc;
    [S0 + 18] = h(((V0 + 1) << 4) / h[S0 + 4]);
}
////////////////////////////////



////////////////////////////////
// funcc03b8
// get difference module
A0 = A0 - A1;
A0 = A0 * A0;
system_square_root;
return V0;
////////////////////////////////



////////////////////////////////
// funcc03fc
V0 = A1;
if (A0 < 0)
{
    V0 = -V0;
}
return V0;
////////////////////////////////



////////////////////////////////
// funcc0630
S0 = 800f7ed8 + A0 * 28;
if (h[S0 + 4] == 1)
{
    [S0 + 0] = h(-1);
    V1 = h[S0 + 12];
    [80151844 + V1 * e + 0] = h(hu[S0 + 6]);
    [80151844 + V1 * e + 2] = h(hu[S0 + 8]);
    [80151844 + V1 * e + 4] = h(hu[S0 + a]);

    800C06E4	j      Lc08ec [$800c08ec]
}
else
{
    V0 = h[S0 + 12];
    if (bu[80151844 + V0 * e + c] == 0)
    {
        A0 = h[S0 + c];
        A1 = h[S0 + 6];
        A2 = h[S0 + 1a];
        A3 = h[S0 + 1e];
        funcc1304;
        [80151844 + h[S0 + 12] * e + 0] = h(V0);

        A0 = h[S0 + e];
        A1 = h[S0 + 8];
        A2 = h[S0 + 1a];
        A3 = h[S0 + 1e];
        funcc1304;
        [80151844 + h[S0 + 12] * e + 2] = h(V0);

        A0 = h[S0 + 10];
        A1 = h[S0 + a];
        A2 = h[S0 + 1a];
        A3 = h[S0 + 1e];
        funcc1304;
        [80151844 + h[S0 + 12] * e + 4] = h(V0);

        [S0 + 1e] = h(hu[S0 + 1e] + 1);
    }
    else
    {
        800C07E4	lh     v0, $0012(s0)
        800C07E8	lui    at, $8015
        800C07EC	addiu  at, at, $1844
        800C07F0	addu   at, at, v1
        800C07F4	lh     a2, $0000(at)
        800C07F8	sll    a1, v0, $03
        800C07FC	subu   a1, a1, v0
        800C0800	sll    a1, a1, $01
        800C0804	lh     v0, $0012(s0)
        800C0808	lui    at, $8015
        800C080C	addiu  at, at, $1846
        800C0810	addu   at, at, a1
        800C0814	lh     a1, $0000(at)
        800C0818	sll    a2, a2, $04
        800C081C	lui    at, $1f80
        800C0820	sw     a2, $0000(at)
        800C0824	sll    a0, v0, $03
        800C0828	subu   a0, a0, v0
        800C082C	sll    a0, a0, $01
        800C0830	lh     v0, $0012(s0)
        800C0834	lui    at, $8015
        800C0838	addiu  at, at, $1848
        800C083C	addu   at, at, a0
        800C0840	lh     a0, $0000(at)
        800C0844	sll    v1, v0, $03
        800C0848	subu   v1, v1, v0
        800C084C	lh     v0, $0014(s0)
        800C0850	sll    v1, v1, $01
        800C0854	addu   v0, v0, a2
        800C0858	sra    v0, v0, $04
        800C085C	lui    at, $8015
        800C0860	addiu  at, at, $1844
        800C0864	addu   at, at, v1
        800C0868	sh     v0, $0000(at)
        800C086C	lh     v0, $0012(s0)
        800C0870	sll    a1, a1, $04
        800C0874	lui    at, $1f80
        800C0878	sw     a1, $0004(at)
        800C087C	sll    v1, v0, $03
        800C0880	subu   v1, v1, v0
        800C0884	lh     v0, $0016(s0)
        800C0888	sll    v1, v1, $01
        800C088C	addu   v0, v0, a1
        800C0890	sra    v0, v0, $04
        800C0894	lui    at, $8015
        800C0898	addiu  at, at, $1846
        800C089C	addu   at, at, v1
        800C08A0	sh     v0, $0000(at)
        800C08A4	lh     v0, $0012(s0)
        800C08A8	sll    a0, a0, $04
        800C08AC	lui    at, $1f80
        800C08B0	sw     a0, $0008(at)
        800C08B4	sll    v1, v0, $03
        800C08B8	subu   v1, v1, v0
        800C08BC	lh     v0, $0018(s0)
        800C08C0	sll    v1, v1, $01
        800C08C4	addu   v0, v0, a0
        800C08C8	sra    v0, v0, $04
        800C08CC	lui    at, $8015
        800C08D0	addiu  at, at, $1848
        800C08D4	addu   at, at, v1
        800C08D8	sh     v0, $0000(at)
    }

    [S0 + 4] = h(hu[S0 + 4] - 1);
}
////////////////////////////////