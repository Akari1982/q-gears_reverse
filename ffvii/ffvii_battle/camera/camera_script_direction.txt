////////////////////////////////
// funcbea38
// camera direction script
// A2 = -3 - win
// A2 = -2 - init
// A2 = -1 - default
camera_id = A2;
camera_struct_id = A0;
S1 = 1f800020;
A1 = camera_struct_id;
[1f800020] = b(1);

if (camera_id == -1)
{
    [1f800024] = w(800ea198);
}
else if (camera_id == -2)
{
    V0 = bu[80163f30];
    [1f800024] = w(w[800e9ff8 + V0 * 4]);
}
else if (camera_id == -3)
{
    V1 = w[801a000c];
    [1f800024] = w(w[V1 + camera_struct_id * 4]);
}
else
{
    V1 = w[801a0004];
    [1f800024] = w(w[V1 + (camera_id * 3 + camera_struct_id) * 4]);
}



if (hu[801518a4 + camera_struct_id * e + 8] == ff)
{
    [801518a4 + camera_struct_id * e + 8] = h(0);
    [801518a4 + camera_struct_id * e + a] = h(0);
    [801518a4 + camera_struct_id * e + c] = b(0);
    [800f4b00] = b(0);
}



S3 = camera_struct_id;
S2 = camera_struct_id * e;
S6 = 801518a4 + camera_struct_id * e;
S5 = 1f800014;

Lbebb0:	; 800BEBB0
    V1 = hu[801518a4 + camera_struct_id * e + 8];
    [801518a4 + camera_struct_id * e + 8] = h(V1 + 1);
    [1f800021] = b(bu[w[1f800024] + V1]);



    V0 = bu[1f800021];
    V1 = V0 - d8;
    V0 = V1 < 28;
    if (V0 != 0)
    {
        V0 = w[800a0724 + V1 * 4];

        800BEC1C	jr     v0 

0 28F80B808CF30B8058FA0B8080ED0B80
4 98ED0B80E8F30B808CEF0B80E0EF0B80
8 18F60B80
b 78F90B80
e 80F50B8058FA0B80
11 58FA0B8044F10B8058FA0B80
14 B8F00B8058FA0B8058FA0B8058FA0B80
18 B4ED0B8058FA0B8058FA0B8058FA0B80
1e 58FA0B80
1f 58FA0B80
20 C8EE0B80
21 F4EF0B80
23 58FA0B80
24 58FA0B80
25 58FA0B80
26 24EC0B80

        800BEC24	lui    at, $8015
        800BEC28	addiu  at, at, $18ae
        800BEC2C	addu   at, at, s2
        800BEC30	lhu    v0, $0000(at)
        800BEC34	nop
        800BEC38	bne    v0, zero, Lbfa5c [$800bfa5c]
        800BEC3C	nop
        800BEC40	lui    at, $8015
        800BEC44	addiu  at, at, $18ac
        800BEC48	addu   at, at, s2
        800BEC4C	lhu    v1, $0000(at)

        V0 = w[1f800024];
        800BEC58	addu   v0, v0, v1
        800BEC5C	lbu    v0, $0000(v0)
        800BEC60	nop
        800BEC64	sb     v0, $0001(s1)
        800BEC68	lbu    v1, $0001(s1)
        800BEC6C	ori    v0, zero, $00c0
        800BEC70	bne    v1, v0, Lbfa5c [$800bfa5c]
        800BEC74	nop
        800BEC78	sh     zero, $0008(s6)
        800BEC7C	lui    at, $8015
        800BEC80	addiu  at, at, $18ae
        800BEC84	addu   at, at, s2
        800BEC88	sh     zero, $0000(at)
        800BEC8C	j      Lbfa5c [$800bfa5c]
        800BEC90	nop

        case fa: // 22
        {
            A0 = w[1f800024]; // offset to camera script start
            A1 = camera_struct_id;
            funcbfb10; // get start camera X
            [801518a4 + camera_struct_id * e + 0] = h(V0);

            A0 = w[1f800024];
            A1 = camera_struct_id;
            funcbfb10; // get start camera Y
            [801518a4 + camera_struct_id * e + 2] = h(V0);

            A0 = w[1f800024];
            A1 = camera_struct_id;
            funcbfb10; // get start camera Z
            [801518a4 + camera_struct_id * e + 4] = h(V0);

            800BECE8	j      Lbfa5c [$800bfa5c]
        }
        break;

        case f5: // 1d
        {
            V1 = hu[801518a4 + camera_struct_id * e + 8];
            [801518a4 + camera_struct_id * e + 8] = h(V1 + 1);
            [801518a4 + camera_struct_id * e + a] = h(bu[w[1f800024] + V1]);

            800BED3C	j      Lbfa5c [$800bfa5c]
        }
        break;

        case f4: // 1c
        {
            V0 = hu[801518a4 + camera_struct_id * e + a];
            if (V0 != 0)
            {
                [801518a4 + camera_struct_id * e + a] = h(V0 - 1);
                [801518a4 + camera_struct_id * e + 8] = h(hu[801518a4 + camera_struct_id * e + 8] - 1);
                [1f800020] = b(0);
            }

            800BED3C	j      Lbfa5c [$800bfa5c]
        }
        break;

        800BED80	lui    at, $8015
        800BED84	addiu  at, at, $18b0
        800BED88	addu   at, at, s2
        800BED8C	sb     zero, $0000(at)
        800BED90	j      Lbfa5c [$800bfa5c]
        800BED94	nop
        800BED98	ori    v0, zero, $0001
        800BED9C	lui    at, $8015
        800BEDA0	addiu  at, at, $18b0
        800BEDA4	addu   at, at, s2
        800BEDA8	sb     v0, $0000(at)
        800BEDAC	j      Lbfa5c [$800bfa5c]
        800BEDB0	nop
        800BEDB4	lui    at, $8015
        800BEDB8	addiu  at, at, $18ac
        800BEDBC	addu   at, at, s2
        800BEDC0	lhu    v1, $0000(at)
        800BEDC4	nop
        800BEDC8	addiu  v0, v1, $0001
        800BEDCC	lui    at, $8015
        800BEDD0	addiu  at, at, $18ac
        800BEDD4	addu   at, at, s2
        800BEDD8	sh     v0, $0000(at)
        800BEDDC	lw     v0, $0004(s1)
        800BEDE0	lui    s0, $1f80
        800BEDE4	addu   v1, v1, v0
        800BEDE8	lbu    a1, $0000(v1)
        800BEDEC	ori    s0, s0, $000c
        800BEDF0	sll    v1, a1, $01
        800BEDF4	sw     a1, $0000(s0)
        800BEDF8	lui    at, $8015
        800BEDFC	addiu  at, at, $18ac
        800BEE00	addu   at, at, s2
        800BEE04	lhu    a2, $0000(at)
        800BEE08	addu   v1, v1, a1
        800BEE0C	addiu  v0, a2, $0001
        800BEE10	lui    at, $8015
        800BEE14	addiu  at, at, $18ac
        800BEE18	addu   at, at, s2
        800BEE1C	sh     v0, $0000(at)
        800BEE20	sll    v0, v1, $05
        800BEE24	subu   v0, v0, v1
        800BEE28	sll    v0, v0, $03
        800BEE2C	subu   v0, v0, a1
        800BEE30	sll    v0, v0, $02
        800BEE34	lw     v1, $0004(s1)
        800BEE38	lw     a0, $0004(s1)
        800BEE3C	addu   a2, a2, v1
        800BEE40	lui    v1, $8015
        800BEE44	addiu  v1, v1, $190f
        800BEE48	lbu    a1, $0000(a2)
        800BEE4C	addu   v0, v0, v1
        800BEE50	addu   v0, v0, a1
        800BEE54	lbu    v0, $0000(v0)
        800BEE58	addu   a1, s3, zero
        800BEE5C	jal    funcbfb10 [$800bfb10]
        800BEE60	sw     v0, $0000(s5)
        800BEE64	sll    v0, v0, $10
        800BEE68	lw     a0, $0004(s1)
        800BEE6C	sra    v0, v0, $10
        800BEE70	lui    at, $1f80
        800BEE74	sw     v0, $0000(at)
        800BEE78	jal    funcbfb10 [$800bfb10]
        800BEE7C	addu   a1, s3, zero
        800BEE80	sll    v0, v0, $10
        800BEE84	lw     a0, $0004(s1)
        800BEE88	sra    v0, v0, $10
        800BEE8C	lui    at, $1f80
        800BEE90	sw     v0, $0004(at)
        800BEE94	jal    funcbfb10 [$800bfb10]
        800BEE98	addu   a1, s3, zero
        A2 = camera_struct_id;
        800BEEA0	sll    v0, v0, $10
        800BEEA4	lh     a0, $0000(s0)

        Lbeea8:	; 800BEEA8
        800BEEA8	lh     a1, $0000(s5)
        800BEEAC	sra    v0, v0, $10
        800BEEB0	lui    at, $1f80
        800BEEB4	sw     v0, $0008(at)
        800BEEB8	jal    funcc0088 [$800c0088]
        800BEEBC	nop
        800BEEC0	j      Lbfa5c [$800bfa5c]
        800BEEC4	sb     zero, $0000(s1)
        800BEEC8	lui    at, $8015
        800BEECC	addiu  at, at, $18ac
        800BEED0	addu   at, at, s2
        800BEED4	lhu    a2, $0000(at)
        800BEED8	lui    a1, $8016
        800BEEDC	lbu    a1, $1eec(a1)
        800BEEE0	addiu  v0, a2, $0001
        800BEEE4	sll    v1, a1, $01
        800BEEE8	addu   v1, v1, a1
        800BEEEC	lui    at, $8015
        800BEEF0	addiu  at, at, $18ac
        800BEEF4	addu   at, at, s2
        800BEEF8	sh     v0, $0000(at)
        800BEEFC	sll    v0, v1, $05
        800BEF00	subu   v0, v0, v1
        800BEF04	sll    v0, v0, $03
        800BEF08	subu   v0, v0, a1
        800BEF0C	sll    v0, v0, $02
        800BEF10	lw     v1, $0004(s1)
        800BEF14	lw     a0, $0004(s1)
        800BEF18	addu   a2, a2, v1
        800BEF1C	lui    v1, $8015
        800BEF20	addiu  v1, v1, $190f
        800BEF24	lbu    a1, $0000(a2)
        800BEF28	addu   v0, v0, v1
        800BEF2C	addu   v0, v0, a1
        800BEF30	lbu    v0, $0000(v0)
        800BEF34	addu   a1, s3, zero
        800BEF38	jal    funcbfb10 [$800bfb10]
        800BEF3C	sw     v0, $0000(s5)
        800BEF40	sll    v0, v0, $10
        800BEF44	lw     a0, $0004(s1)
        800BEF48	sra    v0, v0, $10
        800BEF4C	lui    at, $1f80
        800BEF50	sw     v0, $0000(at)
        800BEF54	jal    funcbfb10 [$800bfb10]
        800BEF58	addu   a1, s3, zero
        800BEF5C	sll    v0, v0, $10
        800BEF60	lw     a0, $0004(s1)
        800BEF64	sra    v0, v0, $10
        800BEF68	lui    at, $1f80
        800BEF6C	sw     v0, $0004(at)
        800BEF70	jal    funcbfb10 [$800bfb10]
        800BEF74	addu   a1, s3, zero
        A2 = camera_struct_id;
        800BEF7C	lui    a0, $8016
        800BEF80	lbu    a0, $1eec(a0)
        800BEF84	j      Lbeea8 [$800beea8]
        800BEF88	sll    v0, v0, $10
        800BEF8C	lui    at, $8015
        800BEF90	addiu  at, at, $18ac
        800BEF94	addu   at, at, s2
        800BEF98	lhu    v1, $0000(at)
        800BEF9C	nop
        800BEFA0	addiu  v0, v1, $0001
        800BEFA4	lui    at, $8015
        800BEFA8	addiu  at, at, $18ac
        800BEFAC	addu   at, at, s2
        800BEFB0	sh     v0, $0000(at)
        800BEFB4	lw     v0, $0004(s1)
        800BEFB8	nop
        800BEFBC	addu   v1, v1, v0
        800BEFC0	lbu    v0, $0000(v1)
        800BEFC4	nop
        800BEFC8	beq    v0, zero, Lbfa5c [$800bfa5c]
        800BEFCC	ori    v0, zero, $0003
        800BEFD0	lui    at, $8016
        800BEFD4	sb     v0, $1eec(at)
        800BEFD8	j      Lbfa5c [$800bfa5c]
        800BEFDC	nop
        800BEFE0	ori    v0, zero, $000f
        800BEFE4	lui    at, $8016
        800BEFE8	sb     v0, $1eec(at)
        800BEFEC	j      Lbfa5c [$800bfa5c]
        800BEFF0	nop
        800BEFF4	lui    at, $8015
        800BEFF8	addiu  at, at, $18ac
        800BEFFC	addu   at, at, s2
        800BF000	lhu    a2, $0000(at)
        800BF004	lui    a1, $8016
        800BF008	lbu    a1, $90cc(a1)
        800BF00C	addiu  v0, a2, $0001
        800BF010	sll    v1, a1, $01
        800BF014	addu   v1, v1, a1
        800BF018	lui    at, $8015
        800BF01C	addiu  at, at, $18ac
        800BF020	addu   at, at, s2
        800BF024	sh     v0, $0000(at)
        800BF028	sll    v0, v1, $05
        800BF02C	subu   v0, v0, v1
        800BF030	sll    v0, v0, $03
        800BF034	subu   v0, v0, a1
        800BF038	sll    v0, v0, $02
        800BF03C	lw     v1, $0004(s1)
        800BF040	lw     a0, $0004(s1)
        800BF044	addu   a2, a2, v1
        800BF048	lui    v1, $8015
        800BF04C	addiu  v1, v1, $190f
        800BF050	lbu    a1, $0000(a2)
        800BF054	addu   v0, v0, v1
        800BF058	addu   v0, v0, a1
        800BF05C	lbu    v0, $0000(v0)
        800BF060	addu   a1, s3, zero
        800BF064	jal    funcbfb10 [$800bfb10]
        800BF068	sw     v0, $0000(s5)
        800BF06C	sll    v0, v0, $10
        800BF070	lw     a0, $0004(s1)
        800BF074	sra    v0, v0, $10
        800BF078	lui    at, $1f80
        800BF07C	sw     v0, $0000(at)
        800BF080	jal    funcbfb10 [$800bfb10]
        800BF084	addu   a1, s3, zero
        800BF088	sll    v0, v0, $10
        800BF08C	lw     a0, $0004(s1)
        800BF090	sra    v0, v0, $10
        800BF094	lui    at, $1f80
        800BF098	sw     v0, $0004(at)
        800BF09C	jal    funcbfb10 [$800bfb10]
        800BF0A0	addu   a1, s3, zero
        A2 = camera_struct_id;
        800BF0A8	lui    a0, $8016
        800BF0AC	lbu    a0, $90cc(a0)
        800BF0B0	j      Lbeea8 [$800beea8]
        800BF0B4	sll    v0, v0, $10
        800BF0B8	lui    a0, $800c
        800BF0BC	addiu  a0, a0, $fda0 (=-$260)
        800BF0C0	jal    funcbc11c [$800bc11c]
        800BF0C4	nop
        800BF0C8	sh     v0, $0008(s1)
        800BF0CC	sll    v0, v0, $10
        800BF0D0	lui    at, $8015
        800BF0D4	addiu  at, at, $18ac
        800BF0D8	addu   at, at, s2
        800BF0DC	lhu    a1, $0000(at)
        800BF0E0	sra    v0, v0, $10
        800BF0E4	addiu  v1, a1, $0001
        800BF0E8	lui    at, $8015
        800BF0EC	addiu  at, at, $18ac
        800BF0F0	addu   at, at, s2
        800BF0F4	sh     v1, $0000(at)
        800BF0F8	sll    v1, v0, $02
        800BF0FC	lw     a0, $0004(s1)
        800BF100	addu   v1, v1, v0
        800BF104	addu   a1, a1, a0
        800BF108	lbu    a0, $0000(a1)
        800BF10C	sll    v1, v1, $03
        800BF110	lui    at, $800f
        800BF114	addiu  at, at, $7ee0
        800BF118	addu   at, at, v1
        800BF11C	sh     a0, $0000(at)
        800BF120	lui    at, $8015
        800BF124	addiu  at, at, $18ac
        800BF128	addu   at, at, s2
        800BF12C	lhu    a2, $0000(at)
        800BF130	lhu    v1, $0008(s1)
        800BF134	lui    at, $1f80
        800BF138	sw     a0, $000c(at)
        800BF140	addiu  v0, a2, $0001
            A1 = struct_index * 28;
            [801518ac + S2] = h(V0);
            V1 = w[1f800024];
            V0 = A0 * b9c;
            A2 = A2 + 1;
            V1 = 8015190f;
            A0 = bu[A2];
            V0 = V0 + V1 + A0;
            V0 = bu[V0];
            [80077ee2 + A1] = h(V0);

            A0 = w[1f800024];
            A1 = S3;
            funcbfb10; // get two bytes from script

            [800f7ee6 + struct_index * 28] = h(V0);

            A0 = w[1f800024];
            A1 = S3;
            funcbfb10; // get two bytes from script

            A0 = struct_index * 28;
            [800f7ee8 + A0] = h(V0);

            A0 = w[1f800024];
            A1 = S3;
            funcbfb10; // get two bytes from script

            V1 = struct_index * 28;
            [800f7ede + V1] = h(V0);

            A1 = hu[801518ac + S2];
            [801518ac + S2] = h(A1 + 1);
            A0 = w[1f800024];

            [800f7edc + struct_index * 28] = h(bu[A1 + A0]);
            [800f7ee4 + struct_index * 28] = h(camera_struct_id);
            800BF384	j      Lbfa5c [$800bfa5c]


        800BF144	lui    a0, $800c
        800BF148	addiu  a0, a0, $fda0 (=-$260)
        800BF14C	jal    funcbc11c [$800bc11c]
        800BF150	nop
        800BF154	sh     v0, $0008(s1)
        800BF158	sll    v0, v0, $10
        800BF15C	sra    v0, v0, $10
        800BF160	sll    v1, v0, $02
        800BF164	addu   v1, v1, v0
        800BF168	lui    v0, $8016
        800BF16C	lbu    v0, $1eec(v0)
        800BF170	lui    a0, $8016
        800BF174	lbu    a0, $1eec(a0)
        800BF17C	sll    v1, v1, $03
            [800f7ee0 + V1] = h(V0);
            A2 = hu[801518ac + S2];
            V0 = A2 + 1;
            A1 = struct_index * 28;
            [801518ac + S2] = h(V0);
            V1 = w[1f800024];
            V0 = A0 * b9c;
            A2 = A2 + 1;
            V1 = 8015190f;
            A0 = bu[A2];
            V0 = V0 + V1 + A0;
            V0 = bu[V0];
            [80077ee2 + A1] = h(V0);

            A0 = w[1f800024];
            A1 = S3;
            funcbfb10; // get two bytes from script

            [800f7ee6 + struct_index * 28] = h(V0);

            A0 = w[1f800024];
            A1 = S3;
            funcbfb10; // get two bytes from script

            A0 = struct_index * 28;
            [800f7ee8 + A0] = h(V0);

            A0 = w[1f800024];
            A1 = S3;
            funcbfb10; // get two bytes from script

            V1 = struct_index * 28;
            [800f7ede + V1] = h(V0);

            A1 = hu[801518ac + S2];
            [801518ac + S2] = h(A1 + 1);
            A0 = w[1f800024];

            [800f7edc + struct_index * 28] = h(bu[A1 + A0]);
            [800f7ee4 + struct_index * 28] = h(camera_struct_id);
            800BF384	j      Lbfa5c [$800bfa5c]



        case e8: // 10
        {
            A0 = 800bfda0;
            funcbc11c;
            struct_index = V0; // index of where we add this info

            attacker_id = bu[801590cc];
            [800f7ed8 + struct_index * 28 + 8] = h(attacker_id);

            A2 = hu[801518a4 + camera_struct_id * e + 8];
            [801518a4 + camera_struct_id * e + 8] = h(A2 + 1);

            V1 = w[1f800024];
            [800f7ed8 + struct_index * 28 + a] = h(bu[801518e4 + attacker_id * b9c + 2b + bu[V1 + A2]]);

            A0 = w[1f800024];
            A1 = S3;
            funcbfb10; // get two bytes from script
            [800f7ed8 + struct_index * 28 + e] = h(V0);

            A0 = w[1f800024];
            A1 = S3;
            funcbfb10; // get two bytes from script
            [800f7ed8 + struct_index * 28 + 10] = h(V0);

            A0 = w[1f800024];
            A1 = S3;
            funcbfb10; // get two bytes from script
            [800f7ed8 + struct_index * 28 + 6] = h(V0);

            A1 = hu[801518a4 + camera_struct_id * e + 8];
            [801518a4 + camera_struct_id * e + 8] = h(A1 + 1);

            A0 = w[1f800024];
            [800f7ed8 + struct_index * 28 + 4] = h(bu[A1 + A0]); // number of steps
            [800f7ed8 + struct_index * 28 + c] = h(camera_struct_id);

            800BF384	j      Lbfa5c [$800bfa5c]
        }
        break;



        800BF38C	lui    v0, $8010
        800BF390	lhu    v0, $31e8(v0)
        800BF394	nop
        800BF398	lui    at, $8015
        800BF39C	addiu  at, at, $18a4
        800BF3A0	addu   at, at, s2
        800BF3A4	sh     v0, $0000(at)
        800BF3A8	lui    v0, $8010
        800BF3AC	lhu    v0, $31ea(v0)
        800BF3B0	nop
        800BF3B4	lui    at, $8015
        800BF3B8	addiu  at, at, $18a6
        800BF3BC	addu   at, at, s2
        800BF3C0	sh     v0, $0000(at)
        800BF3C4	lui    v0, $8010
        800BF3C8	lhu    v0, $31ec(v0)
        800BF3CC	nop
        800BF3D0	lui    at, $8015
        800BF3D4	addiu  at, at, $18a8
        800BF3D8	addu   at, at, s2
        800BF3DC	sh     v0, $0000(at)
        800BF3E0	j      Lbfa5c [$800bfa5c]
        800BF3E4	nop
        800BF3E8	lui    at, $8015
        800BF3EC	addiu  at, at, $18ac
        800BF3F0	addu   at, at, s2
        800BF3F4	lhu    v1, $0000(at)
        800BF3F8	nop
        800BF3FC	addiu  v0, v1, $0001
        800BF400	lui    at, $8015
        800BF404	addiu  at, at, $18ac
        800BF408	addu   at, at, s2
        800BF40C	sh     v0, $0000(at)
        800BF410	lw     v0, $0004(s1)
        800BF414	nop
        800BF418	addu   v1, v1, v0
        800BF41C	lbu    v0, $0000(v1)
        800BF420	nop
        800BF424	lui    at, $8016
        800BF428	sb     v0, $3b3c(at)
        800BF42C	j      Lbfa5c [$800bfa5c]
        800BF430	nop



        case e1: // 9
        {
            V1 = bu[80163b3c];
            [801518a4 + camera_struct_id * e + 0] = h(hu[8016360c + 8 + 14 + A0 * c + 6]); // direction camera X from battle setup
            [801518a4 + camera_struct_id * e + 2] = h(hu[8016360c + 8 + 14 + A0 * c + 8]); // direction camera Y from battle setup
            [801518a4 + camera_struct_id * e + 4] = h(hu[8016360c + 8 + 14 + A0 * c + a]); // direction camera Z from battle setup

            800BF4B8	j      Lbfa5c [$800bfa5c]
        }
        break;



        case e2: // a
        {
            A0 = 800c0900;
            funcbc11c;

            A0 = bu[80163b3c]; // idle camera id in battle setup
            [800f7ed8 + V0 * 28 + 6] = h(hu[8016360c + 8 + 14 + A0 * c + 6]); // direction camera X from battle setup
            [800f7ed8 + V0 * 28 + 8] = h(hu[8016360c + 8 + 14 + A0 * c + 8]); // direction camera Y from battle setup
            [800f7ed8 + V0 * 28 + a] = h(hu[8016360c + 8 + 14 + A0 * c + a]); // direction camera Z from battle setup

            V1 = hu[801518ac + camera_struct_id * e];
            [801518ac + camera_struct_id * e] = h(V1 + 1);
            [800f7ed8 + V0 * 28 + 4] = h(bu[w[1f800024] + V1]);
            [800f7ed8 + V0 * 28 + c] = h(hu[801518a4 + camera_struct_id * e + 0]); // camera direction X
            [800f7ed8 + V0 * 28 + e] = h(hu[801518a4 + camera_struct_id * e + 2]); // camera direction Y
            [800f7ed8 + V0 * 28 + 10] = h(hu[801518a4 + camera_struct_id * e + 4]); // camera direction Z
            [800f7ed8 + V0 * 28 + 12] = h(camera_struct_id);

            800BF820	j      Lbfa5c [$800bfa5c]
        }
        break;



        800BF580	lui    a0, $800c
        800BF584	addiu  a0, a0, $0900
        800BF588	jal    funcbc11c [$800bc11c]
        800BF58C	nop
        800BF590	sll    v1, v0, $02
        800BF594	addu   v1, v1, v0
        800BF598	sll    v1, v1, $03
        800BF59C	lui    v0, $800f
        800BF5A0	addiu  v0, v0, $7ed8
        800BF5A4	addu   s0, v1, v0
        800BF5A8	lw     a0, $0004(s1)
        800BF5AC	jal    funcbfb10 [$800bfb10]
        800BF5B0	addu   a1, s3, zero
        800BF5B4	sh     v0, $0006(s0)
        800BF5B8	lw     a0, $0004(s1)
        800BF5BC	jal    funcbfb10 [$800bfb10]
        800BF5C0	addu   a1, s3, zero
        800BF5C4	sh     v0, $0008(s0)
        800BF5C8	lw     a0, $0004(s1)
        800BF5CC	jal    funcbfb10 [$800bfb10]
        800BF5D0	addu   a1, s3, zero
        800BF5D4	sh     v0, $000a(s0)
        800BF5D8	lui    at, $8015
        800BF5DC	addiu  at, at, $18ac
        800BF5E0	addu   at, at, s2
        800BF5E4	lhu    v1, $0000(at)
        800BF5E8	nop
        800BF5EC	addiu  v0, v1, $0001
        800BF5F0	lui    at, $8015
        800BF5F4	addiu  at, at, $18ac
        800BF5F8	addu   at, at, s2
        800BF5FC	sh     v0, $0000(at)
        800BF600	lw     v0, $0004(s1)
        800BF604	nop
        800BF608	addu   v1, v1, v0
        800BF60C	lbu    v0, $0000(v1)
        800BF610	j      Lbf7d8 [$800bf7d8]
        800BF614	sh     v0, $0004(s0)
        800BF618	lui    at, $8015
        800BF61C	addiu  at, at, $18ac
        800BF620	addu   at, at, s2
        800BF624	lhu    v1, $0000(at)
        800BF628	nop
        800BF62C	addiu  v0, v1, $0001
        800BF630	lui    at, $8015
        800BF634	addiu  at, at, $18ac
        800BF638	addu   at, at, s2
        800BF63C	sh     v0, $0000(at)
        800BF640	lw     v0, $0004(s1)
        800BF644	lui    at, $8015
        800BF648	addiu  at, at, $18ac
        800BF64C	addu   at, at, s2
        800BF650	lhu    a0, $0000(at)
        800BF654	addu   v1, v1, v0
        800BF658	lbu    a2, $0000(v1)
        800BF65C	addiu  v0, a0, $0001
        800BF660	lui    at, $8015
        800BF664	addiu  at, at, $18ac
        800BF668	addu   at, at, s2
        800BF66C	sh     v0, $0000(at)
        800BF670	lw     v0, $0004(s1)
        800BF674	nop
        800BF678	addu   a0, a0, v0
        800BF67C	sll    v1, a2, $01
        800BF680	addu   v1, v1, a2
        800BF684	lui    at, $1f80
        800BF688	sw     a2, $0014(at)
        800BF68C	lbu    v0, $0000(a0)
        800BF690	lui    a0, $8016
        800BF694	lbu    a0, $1eec(a0)
        800BF698	sll    v1, v1, $02
        800BF69C	lui    at, $1f80
        800BF6A0	sw     v0, $000c(at)
        800BF6A4	sll    v0, a0, $03
        800BF6A8	subu   v0, v0, a0
        800BF6AC	sll    v0, v0, $02
        800BF6B0	addu   v0, v0, a0
        800BF6B4	sll    t1, v0, $02
        800BF6B8	addu   t0, v1, t1
        800BF6BC	sll    v1, a0, $01
        800BF6C0	addu   v1, v1, a0
        800BF6C4	sll    v0, v1, $05
        800BF6C8	subu   v0, v0, v1
        800BF6CC	sll    v0, v0, $03
        800BF6D0	subu   v0, v0, a0
        800BF6D4	sll    a3, v0, $02
        800BF6D8	lui    at, $8015
        800BF6DC	addiu  at, at, $1214
        800BF6E0	addu   at, at, t0
        800BF6E4	lh     v0, $0000(at)
        800BF6E8	lui    at, $8015
        800BF6EC	addiu  at, at, $1a4c
        800BF6F0	addu   at, at, a3
        800BF6F4	lh     a0, $0000(at)
        800BF6F8	lui    at, $8015
        800BF6FC	addiu  at, at, $1218
        800BF700	addu   at, at, t0
        800BF704	lh     v1, $0000(at)
        800BF708	lui    at, $8015
        800BF70C	addiu  at, at, $1a50
        800BF710	addu   at, at, a3
        800BF714	lh     a1, $0000(at)
        800BF718	addu   v0, v0, a0
        800BF71C	addu   v1, v1, a1
        800BF720	lui    at, $1f80
        800BF724	sw     v0, $0000(at)
        800BF728	lui    at, $1f80
        800BF72C	sw     v1, $0008(at)
        800BF730	bne    a2, zero, Lbf750 [$800bf750]
        800BF734	nop
        800BF738	lui    at, $8015
        800BF73C	addiu  at, at, $1216
        800BF740	addu   at, at, t1
        800BF744	lh     v0, $0000(at)
        800BF748	j      Lbf778 [$800bf778]
        800BF74C	nop

        Lbf750:	; 800BF750
        800BF750	lui    at, $8015
        800BF754	addiu  at, at, $1216
        800BF758	addu   at, at, t0
        800BF75C	lh     v0, $0000(at)
        800BF760	lui    at, $8015
        800BF764	addiu  at, at, $1a4e
        800BF768	addu   at, at, a3
        800BF76C	lh     v1, $0000(at)
        800BF770	nop
        800BF774	addu   v0, v0, v1

        Lbf778:	; 800BF778
        800BF778	lui    at, $1f80
        800BF77C	sw     v0, $0004(at)
        800BF780	lui    a0, $800c
        800BF784	addiu  a0, a0, $0900
        800BF788	jal    funcbc11c [$800bc11c]
        800BF78C	nop
        800BF790	sll    v1, v0, $02
        800BF794	addu   v1, v1, v0
        800BF798	sll    v1, v1, $03
        800BF79C	lui    v0, $800f
        800BF7A0	addiu  v0, v0, $7ed8
        800BF7A4	lui    a0, $1f80
        800BF7A8	lhu    a0, $0000(a0)
        800BF7AC	lui    a1, $1f80
        800BF7B0	lhu    a1, $0004(a1)
        800BF7B4	lui    a2, $1f80
        800BF7B8	lhu    a2, $0008(a2)
        800BF7BC	lui    a3, $1f80
        800BF7C0	lhu    a3, $000c(a3)
        800BF7C4	addu   s0, v1, v0
        800BF7C8	sh     a0, $0006(s0)
        800BF7CC	sh     a1, $0008(s0)
        800BF7D0	sh     a2, $000a(s0)
        800BF7D4	sh     a3, $0004(s0)

        Lbf7d8:	; 800BF7D8
        [S0 + c] = h(hu[801518a4 + S2]);
        [S0 + e] = h(hu[801518a6 + S2]);
        [S0 + 10] = h(hu[801518a8 + S2]);
        [S0 + 12] = h(camera_struct_id);
        800BF820	j      Lbfa5c [$800bfa5c]

        800BF828	lui    at, $8015
        800BF82C	addiu  at, at, $18ac
        800BF830	addu   at, at, s2
        800BF834	lhu    v1, $0000(at)
        800BF838	nop
        800BF83C	addiu  v0, v1, $0001
        800BF840	lui    at, $8015
        800BF844	addiu  at, at, $18ac
        800BF848	addu   at, at, s2
        800BF84C	sh     v0, $0000(at)
        800BF850	lw     a0, $0004(s1)
        800BF854	ori    v0, zero, $0001
        800BF858	lui    at, $800f
        800BF85C	sb     v0, $4b00(at)
        800BF860	addu   v1, v1, a0
        800BF864	lbu    v0, $0000(v1)
        800BF868	lui    v1, $1f80
        800BF86C	lui    at, $8015
        800BF870	addiu  at, at, $17f0
        800BF874	addu   at, at, v0
        800BF878	lbu    a1, $0000(at)
        800BF87C	ori    v1, v1, $001c
        800BF880	sw     a1, $0000(v1)
        800BF884	lui    at, $8015
        800BF888	addiu  at, at, $18ac
        800BF88C	addu   at, at, s2
        800BF890	lhu    a3, $0000(at)
        800BF894	nop
        800BF898	addiu  v0, a3, $0001
        800BF89C	lui    at, $8015
        800BF8A0	addiu  at, at, $18ac
        800BF8A4	addu   at, at, s2
        800BF8A8	sh     v0, $0000(at)
        800BF8AC	lh     a0, $0000(v1)
        800BF8B0	sll    v1, a1, $01
        800BF8B4	addu   v1, v1, a1
        800BF8B8	sll    v0, v1, $05
        800BF8BC	subu   v0, v0, v1
        800BF8C0	sll    v0, v0, $03
        800BF8C4	subu   v0, v0, a1
        800BF8C8	j      Lbf9fc [$800bf9fc]
        800BF8CC	sll    v0, v0, $02

        case e5: // d
        {
            target_id = bu[80161eec];

            A3 = hu[801518a4 + camera_struct_id * e + 8];
            [801518a4 + camera_struct_id * e + 8] = h(A3 + 1);

            V1 = w[1f800024];
            [1f800014] = w(bu[8015190f + target_id * b9c + bu[V1 + A3]]);

            A0 = target_id;
            A1 = camera_struct_id;
            A2 = w[1f800024];
            funcbe86c;

            800BFA34	j      Lbfa5c [$800bfa5c]
        }
        break;



        case e4: // c
        {
            attacker_id = bu[801590cc];

            A3 = hu[801518a4 + camera_struct_id * e + 8];
            [801518a4 + camera_struct_id * e + 8] = h(A3 + 1);

            V1 = w[1f800024];
            [1f800014] = w(bu[8015190f + attacker_id * b9c + bu[V1 + A3]]);

            A0 = attacker_id;
            A1 = camera_struct_id;
            A2 = w[1f800024];
            funcbe86c;

            800BFA34	j      Lbfa5c [$800bfa5c]
        }
        break;



        800BF978	lui    at, $8015
        800BF97C	addiu  at, at, $18ac
        800BF980	addu   at, at, s2
        800BF984	lhu    v1, $0000(at)
        800BF988	nop
        800BF98C	addiu  v0, v1, $0001
        800BF990	lui    at, $8015
        800BF994	addiu  at, at, $18ac
        800BF998	addu   at, at, s2
        800BF99C	sh     v0, $0000(at)
        800BF9A0	lw     v0, $0004(s1)
        800BF9A4	lui    a0, $1f80
        800BF9A8	addu   v1, v1, v0
        800BF9AC	lbu    a1, $0000(v1)
        800BF9B0	ori    a0, a0, $0010
        800BF9B4	sll    v1, a1, $01
        800BF9B8	sw     a1, $0000(a0)
        800BF9BC	lui    at, $8015
        800BF9C0	addiu  at, at, $18ac
        800BF9C4	addu   at, at, s2
        800BF9C8	lhu    a3, $0000(at)
        800BF9CC	addu   v1, v1, a1
        800BF9D0	addiu  v0, a3, $0001
        800BF9D4	lui    at, $8015
        800BF9D8	addiu  at, at, $18ac
        800BF9DC	addu   at, at, s2
        800BF9E0	sh     v0, $0000(at)
        800BF9E4	sll    v0, v1, $05
        800BF9E8	subu   v0, v0, v1
        800BF9EC	sll    v0, v0, $03
        800BF9F0	subu   v0, v0, a1
        800BF9F4	sll    v0, v0, $02
        800BF9F8	lh     a0, $0000(a0)

        Lbf9fc:	; 800BF9FC
        V1 = w[1f800024];
        A3 = A3 + V1;
        A1 = bu[A3];
        [1f800014] = w(bu[8015190f + V0 + A1]);

        A1 = camera_struct_id;
        A2 = w[1f800024];
        800BFA2C	jal    funcbe86c [$800be86c]

        800BFA34	j      Lbfa5c [$800bfa5c]
        800BFA38	nop

        case ff: // 27
        {
            [801518a4 + camera_struct_id * e + 8] = h(hu[801518a4 + camera_struct_id * e + 8] - 1);
        }
    }

    800BFA58	sb     zero, $0000(s1)

    Lbfa5c:	; 800BFA5C
    V0 = bu[1f800020];
800BFA64	bne    v0, zero, Lbebb0 [$800bebb0]


Lbfa6c:	; 800BFA6C
////////////////////////////////