////////////////////////////////
// funcbb684
V1 = bu[801590e0];
V1 = h[80163798 + V1 * c + 8]; // camera movement id
if (V1 != -4)
{
    [800f8370] = h(V1);
    [801590dc] = b(0);

    [80151844 + 0 * e + 8] = b(ff);
    [80151844 + 1 * e + 8] = b(ff);
    [80151844 + 2 * e + 8] = b(ff);
    [80151844 + 3 * e + 8] = b(ff);

    [801518a4 + 0 * e + 8] = b(ff);
    [801518a4 + 1 * e + 8] = b(ff);
    [801518a4 + 2 * e + 8] = b(ff);
    [801518a4 + 3 * e + 8] = b(ff);

    funcbc2f0;

    if (bu[800f837c] != 3)
    {
        V0 = bu[801516f4];
        if ((V0 & 3) != 3)
        {
            [800f837c] = b(V0 & 3);
        }
    }
}
////////////////////////////////



////////////////////////////////
// funcbc2f0
[800fa9bc] = h(0);

A1 = 0;
loopbc308:	; 800BC308
    [800fa978 + A1 * 4] = w(0); // null pointer to some function
    [800f7ed8 + A1 * 28] = h(0);
    [800f7eda + A1 * 28] = h(0);

    A1 = A1 + 1;
    V0 = A1 < 10;
800BC338	bne    v0, zero, loopbc308 [$800bc308]
////////////////////////////////



////////////////////////////////
// funcbc8b0
// A0 - camera id to use
if (hu[8016360c + 8] == 4e) // Final Battle - Sephiroth
{
    // set camera to auto, this is final battle anyway. Player will not see its configs.
    [8009d7be] = h(hu[8009d7be] & ffcf);
}



if ((bu[800f7ed4] == 64) && ((hu[8009d7be] & 300) == 100)) // fixed camera
{
    copy_camera_start_end_from_battle_setup;
    return;
}

if (h[800f3896] == 0 && bu[800fafdc] == 0)
{
    funcbc72c; // copy camera start end as transition from current to battle setup
    return;
}

if (A0 == -2) // if init
{
    [801031e0] = b(1);

    A0 = bu[800f837c];
    funcbca58; // copy info to start and end camera vector
    return;
}

if (A0 == -1)// if default
{
    if ((hu[8009d7be] & 300) == 100) // fixed camera
    {
        copy_camera_start_end_from_battle_setup;
    }
    else
    {
        funcbc72c; // copy camera start end as transition from current to battle setup
    }

    return;
}

if ((hu[8009d7be] & 300) == 100) // fixed camera
{
    if (A0 != 3b && A0 != 3c && A0 != 45 && A0 != 59 && A0 != 6d && A0 != 77 && A0 != cb)
    {
        copy_camera_start_end_from_battle_setup;
    }
    else if (bu[800f7de4] == 1)
    {
        funcbc72c; // copy camera start end as transition from current to battle setup
    }
    else
    {
        [801031e0] = b(1);

        A0 = bu[800f837c];
        funcbca58; // copy info to start and end camera vector
    }
    return;
}

if (bu[800f7de4] == 1 && hu[8016360c + 8] != 4e) // Final Battle - Sephiroth
{
    funcbc72c; // copy camera start end as transition from current to battle setup
    return;
}

[801031e0] = b(1);

A0 = bu[800f837c];
funcbca58; // copy info to start and end camera vector
////////////////////////////////



////////////////////////////////
// funcbc72c
// copy camera start end as transition from current to battle setup
funcc1104; // set transition from current camera to one from battle set up

A0 = 3;
funcbca58; // copy info to start and end camera vector
////////////////////////////////



////////////////////////////////
// copy_camera_start_end_from_battle_setup
V1 = bu[80163b3c];
800b4044
[80158d00] = h(hu[8016360c + 8 + 14 + V1 * c + 0]);
[80158d02] = h(hu[8016360c + 8 + 14 + V1 * c + 2]);
[80158d04] = h(hu[8016360c + 8 + 14 + V1 * c + 4]);

[801031e8] = h(hu[8016360c + 8 + 14 + V1 * c + 6]);
[801031ea] = h(hu[8016360c + 8 + 14 + V1 * c + 8]);
[801031ec] = h(hu[8016360c + 8 + 14 + V1 * c + a]);
////////////////////////////////



////////////////////////////////
// funcbca58
// copy start and end vectors to start and end camera vector
[80158d00] = h(hu[80151844 + A0 * e]);
[80158d02] = h(hu[80151846 + A0 * e]);
[80158d04] = h(hu[80151848 + A0 * e]);

[801031e8] = h(hu[801518a4 + A0 * e]);
[801031ea] = h(hu[801518a6 + A0 * e]);
[801031ec] = h(hu[801518a8 + A0 * e]);
////////////////////////////////



////////////////////////////////
// funcc1104
// set transition from current camera to one from battle set up
end_x = h[80158d00];
end_y = h[80158d02];
end_z = h[80158d04];
start_x = hu[801031e8];
start_y = hu[801031ea];
start_z = hu[801031ec];

[80151844 + 3 * e] = h(end_x);
[80151846 + 3 * e] = h(end_y);
[80151848 + 3 * e] = h(end_z);

[801518a4 + 3 * e] = h(start_x);
[801518a6 + 3 * e] = h(start_y);
[801518a8 + 3 * e] = h(start_z);

if (bu[801031e0] != 0)
{
    V0 = bu[80163b3c];
    set_end_x = h[8016360c + 8 + 14 + V0 * c + 0];
    set_end_y = h[8016360c + 8 + 14 + V0 * c + 2];
    set_end_z = h[8016360c + 8 + 14 + V0 * c + 4];
    set_start_x = h[8016360c + 8 + 14 + V0 * c + 6];
    set_start_y = h[8016360c + 8 + 14 + V0 * c + 8];
    set_start_z = h[8016360c + 8 + 14 + V0 * c + a];

    [80151844 + 3 * e] = h((set_end_x + end_x) / 2);
    [80151846 + 3 * e] = h((set_end_y + end_y) / 2);
    [80151848 + 3 * e] = h((set_end_z + end_z) / 2);

    [801518a4 + 3 * e] = h((set_start_x + start_x) / 2);
    [801518a6 + 3 * e] = h((set_start_y + start_y) / 2);
    [801518a8 + 3 * e] = h((set_start_z + start_z) / 2);

    if (set_end_x == end_x &&
        set_end_y == end_y &&
        set_end_z == end_z &&
        set_start_x == start_x &&
        set_start_y == start_y &&
        set_start_z == start_z)
    {
        [801031e0] = b(0);
    }
}
////////////////////////////////



////////////////////////////////
// funcbb75c
// create primary and final camera matrix
//A0 = 800fa63c; // store final camera matrix (primary + scale + ??? + ???)
//A1 = 800fa958; // store primary camera matrix here
//A2 = 80158d00; // end vector
//A3 = 801031e8; // start vector
S0 = A0; // we store here final transformation matrix
S1 = A1;

A0 = S1; // result matrix here
A1 = A2; // end vector
A2 = A3; // start vector
A3 = 800e7d10; // up vector
funcd85b0; // create camera matrix here




// init it with rotation matrix
A0 = S0 + 20;
A1 = S0;
system_create_rotation_matrix_from_euler_angle; // set temp rotation matrix from XYZ rotation

// add translation vector
A0 = S0;
A1 = S0 + 28; // translation vector
system_copy_vector_to_matrix_translation;

// multiply field matrix
A0 = S1;
A1 = S0;
system_matrixes_multiply;

// multiply field translation vector
A0 = S1;
system_set_rotation_matrix_to_GTE;
A0 = S1;
system_set_translation_vector_to_GTE;
A0 = S0 - 28; // vector to transform
A1 = S0 + 14; // result
A2 = SP + 10; // flag
system_call_rtv0tr_from_GTE;

A0 = S0; // matrix to scale
A1 = 800e7d20; // scale vector
funcbaff8; // scale matrix and set it to gte
////////////////////////////////



////////////////////////////////
// funcd85b0
// create camera matrix
result = A0;
// A1
// 800bca84 : SH      00002930 (v1), 8d00 (80160000 (at)) [80158d00]
// 800bcaa0 : SH      0000f278 (v1), 8d02 (80160000 (at)) [80158d02]
// 800bcabc : SH      0000057d (v1), 8d04 (80160000 (at)) [80158d04]
S4 = A1; // end vector
// A2
// 800bcad8 : SH      000004b7 (v1), 31e8 (80100000 (at)) [801031e8]
// 800bcaf4 : SH      0000ff45 (v1), 31ea (80100000 (at)) [801031ea]
// 800bcb10 : SH      0000fd05 (v0), 31ec (80100000 (at)) [801031ec]
A2 = A2; // start vector
S0 = A3; // some static vector (0, -1, 0)



[SP + 10] = w(h[A2 + 0] - h[S4 + 0]);
[SP + 14] = w(h[A2 + 2] - h[S4 + 2]);
[SP + 18] = w(h[A2 + 4] - h[S4 + 4]);
A0 = SP + 10;
A1 = SP + 40;
system_normalize_vector_A0_to_A1;

if (w[SP + 48] == w[S0 + 8])
{
    [SP + 48] = w(w[SP + 48] + 1);
}

// vector 1
R11R12 = w[SP + 40];
R22R23 = w[SP + 44];
R33 = w[SP + 48];
// vector 2
IR1 = w[S0 + 0];
IR2 = w[S0 + 4];
IR3 = w[S0 + 8];
gte_op12; // outer product
[SP + 10] = w(MAC1);
[SP + 14] = w(MAC2);
[SP + 18] = w(MAC3);
A0 = SP + 10;
A1 = SP + 20;
system_normalize_vector_A0_to_A1;



// vector 1
R11R12 = w[SP + 40];
R22R23 = w[SP + 44];
R33 = w[SP + 48];
// vector 2
IR1 = w[SP + 20];
IR2 = w[SP + 24];
IR3 = w[SP + 28];
gte_op12; // outer product
[SP + 10] = w(MAC1);
[SP + 14] = w(MAC2);
[SP + 18] = w(MAC3);
A0 = SP + 10;
A1 = SP + 30;
system_normalize_vector_A0_to_A1;



[result + 0] = h(w[SP + 20]);
[result + 2] = h(w[SP + 24]);
[result + 4] = h(w[SP + 28]);
[result + 6] = h(w[SP + 30]);
[result + 8] = h(w[SP + 34]);
[result + a] = h(w[SP + 38]);
[result + c] = h(w[SP + 40]);
[result + e] = h(w[SP + 44]);
[result + 10] = h(w[SP + 48]);

R11R12 = w[result + 0];
R13R21 = w[result + 4];
R22R23 = w[result + 8];
R31R32 = w[result + c];
R33 = w[result + 10];

VXY0 = w[S4 + 0];
VZ0 = w[S4 + 4];

gte_rtv0;

[result + 14] = w(-MAC1);
[result + 18] = w(-MAC2);
[result + 1c] = w(-MAC3);
////////////////////////////////



////////////////////////////////
// funcbaff8
 // scale matrix and set it to gte
S0 = A0;

A0 = A0;
A1 = A1;
system_scale_matrix_by_vector;

A0 = S0;
system_set_rotation_matrix_to_GTE;
A0 = S0;
system_set_translation_vector_to_GTE;
////////////////////////////////