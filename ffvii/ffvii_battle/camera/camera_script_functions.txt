////////////////////////////////
// funcbe69c
attacker_id = A0;
camera_struct_id = A1;
script = A2;
FP = A3;

A0 = script;
A1 = camera_struct_id;
funcbfa98;
[1f800000] = w(V0);

A0 = script;
A1 = camera_struct_id;
funcbfa98;
[1f800004] = w(V0);

A0 = script;
A1 = camera_struct_id;
funcbfa98;
[1f800008] = w(V0);

[80151844 + camera_struct_id * e + 8] = h(hu[80151844 + camera_struct_id * e + 8] + 1);
[1f80000c] = w(bu[script + hu[80151844 + camera_struct_id * e + 8]]);

A0 = attacker_id;
A1 = h[1f800014];
A2 = camera_struct_id;
A3 = FP;
funcc018c;

A0 = 800c0410;
funcbc11c;

V1 = 800f7ed8 + V0 * 28;
[V1 + 4] = h(hu[1f80000c]);
[V1 + 6] = h(hu[1f800000]);
[V1 + 8] = h(hu[1f800004]);
[V1 + a] = h(hu[1f800008]);
[V1 + c] = h(hu[80151844 + camera_struct_id * e + 0]);
[V1 + e] = h(hu[80151844 + camera_struct_id * e + 2]);
[V1 + 10] = h(hu[80151844 + camera_struct_id * e + 4]);
[V1 + 12] = h(camera_struct_id);
////////////////////////////////



////////////////////////////////
// funcc018c
attacker_id = A0;
camera_struct_id = A2;
S2 = A3;
if (attacker_id == f)
{
    A0 = h[80151774];
    A1 = SP + 10;
    battle_calculate_middle_point_from_target_mask_units_position;
}
else
{
    A0 = attacker_id;
    A2 = SP + 10;
    battle_get_point_by_model_bone; // get joint position

    A0 = attacker_id;
    A1 = camera_struct_id;
    A2 = S2;
    funcc0dd8;
}

[1f800000] = w(w[1f800000] + h[SP + 10]);
[1f800004] = w(w[1f800004] + h[SP + 12]);
[1f800008] = w(w[1f800008] + h[SP + 14]);
////////////////////////////////



////////////////////////////////
// funcc0dd8
800C0DD8	addiu  sp, sp, $ffd8 (=-$28)
800C0DDC	sll    a3, a0, $10
800C0DE0	sra    a3, a3, $10
800C0DE4	sll    v0, a3, $03
800C0DE8	subu   v0, v0, a3
800C0DEC	sll    v0, v0, $02
800C0DF0	addu   v0, v0, a3
800C0DF4	sll    v0, v0, $02
800C0DF8	sw     s2, $0018(sp)
800C0DFC	addu   s2, a0, zero
800C0E00	addu   t1, a1, zero
800C0E04	sll    v1, a3, $01
800C0E08	addu   v1, v1, a3
800C0E0C	sw     ra, $0024(sp)
800C0E10	sw     s4, $0020(sp)
800C0E14	sw     s3, $001c(sp)
800C0E18	sw     s1, $0014(sp)
800C0E1C	sw     s0, $0010(sp)
800C0E20	lui    at, $8015
800C0E24	addiu  at, at, $1204
800C0E28	addu   at, at, v0
800C0E2C	lhu    t0, $0000(at)
800C0E30	sll    v0, v1, $05
800C0E34	subu   v0, v0, v1
800C0E38	sll    v0, v0, $03
800C0E3C	subu   v0, v0, a3
800C0E40	sll    v0, v0, $02
800C0E44	lui    at, $8015
800C0E48	addiu  at, at, $18ea
800C0E4C	addu   at, at, v0
800C0E50	lh     v0, $0000(at)
800C0E54	nop
800C0E58	slti   v0, v0, $1000
800C0E5C	beq    v0, zero, Lc0e78 [$800c0e78]
800C0E60	addu   s4, a2, zero
800C0E64	srl    t0, t0, $01
800C0E68	slti   v0, t0, $0100
800C0E6C	beq    v0, zero, Lc0e7c [$800c0e7c]
800C0E70	lui    v1, $1f80
800C0E74	ori    t0, zero, $0100

Lc0e78:	; 800C0E78
800C0E78	lui    v1, $1f80

Lc0e7c:	; 800C0E7C
800C0E7C	lw     v0, $0000(v1)
800C0E80	nop
800C0E84	mult   t0, v0
800C0E88	sll    a1, s2, $10
800C0E8C	sra    a1, a1, $10
800C0E90	sll    a0, a1, $03
800C0E94	subu   a0, a0, a1
800C0E98	sll    a0, a0, $02
800C0E9C	addu   a0, a0, a1
800C0EA0	sll    a0, a0, $02
800C0EA4	mflo   v0
800C0EA8	sra    v0, v0, $08
800C0EAC	sw     v0, $0000(v1)
800C0EB0	sll    v1, a1, $01
800C0EB4	addu   v1, v1, a1
800C0EB8	sll    v0, v1, $05
800C0EBC	subu   v0, v0, v1
800C0EC0	sll    v0, v0, $03
800C0EC4	subu   v0, v0, a1
800C0EC8	sll    v0, v0, $02
800C0ECC	lui    at, $8015
800C0ED0	addiu  at, at, $18ea
800C0ED4	addu   at, at, v0
800C0ED8	lh     v0, $0000(at)
800C0EDC	lui    at, $8015
800C0EE0	addiu  at, at, $1206
800C0EE4	addu   at, at, a0
800C0EE8	lhu    t0, $0000(at)
800C0EEC	slti   v0, v0, $1000
800C0EF0	beq    v0, zero, Lc0f0c [$800c0f0c]
800C0EF4	lui    v1, $1f80
800C0EF8	srl    t0, t0, $01
800C0EFC	slti   v0, t0, $0100
800C0F00	beq    v0, zero, Lc0f0c [$800c0f0c]
800C0F04	nop
800C0F08	ori    t0, zero, $0100

Lc0f0c:	; 800C0F0C
800C0F0C	ori    v1, v1, $0004
800C0F10	lw     v0, $0000(v1)
800C0F14	nop
800C0F18	mult   t0, v0
800C0F1C	sll    a1, s2, $10
800C0F20	sra    a1, a1, $10
800C0F24	sll    a0, a1, $03
800C0F28	subu   a0, a0, a1
800C0F2C	sll    a0, a0, $02
800C0F30	addu   a0, a0, a1
800C0F34	sll    a0, a0, $02
800C0F38	mflo   v0
800C0F3C	sra    v0, v0, $08
800C0F40	sw     v0, $0000(v1)
800C0F44	sll    v1, a1, $01
800C0F48	addu   v1, v1, a1
800C0F4C	sll    v0, v1, $05
800C0F50	subu   v0, v0, v1
800C0F54	sll    v0, v0, $03
800C0F58	subu   v0, v0, a1
800C0F5C	sll    v0, v0, $02
800C0F60	lui    at, $8015
800C0F64	addiu  at, at, $18ea
800C0F68	addu   at, at, v0
800C0F6C	lh     v0, $0000(at)
800C0F70	lui    at, $8015
800C0F74	addiu  at, at, $1208
800C0F78	addu   at, at, a0
800C0F7C	lhu    t0, $0000(at)
800C0F80	slti   v0, v0, $1000
800C0F84	beq    v0, zero, Lc0fa0 [$800c0fa0]
800C0F88	lui    s0, $1f80
800C0F8C	srl    t0, t0, $01
800C0F90	slti   v0, t0, $0100
800C0F94	beq    v0, zero, Lc0fa0 [$800c0fa0]
800C0F98	nop
800C0F9C	ori    t0, zero, $0100

Lc0fa0:	; 800C0FA0
800C0FA0	ori    s0, s0, $0008
800C0FA4	lw     v0, $0000(s0)
800C0FA8	nop
800C0FAC	mult   t0, v0
800C0FB0	andi   v1, t1, $00ff
800C0FB4	mflo   v0
800C0FB8	sra    a0, v0, $08
800C0FBC	sll    v0, v1, $03
800C0FC0	subu   v0, v0, v1
800C0FC4	sll    v0, v0, $01
800C0FC8	sw     a0, $0000(s0)
800C0FCC	lui    at, $8015
800C0FD0	addiu  at, at, $1850
800C0FD4	addu   at, at, v0
800C0FD8	lbu    v0, $0000(at)
800C0FDC	nop
800C0FE0	beq    v0, zero, Lc10e0 [$800c10e0]
800C0FE4	lui    s1, $1f80
800C0FE8	lw     v0, $0000(s1)
800C0FEC	nop
800C0FF0	mult   v0, v0
800C0FF4	mflo   v0
800C0FF8	mult   a0, a0

Lc0ffc:	; 800C0FFC
800C0FFC	mflo   a0
800C1000	jal    func39f5c [$80039f5c]
800C1004	addu   a0, v0, a0
800C1008	addu   s3, v0, zero
800C100C	andi   v0, s4, $00ff
800C1010	beq    v0, zero, Lc105c [$800c105c]
800C1014	nop
800C1018	lw     a0, $0000(s1)
800C101C	lw     a1, $0000(s0)
800C1020	jal    func3cc1c [$8003cc1c]
800C1024	nop
800C1028	sll    v1, s2, $10
800C102C	sra    v1, v1, $10
800C1030	sll    a0, v1, $03
800C1034	subu   a0, a0, v1
800C1038	sll    a0, a0, $02
800C103C	addu   a0, a0, v1
800C1040	sll    a0, a0, $02
800C1044	lui    at, $8015
800C1048	addiu  at, at, $122c
800C104C	addu   at, at, a0
800C1050	lh     v1, $0000(at)
800C1054	j      Lc10a8 [$800c10a8]
800C1058	addu   s0, v0, v1

Lc105c:	; 800C105C
800C105C	lw     a0, $0000(s1)
800C1060	lw     a1, $0000(s0)
800C1064	jal    func3cc1c [$8003cc1c]
800C1068	nop
800C106C	sll    a1, s2, $10
800C1070	sra    a1, a1, $10
800C1074	sll    a0, a1, $01
800C1078	addu   a0, a0, a1
800C107C	sll    v1, a0, $05
800C1080	subu   v1, v1, a0
800C1084	sll    v1, v1, $03
800C1088	subu   v1, v1, a1
800C108C	sll    v1, v1, $02
800C1090	lui    at, $8015
800C1094	addiu  at, at, $1a46
800C1098	addu   at, at, v1
800C109C	lh     v1, $0000(at)
800C10A0	nop
800C10A4	addu   s0, v0, v1

Lc10a8:	; 800C10A8
800C10A8	jal    system_get_sin [$80039a74]
800C10AC	addu   a0, s0, zero
800C10B0	mult   v0, s3
800C10B4	mflo   v0
800C10B8	sra    v0, v0, $0c
800C10BC	lui    at, $1f80
800C10C0	sw     v0, $0000(at)
800C10C4	jal    system_get_cos [$80039b40]
800C10C8	addu   a0, s0, zero
800C10CC	mult   v0, s3
800C10D0	mflo   v0
800C10D4	sra    v0, v0, $0c
800C10D8	lui    at, $1f80
800C10DC	sw     v0, $0008(at)

Lc10e0:	; 800C10E0
800C10E0	lw     ra, $0024(sp)
800C10E4	lw     s4, $0020(sp)
800C10E8	lw     s3, $001c(sp)
800C10EC	lw     s2, $0018(sp)
800C10F0	lw     s1, $0014(sp)
800C10F4	lw     s0, $0010(sp)
800C10F8	addiu  sp, sp, $0028
800C10FC	jr     ra 
800C1100	nop
////////////////////////////////



////////////////////////////////
// funcbe86c
attacker_id = A0;
camera_struct_id = A1;
script = A2;

A0 = script;
A1 = camera_struct_id;
funcbfb10;
[1f800000] = w(V0);

A0 = script;
A1 = camera_struct_id;
funcbfb10;
[1f800004] = w(V0);

A0 = script;
A1 = camera_struct_id;
funcbfb10;
[1f800008] = w(V0);

A0 = hu[801518a4 + camera_struct_id * e + 8];
[801518a4 + camera_struct_id * e + 8] = h(A0 + 1);
[1f80000c] = w(bu[A0 + script]);

A0 = attacker_id;
A1 = w[1f800014];
funcc0254;

A0 = 800c0900;
funcbc11c;

[800f7ed8 + V0 * 28 + 4] = h(hu[1f80000c]);
[800f7ed8 + V0 * 28 + 6] = h(hu[1f800000]); // final X
if (bu[800f4b00] != 0)
{
    [800f7ed8 + V0 * 28 + 8] = h(0);
}
else
{
    [800f7ed8 + V0 * 28 + 8] = h(hu[1f800004]); // final Y
}
[800f7ed8 + V0 * 28 + a] = h(hu[1f800008]); // final Z
[800f7ed8 + V0 * 28 + c] = h(hu[801518a4 + camera_struct_id * e + 0]); // start direction X
[800f7ed8 + V0 * 28 + e] = h(hu[801518a4 + camera_struct_id * e + 2]); // start direction Y
[800f7ed8 + V0 * 28 + 10] = h(hu[801518a4 + camera_struct_id * e + 4]); // start direction Z
[800f7ed8 + V0 * 28 + 12] = h(camera_struct_id);
////////////////////////////////



////////////////////////////////
// funcc0254
attacker_id = A0;

if (attacker_id == f)
{
    A0 = h[80151774];
    A1 = SP + 10;
    battle_calculate_middle_point_from_target_mask_units_position;
}
else
{
    A2 = SP + 10;
    battle_get_point_by_model_bone; // get joint position

    A0 = w[1f800004];
    A1 = attacker_id;
    funcc0314;
    [1f800004] = w(V0);
}

[1f800000] = w(w[1f800000] + h[SP + 10]);
[1f800004] = w(w[1f800004] + h[SP + 12]);
[1f800008] = w(w[1f800008] + h[SP + 14]);
////////////////////////////////



////////////////////////////////
// funcbfb10
script = A0;
camera_struct_id = A1;
V1 = hu[801518a4 + camera_struct_id * e + 8];
[801518a4 + camera_struct_id * e + 8] = h(V1 + 2);

return h[script + V1];
////////////////////////////////



////////////////////////////////
// funcbc11c
A3 = 0;
loopbc13c:	; 800BC13C
    if (w[800fa978 + A3 * 4] == 0)
    {
        [800fa978 + A3 * 4] = w(A0);

        [800f7ed8 + A3 * 28 + 0] = h(hu[800f8360]);

        [800fa9bc] = h(hu[800fa9bc] + 1);
        return A3;
    }

    A3 = A3 + 1;
    V0 = A3 < 10;
800BC1A4	bne    v0, zero, loopbc13c [$800bc13c]

// generate error
800BC1AC	jal    func3cebc [$8003cebc]

A0 = 1;
800BC1B4	jal    system_psyq_reset_graph [$80043938]

800BC1BC	jal    func3d1b4 [$8003d1b4]

A0 = 61;
A1 = 3;
800BC1C8	jal    func429e0 [$800429e0]
////////////////////////////////