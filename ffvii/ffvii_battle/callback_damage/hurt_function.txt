////////////////////////////////
// 800ce970
T0 = h[8015169c];
V0 = h[80162978 + T0 * 20 + 4];
if (V0 == 0)
{
    if (hu[80162978 + T0 * 20 + e] & 2) // if critical damage
    {
        // add fade like flash
        A0 = fa;
        A1 = fa;
        A2 = fa;
        funcc4fc8;

        [80163c74] = w(V0);
    }

    if (h[80162978 + T0 * 20 + 6] != -1 && bu[80162978 + T0 * 20 + 18] != 1) // if there is damage and sete to display damage
    {
        // add barriers effect
        funcce75c;

        // add damage to display
        A0 = 800c2928;
        funcbc04c;
        [801621f0 + V0 * 20 + 0e] = h(h[80162978 + T0 * 20 + a]); // damage.
        [801621f0 + V0 * 20 + 10] = w(h[80162978 + T0 * 20 + 8]); // target id
        [801621f0 + V0 * 20 + 14] = w(h[80162978 + T0 * 20 + e]); // 1f800220 damage flags (heal damage to mp critical).

        A0 = 800ce638;
        funcbc04c;
        [801621f0 + V0 * 20 + a] = h(bu[80162978 + T1 * 20 + 19]);
        [801621f0 + V0 * 20 + 8] = h(hu[80162978 + T1 * 20 + 6]);
    }

    funcceb48;
}
else
{
    [80162978 + V1 + 4] = h(V0 - 1);
}
////////////////////////////////



////////////////////////////////
// 800d5350
V0 = h[8015169c];
S0 = 80162978 + V0 * 20;

A0 = bu[80062d98];
if (A0 == 0)
{
    V0 = h[S0 + 2];
    if (V0 == 0)
    {
        loopd5390:	; 800D5390
            V0 = h[S0 + 0];
            while (((h[S0 + 4] >> V0) & 1) == 0)
            {
                V0 = V0 + 1;
            }
            [S0 + 0] = h(V0);

            V0 = w[S0 + c];
            A0 = h[S0 + 0]; // target id
            A1 = h[S0 + 6]; // attacker id
            800D53C4	jalr   v0 ra

            [S0 + 0] = h(hu[S0 + 0] + 1);
            if (h[S0 + 4] < (1 << hu[S0 + 0]))
            {
                [S0 + 0] = h(-1);
                return;
            }

            V0 = h[S0 + 8];
        800D5400	beq    v0, zero, loopd5390 [$800d5390]
    }

    V0 = h[S0 + 2] + 1;
    [S0 + 2] = h(V0);

    if (V0 >= h[S0 + 8])
    {
        [S0 + 2] = h(0);
    }
}
////////////////////////////////



////////////////////////////////
// 800d57c0
S0 = h[8015169c];
A0 = bu[80062d98];
if (A0 == 0)
{
    V1 = h[80162978 + S0 * 20 + 2];
    A0 = h[80162978 + S0 * 20 + 4];
    if (V1 >= A0)
    {
        V1 = V1 - A0
        V0 = h[80162978 + S0 * 20 + 6];
        V0 = V1 % V0;
        if (V0 == 0)
        {
            V1 = h[80162978 + S0 * 20 + 0];
            A0 = h[80162978 + S0 * 20 + 8];
            loopd5858:	; 800D5858
                [80162978 + S0 * 20 + 0] = h(V1);
                V0 = A0 >> V1;
                V0 = V0 & 1;
                V1 = V1 + 1;
            800D5868	beq    v0, zero, loopd5858 [$800d5858]

            A1 = w[800f10d8];
            [800f10d8] = w((A1 + 1) & f);

            [800f4cec + A1 * 4] = w(4);
            [800f4d2c + A1 * 14] = h(hu[80162978 + S0 * 20 + 0]);

            // remove bit from target mask.
            V1 = h[80162978 + S0 * 20 + 0];
            V0 = 1 << V1;
            V1 = hu[80162978 + S0 * 20 + 8];
            V0 = 0 NOR V0;
            V1 = V1 & V0;
            [80162978 + S0 * 20 + 8] = h(V1);

            if (V1 == 0)
            {
                [80162978 + S0 * 20 + 0] = h(-1);
            }
        }
    }

    [80162978 + S0 * 20 + 2] = h(hu[80162978 + S0 * 20 + 2] + 1);
}
////////////////////////////////
