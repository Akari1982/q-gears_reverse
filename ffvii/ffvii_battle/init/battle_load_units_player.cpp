////////////////////////////////
// funca3278
[800f3944] = w(0);
[800f3948] = w(0);
[80163798] = b(ff);
////////////////////////////////



////////////////////////////////
// funca283c
V1 = 0;
A1 = 0;
A0 = 0;

loopa2850:	; 800A2850
    if (V1 == A1)
    {
        [800f38ac + A0] = w(V1);
        A0 = A0 + 4;
    }

    V0 = bu[800a0098 + V1];
    if (V0 == 1f)
    {
        A1 = V1 + 1;
    }

    V1 = V1 + 1;
    V0 = V1 < 6d;
800A2884	bne    v0, zero, loopa2850 [$800a2850]
////////////////////////////////



////////////////////////////////
// funcad480
A1 = 0;
V1 = 0;
A2 = 0;
A0 = 0;

loopad498:	; 800AD498
    if (A1 < 10)
    {
        if (V1 == A2)
        {
            [800f495c + A0] = w(V1);
            A0 = A0 + 4;
            A1 = A1 + 1;
        }

        V0 = bu[800e7bcc + V1];
        if (V0 == 8)
        {
            A2 = V1 + 1;
        }
    }

    V1 = V1 + 1;
    V0 = V1 < 1e;
800AD4DC	bne    v0, zero, loopad498 [$800ad498]
////////////////////////////////



////////////////////////////////
// funca71f4
A0 = 0;
A3 = ff;
A2 = 800f4914;
A1 = 800f4908;

loopa720c:	; 800A720C
    V1 = 7f;
    V0 = A0 << 9;
    V0 = V0 + 1fc;

    loopa7218:	; 800A7218
        [800f4308 + V0] = b(A3);

        V0 = V0 - 4;
        V1 = V1 - 1;
    800A7228	bgez   v1, loopa7218 [$800a7218]

    [A1] = w(0);
    [A2] = w(0);

    A2 = A2 + 4;
    A0 = A0 + 1;
    A1 = A1 + 4;
    V0 = A0 < 3;
800A7244	bne    v0, zero, loopa720c [$800a720c]
////////////////////////////////



////////////////////////////////
// funca55bc
V1 = 0;
loopa55c4:	; 800A55C4
    [800f3a40 + V1] = h(ffff);
    [800f3a42 + V1] = h(ffff);

    V1 = V1 + 4;
    V0 = V1 < 40;
800A55E4	bne    v0, zero, loopa55c4 [$800a55c4]
////////////////////////////////



////////////////////////////////
// system_get_limit_id
if (A0 < 9)
{
    V1 = bu[80082268 + A0 * 38 + 0c + A1] - 80;
}
else
{
    V1 = 7f;
}

return V1;
////////////////////////////////



////////////////////////////////
// funca4ba4
party_id = A0;

// copy usual attack command
[800f39f0 + party_id * 6 + 0] = w(w[8009d84c + party_id * 440 + 4c + 0]);
[800f39f0 + party_id * 6 + 4] = b(b[8009d84c + party_id * 440 + 4c + 4]);
[800f39f0 + party_id * 6 + 5] = b(b[8009d84c + party_id * 440 + 4c + 5]);

[800f3a04 + party_id * 6 + 0] = w(w[800f39f0 + party_id * 6 + 0]);
[800f3a04 + party_id * 6 + 4] = b(b[800f39f0 + party_id * 6 + 4]);
[800f3a04 + party_id * 6 + 5] = b(b[800f39f0 + party_id * 6 + 5]);

[800f3a04 + party_id * 6 + 0] = b(1);

V0 = nu[800f5bb8 + party_id * 44 + 29];
V0 = V0 & 2; // if long ranged
V0 = V0 < 1; // if not long
V0 = 0 - V0;
V0 = V0 & 7;
[800f3a04 + party_id * 6 + 1] = b(V0); // set 0 if long ranged, 0x07 otherwise
[800f3a04 + party_id * 6 + 2] = b(bu[800f5efc + party_id * 18 + 0]);
////////////////////////////////



////////////////////////////////
// funca4e80
party_id = A0;
V1 = bu[800f5e65 + party_id * 34]; // limit level
if (V1 != ff)
{
    V1 = hu[80163762];
    V0 = 1 << party_id;
    V1 = V1 | V0;
    [80163762] = h(V1);

    [800f5bb8 + party_id * 44 + 8] = h(hu[800f5bb8 + party_id * 44 + 8] | 0001);
    [800f5bb8 + party_id * 44 + e] = b(bu[800f5bb8 + party_id * 44 + e] | 01);
}
////////////////////////////////



////////////////////////////////
// funcb108c
A0 = party_id = A0;
A1 = 5;
A2 = 0;
A3 = 0;
funca31a0;
////////////////////////////////
