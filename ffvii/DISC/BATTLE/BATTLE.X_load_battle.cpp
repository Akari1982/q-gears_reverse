////////////////////////////////
// funca3278()

[800f3944] = w(0);
[800f3948] = w(0);
[80163798] = b(ff);
////////////////////////////////



////////////////////////////////
// funca283c()

A1 = 0;
A0 = 0;

for(int i = 0; i < 6d; ++i )
{
    if( i == A1 )
    {
        [800f38ac + A0] = w(i);
        A0 = A0 + 4;
    }

    // 1F 0E 09 1F 00 0C 09 1F 01 0C 09 1F 02 0D 09 1F
    // 1E 09 1F 0A 16 09 1F 1D 09 1F 19 09 1F 0E 1C 09
    // 1F 0E 1B 09 1F 1A 09 1F 17 1F 03 0C 09 1F 1F 1F
    // 1F 0E 09 1F 04 0B 0F 1F 05 1F 06 0C 09 1F 00 0C
    // 09 1F 01 0C 09 1F 02 0D 09 1F 0E 09 1F 12 0E 09
    // 1F 0E 18 09 1F 10 0E 09 1F 1F 1F 1F 1F 07 0C 09
    // 1F 08 1F 11 1F 13 09 1F 14 1F 15 0F 1F
    if( bu[800a0098 + i] == 1f )
    {
        A1 = i + 1;
    }
}
////////////////////////////////



////////////////////////////////
// funcad480()

A1 = 0;
A2 = 0;
A0 = 0;

for( int i = 0; i < 1e; ++i )
{
    if( A1 < 10 )
    {
        if( i == A2 )
        {
            [800f495c + A0] = w(i);
            A0 = A0 + 4;
            A1 = A1 + 1;
        }

        // 08 00 02 08 01 08 03 08 04 08 05 08 00 02 08 01
        // 08 07 08 06 08 00 02 08 00 08 08 08 08 08
        if( bu[800e7bcc + i] == 8 )
        {
            A2 = i + 1;
        }
    }
}
////////////////////////////////



////////////////////////////////
// funca71f4()

for( int i = 0; i < 3; ++i )
{
    for( int j = 0; j < 80; ++j )
    {
        [800f4308 + i * 200 + j * 4] = b(ff);
    }

    [800f4908 + i * 4] = w(0);
    [800f4914 + i * 4] = w(0);
}
////////////////////////////////



////////////////////////////////
// funcdcf94()

if( A0 == -1 )
{
    [800f1e4f] = b(0);
}
else
{
    [800f1e4f] = b(1);
    [800f1e50] = h(A0);
}
////////////////////////////////



////////////////////////////////
// funca55bc()

for( int i = 0; i < 10; ++i )
{
    [800f3a40 + i * 4 + 0] = h(ffff);
    [800f3a40 + i * 4 + 2] = h(ffff);
}
////////////////////////////////



////////////////////////////////
// funca4ba4
party_id = A0;

// copy usual attack command
[800f39f0 + party_id * 6 + 0] = w(w[8009d84c + party_id * 440 + 4c + 0]);
[800f39f0 + party_id * 6 + 4] = b(b[8009d84c + party_id * 440 + 4c + 4]);
[800f39f0 + party_id * 6 + 5] = b(b[8009d84c + party_id * 440 + 4c + 5]);

[800f3a04 + party_id * 6 + 0] = w(w[800f39f0 + party_id * 6 + 0]);
[800f3a04 + party_id * 6 + 4] = b(b[800f39f0 + party_id * 6 + 4]);
[800f3a04 + party_id * 6 + 5] = b(b[800f39f0 + party_id * 6 + 5]);

[800f3a04 + party_id * 6 + 0] = b(1);

V0 = nu[800f5bb8 + party_id * 44 + 29];
V0 = V0 & 2; // if long ranged
V0 = V0 < 1; // if not long
V0 = 0 - V0;
V0 = V0 & 7;
[800f3a04 + party_id * 6 + 1] = b(V0); // set 0 if long ranged, 0x07 otherwise
[800f3a04 + party_id * 6 + 2] = b(bu[800f5efc + party_id * 18 + 0]);
////////////////////////////////



////////////////////////////////
// funca4e80
party_id = A0;
V1 = bu[800f5e65 + party_id * 34]; // limit level
if (V1 != ff)
{
    V1 = hu[80163762];
    V0 = 1 << party_id;
    V1 = V1 | V0;
    [80163762] = h(V1);

    [800f5bb8 + party_id * 44 + 8] = h(hu[800f5bb8 + party_id * 44 + 8] | 0001);
    [800f5bb8 + party_id * 44 + e] = b(bu[800f5bb8 + party_id * 44 + e] | 01);
}
////////////////////////////////



////////////////////////////////
// funcb108c
A0 = party_id = A0;
A1 = 5;
A2 = 0;
A3 = 0;
funca31a0;
////////////////////////////////
