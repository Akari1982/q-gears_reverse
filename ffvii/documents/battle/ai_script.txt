variable_type
    0 - bit
    1 - byte
    2 - 2bytes
    3 - 3bytes

data_type
    0 - all variable_type
    1 - variable_type 2
    2 - 0xA value with all variable_type




////////////////////////////////////////////////////
0x00 LoadValue(0xXXXX)
    if address >= 4000 load data from all unit_id data with given address and push it to stack with type 20 and mask 3FF.
    else load data from unit_id data with given address and push it to stack with type 00.
    move currect script offset by 3.
    () => (loaded_value)
////////////////////////////////////////////////////
0x01 LoadValue(0xXXXX)
    if address >= 4000 load data from all unit_id data with given address and push it to stack with type 21 and mask 3FF.
    else load data from unit_id data with given address and push it to stack with type 01.
    move currect script offset by 3.
    () => (loaded_value)
////////////////////////////////////////////////////
0x02 LoadValue(0xXXXX)
    if address >= 4000 load data from all unit_id data with given address and push it to stack with type 22 and mask 3FF.
    else load data from unit_id data with given address and push it to stack with type 02.
    move currect script offset by 3.
    () => (loaded_value)
0x03 LoadValue(0xXXXX)
    if address >= 4000 load data from all unit_id data with given address and push it to stack with type 23 and mask 3FF.
    else load data from unit_id data with given address and push it to stack with type 03.
    move currect script offset by 3.
    () => (loaded_value)
////////////////////////////////////////////////////
0x1X PushAddress(0xXXXX)
    push given two bytes value to stack with type 1X.
    move currect script offset by 3.
    () => (address)
////////////////////////////////////////////////////
0x34 MathMod()
    pop value from stack and store it in slot 2.
    pop value from stack and store it in slot 1.
    go through all 0xA values in data array in both slot and make operation to all of them one by one ([0] with [0], [1] with [1] and so on). Store result in data array of slot 1.
    store result as max variable_type of both values.
    if value in slot 1 or value in slot 2  not data_type 0 then push result of operation to stack with data_type 2.
    else push result with data_type 0.
    move currect script offset by 1.
    (value)(value) => (result)
////////////////////////////////////////////////////
0x35 MathAnd()
    pop value from stack and store it in slot 2.
    pop value from stack and store it in slot 1.
    go through all 0xA values in data array in both slot and make operation to all of them one by one ([0] with [0], [1] with [1] and so on). Store result in data array of slot 1.
    store result as max variable_type of both values.
    if value in slot 1 or value in slot 2  not data_type 0 then push result of operation to stack with data_type 2.
    else push result with data_type 0.
    move currect script offset by 1.
    (value)(value) => (result)
////////////////////////////////////////////////////
0x40 CheckEqual()
    pop value from stack and store it in slot 2.
    pop value from stack and store it in slot 1.
    go through all 0xA values in data array in both slot and compare them one by one ([0] with [0], [1] with [1] and so on). Store result as bit mask.
    if value in slot 1 and value in slot 2 both data_type 0 then push bit mask as bool (1 or 0) back to stack as variable with type 00.
    else write bit mask to 2C of slot 1 and push it back with mask of data in slot 1 as type 02.
    move currect script offset by 1.
    (value)(value) => (check_result)
////////////////////////////////////////////////////
0x52 MathNot()
    pop value from stack and store it in slot 1.
    convert value to bool (in at least 1 value not 0 => 1).
    make NOT new bool value.
    push result to stack as type 00.
    move current script offset by 1.
    (value) => (result)
////////////////////////////////////////////////////
0x6X PushImmediate(0xXX)
    push given (X + 1)byte value to stack with type X + 1.
    move currect script offset by X + 1.
    () => (value)
////////////////////////////////////////////////////
0x70 JumpIfFalse(0xXXXX)
    pop value from stack and store it in slot 1.
    call battle_opcodes_expand_copy_2_data_type to expand and copy data in case of data_type 2.
    if 2C value in slot 1 == 0 set currect script offset to given value.
    else move current script offset by 3.
    (value) => ()
////////////////////////////////////////////////////
0x71 JumpIfNotEqual(0xXXXX)
    pop value from stack and store it in slot 2.
    call battle_opcodes_expand_copy_2_data_type to expand and copy data in slot 2 in case of data_type 2.
    get value from stack (without popping).
    call battle_opcodes_expand_copy_2_data_type to expand and copy data in slot 1 in case of data_type 2.
    if 2C value in slot 1 != 54 value in slot 2 set currect script offset to given value.
    else move currect script offset by 3.
    (value_2)(value_1) => (value_1)
////////////////////////////////////////////////////
0x72 JumpTo(0xXXXX)
    set currect script offset to given value.
    () => ()
////////////////////////////////////////////////////
0x80 FilterValueByMask()
    if top value in stack is 1X type - move currect script offset by 1 and continue opcode execution.
    pop value from stack and store it in slot 1.
    pop mask from stack and store it in slot 2.
    update mask of value in slot 1 by anding it with mask (1st value in slot 2).
    store value in slot 1 back to stack with new mask. Only values in mask left
    move currect script offset by 1.
    (value)(mask) => (filtered_value)
////////////////////////////////////////////////////
0x81 MathRandom()
    generates 2 bytes random value and push it to stack as 02 value.
    move currect script offset by 1.
    () => (random_value)
////////////////////////////////////////////////////
0x82 PickRandomBit()
    pop value from stack and store it in slot 1.
    get random bit grom the 1st value in data array in slot 1.
    push getted bit to stack as 02 value.
    move currect script offset by 1.
    (value) => (random_bit_value)
////////////////////////////////////////////////////
0x90 StoreValue()
    pop value from stack to slot 1.
    call battle_opcodes_expand_copy_2_data_type to expand and copy data in case of data_type 2.
    pop address from stack to slot 2.
    if address >= 4000 pop unit mask from stack. Store all values to addresses by unit mask.
    else store value to address.
    move current script offset by 1.
    (value)(address) => ()
    (value)(address)(mask) => ()
////////////////////////////////////////////////////
0x91 Pop()
    pop value from stack to slot 1.
    move current script offset by 1.
    (value) => ()
////////////////////////////////////////////////////
0x92 RunCommand()
    ???????????????????????????
    ???????????????????????????
    (value1)(value2) => ()
////////////////////////////////////////////////////



////////////////////////////////////////////////////
value
battle_opcodes_get_two_bytes()
    read 2 bytes from currect script offset swap it and return. Move currect script offset by 2.
////////////////////////////////////////////////////
address
battle_opcodes_values_offset(unit_id, address)
    translates given address to read offset to unit_id data with given address.
////////////////////////////////////////////////////
value
battle_opcodes_read_values(unit_id, variable_type, address)
    read value from unit_id data with given address with given variable_type.
////////////////////////////////////////////////////
battle_opcodes_write_values(unit_id, variable_type, address, value)
    write given value to unit_id data with given address with given variable_type.
////////////////////////////////////////////////////
battle_opcodes_push_to_stack(variable_type, value)
    push value to stack. From 1 to 3 bytes depending on variable_type.
////////////////////////////////////////////////////
value
battle_opcodes_pop_from_stack(variable_type)
    pops value from stack and returns it. From 1 to 3 bytes depending on variable_type.
////////////////////////////////////////////////////
battle_opcodes_store_values(type)
    divide type into data_type and variable_type.
    if data_type == 0 push to stack one value from 2C of given variable_type.
    if data_type == 1 push to stack one value from 2C of variable_type 2.
    if data_type == 2 push to stack 0xA values starting from 2C of given variable_type by mask in 28. Then push to stack mask itself with type 2.
    push given type to stack as one byte.
////////////////////////////////////////////////////
type
battle_opcodes_load_values(slot)
    pop type from stack and divide type into data_type and variable_type.
    if data_type == 0 store full mask at slot 28. pop variable with variable_type from stack store it 0xA times in data array 2C in given slot.
    if data_type == 1 pop variable of type 2 from stack and store it in given slot 2C.
    if data_type == 2 pop mask with variable_type 2 from stack and store it at slot 28. Pop 0xA variables of variable_type from stack and store it in data array 2C in given slot.
////////////////////////////////////////////////////
type
battle_opcodes_load_values_without_pop(slot)
    call battle_opcodes_load_values but stores stack pointer before and restore it after call.
////////////////////////////////////////////////////
bool
battle_opcodes_expand_copy_2_data_type(slot)
    if data_type stored in slot == 2. Find first existed value in slot array 2C by slot mask 28. Store full mask 3FF to slot 28 and fill all slot data array 2C with this value. return 1.
    else return 0.
////////////////////////////////////////////////////
bool
battle_opcodes_make_comparsion(index_in_slot_1, index_in_slot_2)
    read lower byte of opcode that called this function.
    0: return 1 if X == Y.
    1: return 1 if X != Y.
    2: return 1 if X >= Y.
    3: return 1 if X <= Y.
    4: return 1 if X >  Y.
    5: return 1 if X <  Y.
////////////////////////////////////////////////////
value
battle_opcodes_make_math(index_in_slot_1, index_in_slot_2)
    read lower byte of opcode that called this function.
    0: return X  +  Y;
    1: return X  -  Y;
    2: return X  *  Y;
    3: return X  /  Y;
    4: return X mod Y;
    5: return X  &  Y;
    6: return X  |  Y;
    7: return 0 nor X;
////////////////////////////////////////////////////



======================================================================
0x11 PushAddress(0xXXXX)   | [0xXXXX] = (0xXX)                       |
0x60 PushImmediate(0xXX)   |                                         |
0x90 StoreValue()          |                                         |
======================================================================
0x12 PushAddress(0xXXXX)   | [0xXXXX] = (0xXXXX)                     |
0x61 PushImmediate(0xXXXX) |                                         |
0x90 StoreValue()          |                                         |
======================================================================
0x11 PushAddress(0xXXXX)   | [0xXXXX] = [0xXXXX] & 0xXX              |
0x01 LoadValue(0xXXXX)     |                                         |
0x60 PushImmediate(0xXX)   |                                         |
0x35 MathAnd()             |                                         |
0x90 StoreValue()          |                                         |
======================================================================
0x02 LoadValue(0x2060)     | JumpIfSelfInFrontRow(0xXXXX)            |
0x00 LoadValue(0x4026)     |                                         |
0x80 FilterValueByMask()   |                                         |
0x60 PushImmediate(0x00)   |                                         |
0x40 MathEqual()           |                                         |
0x70 JumpIfFalse(0xXXXX)   |                                         |
======================================================================
0x02 LoadValue(0x2080)     | JumpIfAllFriendsInFrontRow(0xXXXX)      |
0x00 LoadValue(0x4026)     |                                         |
0x80 FilterValueByMask()   |                                         |
0x60 PushImmediate(0x00)   |                                         |
0x40 MathEqual()           |                                         |
0x70 JumpIfFalse(0xXXXX)   |                                         |
======================================================================
0x02 LoadValue(0x2080)     | JumpIfAllFriendsInBackRow(0xXXXX)       |
0x00 LoadValue(0x4026)     |                                         |
0x80 FilterValueByMask()   |                                         |
0x60 PushImmediate(0x01)   |                                         |
0x40 MathEqual()           |                                         |
0x70 JumpIfFalse(0xXXXX)   |                                         |
======================================================================
0x02 LoadValue(0x20A0)     | JumpIfAllOpponentsInFrontRow(0xXXXX)    |
0x00 LoadValue(0x4026)     |                                         |
0x80 FilterValueByMask()   |                                         |
0x60 PushImmediate(0x00)   |                                         |
0x40 MathEqual()           |                                         |
0x70 JumpIfFalse(0xXXXX)   |                                         |
======================================================================
0x02 LoadValue(0x20A0)     | JumpIfAllOpponentsInBackRow(0xXXXX)     |
0x00 LoadValue(0x4026)     |                                         |
0x80 FilterValueByMask()   |                                         |
0x60 PushImmediate(0x01)   |                                         |
0x40 MathEqual()           |                                         |
0x70 JumpIfFalse(0xXXXX)   |                                         |
======================================================================
0x01 LoadValue(0xXXXX)     | JumpIf((0xXXXX & 0xXX) != 0xXX)(0xXXXX) |
0x60 PushImmediate(0xXX)   |                                         |
0x35 MathAnd()             |                                         |
0x60 PushImmediate(0xXX)   |                                         |
0x40 MathEqual()           |                                         |
0x70 JumpIfFalse(0xXXXX)   |                                         |
======================================================================
0x12 PushAddress(0x2070)   | SetRandomOpponentInBackRowToAttack()    |
0x02 LoadValue(0x20a0)     |                                         |
0x00 LoadValue(0x4026)     |                                         |
0x80 FilterValueByMask()   |                                         |
0x60 PushImmediate(0x01)   |                                         |
0x40 MathEqual()           |                                         |
0x82 PickRandomBit()       |                                         |
0x90 StoreValue()          |                                         |
======================================================================
