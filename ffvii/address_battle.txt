800a0000               some action default values (size 0x4).
    00 00 0000          14 11 0000 attack       1D 00 0000 magic        1F 00 0000 summon
    21 37 0000 item     22 00 0600 steal        26 00 1204 sense        21 0A 0000 coin
    21 09 0000 throw    28 B1 0020 morph        2A 11 0000 deathblow    2C 90 0000 manipulate
    00 00 0000 mime     1E 00 0000 enemy skill  00 00 0000              00 00 0000
    00 00 0000          24 11 0400 mug          00 11 0200 change       00 00 0000 defend
    00 00 0000 limit    1D 00 0000 wmagic       1F 00 0000 wsummon      21 00 0000 witem
    15 11 0000 slashall 16 11 0010 2xcut        1C 11 0200 flash        18 11 0010 4xcut
    00 00 0000          00 00 0000              00 00 0000              00 00 0000
    00 00 0000          00 00 0000              00 00 0000              2E 04 0000 0x23 action
    00 00 0000          00 00 0000
800a0000 + 0  []       animation action id to play.
800a0000 + 1  []       default attack formula.
800a0000 + 2  [][]     some default flags.

800a0098 some values
                1F 0E 09 1F 00 0C 09 1F 01 0C 09 1F 02 0D 09 1F
                1E 09 1F 0A 16 09 1F 1D 09 1F 19 09 1F 0E 1C 09
                1F 0E 1B 09 1F 1A 09 1F 17 1F 03 0C 09 1F 1F 1F
                1F 0E 09 1F 04 0B 0F 1F 05 1F 06 0C 09 1F 00 0C
                09 1F 01 0C 09 1F 02 0D 09 1F 0E 09 1F 12 0E 09
                1F 0E 18 09 1F 10 0E 09 1F 1F 1F 1F 1F 07 0C 09
                1F 08 1F 11 1F 13 09 1F 14 1F 15 0F 1F

800a0d98 default matrix for billboards.

800e7a38      [][][][] maybe current unit (during attack queue).

800e7a58      []       array of player unit_ids. Used if we want some player unit to execute another player logic.

800e7bbc some values
                08 00 02 08 01 08 03 08 04 08 05 08 00 02 08 01
                08 07 08 06 08 00 02 08 00 08 08 08 08 08

800e7d10 up vector for battle camera. (3 items, 0x4 size)
800e7d20 vector to scale rotation matrix for 3d. (3 items, 0x4 size)

800e7d50 array of camera data files data.
800e7d98 array of battle field data.
800e8050 array of enemy data files data.

800e8e84      array of default player position depends on type of battle (0x12 for each battle type, 0x6 for each player)
C0F9 0000 A406    0000 0000 A406    4006 0000 A406
C0F9 0000 A406    0000 0000 A406    4006 0000 A406
C0F9 0000 5CF9    0000 0000 5CF9    4006 0000 5CF9
18FC 0000 C409    0000 0000 3CF6    E803 0000 C409
C0F9 0000 38FF    0000 0000 C800    4006 0000 38FF
18FC 0000 AC0D    0000 0000 54F2    E803 0000 AC0D
18FC 0000 9411    0000 0000 6CEE    E803 0000 9411
18FC 0000 3CF6    0000 0000 C409    E803 0000 3CF6
C0F9 0000 A406    0000 0000 A406    4006 0000 A406

800e8f28      array of default player position in case of two player
18FC 0000 A406    E803 0000 A406
18FC 0000 A406    E803 0000 A406
18FC 0000 5CF9    E803 0000 5CF9
0000 0000 C409    0000 0000 3CF6
18FC 0000 38FF    E803 0000 C800
0000 0000 AC0D    0000 0000 54F2
0000 0000 9411    0000 0000 6CEE
0000 0000 C409    0000 0000 3CF6
18FC 0000 A406    E803 0000 A406

800e8f94      array of default player rotations
0000 0000 0000
0000 0000 0000
0008 0008 0008
0000 0008 0000
0000 0008 0000
0000 0008 0000
0000 0008 0000
0008 0000 0008
0000 0000 0000

800e9ff8 offsets to init camera scripts.

800ea198 default camera data.

800f0218 data for dust cloud effect.

800f10d8 [][][][] add index into hurt struct and array.
800f10dc [][][][] played index into hurt struct and array.

800f195c here is transformation data for machinegun effect (matrix and vector)
800f197c 3d data for machinegun fire effect.

800f1e4f []       init with 0. Set 1 togather with 800f1e50.
800f1e50 [][]     set with string id.

800f38ac [][][][] array of some data. Init in funca283c. Related with 800a0098 data.

800f3944 [][][][] index of 80163798 element. Init with 0.
800f3948 [][][][] index of 800fa9d0 element. Init with 0.

800f3950 [][][][] copy 800f3944 here at start ob battle damage calculation.
800f3954 [][][][] copy 800f3948 here at start ob battle damage calculation.

800f39f0 berserk toad action stats for player units. Copy first action command for unit here. (size 0x6).
    +0 []     Init with ff. Copy action id from temp.
    +1 []     Set default 800707c4 + 0. Set 0 here if weapon is long ranged or if some other condition.
    +2 []     Set default 800707c4 + 1 (target type). Add modified target type here.
    +3 []     Init with 1. Set 0 during copy from temp.
    +4 []     Copy number of stars from temp (but only in case of w command). Add number of stars in megaall materia in case of command id 5 6 9 a b 11. Set 0xff if actions 0x18,0x19,0x1a,0x1b
    +5 []     Init with 0. Flags (0x01 - mp absorb, 0x02 - hp absorb, 0x08 - steal as well, 0x10 - added cut).

800f3a04 some structure for party units. Copy first action command for unit here. (size 0x6).
    +0 []     Init with ff. Copy action id from temp. Store 1 here. Probably for counter.
    +1 []     Set default 800707c4 + 0. Set 0 here if weapon is long ranged or if some other condition. Set 0 if long ranged, 0x07 otherwise.
    +2 []     Set default 800707c4 + 1 (target type). Add modified target type here. Set 800f5efc+0 (flags from equipped weapon data + 0).
    +3 []     Init with 1. Set 0 during copy from temp.
    +4 []     Copy number of stars from temp (but only in case of w command). Add number of stars in megaall materia in case of command id 5 6 9 a b 11. Set 0xff if actions 0x18,0x19,0x1a,0x1b
    +5 []     Init with 0. Flags (0x01 - mp absorb, 0x02 - hp absorb, 0x08 - steal as well, 0x10 - added cut).

800f3a40 array of some items structures 0x4 size (0x10 items) If some data in here and same user and same item - discard (write ffff).
    +0 [][]     id of unit using item. Init with 0xffff.
    +2 [][]     index of item. Init with 0xffff.

800f3a80 string buffer 0x800 size. We can add a lot of strings in one frame but they will be displayed one by one. We use this buffer and array of indexes into it for this.
800f4280 array of string buffer positions indexed by 800f4304.
800f4300 [][][][] string buffer position.
800f4304 [][][][] index into 800f4280.

800f4308 3 arrays with 0x80 items each with size 0x04 (0x04 size 0x3 * 0x80 items). We add something here and increment cell so next time we add to next cell.
    +00 []       store attacker id here (player)
    +01 []       we store here 6 at start of battle for player characters.
    +02 [][]     we store here 0 at start of battle for player characters.
800f4908 [][][][] something for 1st 0x200 800f4308. Init with 0.
800f490c [][][][] something for 2nd 0x200 800f4308. Init with 0.
800f4910 [][][][] something for 3rd 0x200 800f4308. Init with 0.
800f4914 [][][][] current slot in 1st 0x200 800f4308. Init with 0.
800f4918 [][][][] current slot in 2nd 0x200 800f4308. Init with 0.
800f491c [][][][] current slot in 3rd 0x200 800f4308. Init with 0.

800f4920 [][][][] init with 0 at start of attack calculation in action_type_09. Add 0009 flags gefore actual calculation.
800f4924 [][]     array of something. Copy 800f4938 array gere during cycle of attack. (0xa items)
800f4938 [][]     array of target mask. Inited with 0 at beginning of damage calculation (just before real calculation) Set all to 0 after copy to 800f4924 (0xa items). Store target mask of attacking unit here (in it's slot)
800f494c []       array of something. Inited with 0xff at beginning of damage calculation (just before real calculation) (0xa items)
800f4958 [][]     init with 0. Some mask. Related with reflection.
800f495c array of 0x10 values. Init in funcad480. Related with 800e7bcc data.

800f4ac0 [][][][] store offset to ai script here during funtion that handles battle opcode.
800f4ac4 [][][][] pointer to battle temp structure.
800f4ac8 [][][][] init with 0. Priority for added action (in script).
800f4acc [][][][]

800f4b00 []       init with 0.



800f4cec      [][][][] array of 0xf types of hurts
                        0x4 - during 0xF7 action opcode callback. Normal hurt.
                        0x6 - if units has reflection. Reflection hurt.
                        0xa - unknown
800f4d2c      array of 0xf struct with size 0x14.
+00 [][]     store unit id here to which we want play hurt actions.



800f5b70 []       init with 0. Far color R for battle.
800f5b71 []       init with 0. Far color G for battle.
800f5b72 []       init with 0. Far color B for battle.
800f5b73 []       init with 1f.
800f5b74 [][]     init with 0. Address used during unknown action in funcba360 function. 3d models color related.

800f5bb8 some unit structure. (size 0x44).
800f5cc8 some unit structure. enemy starts here. (size 0x44).
    +00 [][]     unit speed.
    +02 [][]     time value addition (increase with it). Initialized in funcae954 with (battle_speed * unit_dexterity / party_dexterity). We read this in main battle queue function.
    +04 [][]     init with 0. Time value (init in battleinit_init_units_time_value).
    +06 [][]
    +08 [][]     add 0x0001 bit if player with limit break and remove it during init. Limit time speed (time speed increased 4 times when this flag is on).
    +0a [][]     init with 0x00, 0x22, 0x44, 0x88 in case of (dead slow normal haste).
    +0c []       init with 0xff. if this is not 0xff add to target mask during sense.
    +0d []       init with 0xff. Accessory special effect.
    +0e []       add 0x01 bit if player with limit break.
    +0f []       init with 0xff. Store enemy type number (+0c from  from 800f83e0) here (formation number).
    +10 []       store 0 here during init.
    +11 []       store 0 here during init.
    +12 []       init with 0. Store 0xff here if we set death sentence through curse ring equip.
    +13 []       store 0 here during init.
    +14 []       store 0 here during init.
    +15 []       store 0 here during init.
    +16 []       store 0 here during init.
    +17 []       store 0 here during init.
    +18 []       store 0 here during init.
    +19 []       store 0 here during init.
    +1a []       store 0 here during init.
    +1b []       store 0 here during init.
    +1c []       store 0 here during init.
    +1d []       store 0 here during init.
    +1e []       store 0 here during init.
    +1f []       store 0 here during init.
    +20 []       store 0 here during init. Attack multiplier. Rised by hero drink for example.
    +21 []       store 0 here during init. Magical attack multiplier.
    +22 []       store 0 here during init. Physical defense multiplier.
    +23 []       store 0 here during init. Magical defense multiplier
    +24 []       store 0 here during init.
    +25 []       store 0 here during init. Some dexterity multiplier. (0x64 - twice).
    +26 []       store 0 here during init.
    +27 []       store 0 here during init.
    +28 []
    +29 []       add 0x02 bit if weapon is long ranged. Checked if A0 & 80 and then stored A0 & 7F back. Checked if A0 & 04 and then stored A0 & FB back. Init whth 0 in case of enemy. If 0x04 write "XX was cought by surprize" to output string.
                0x01 - can't steal from this entity. Add for enemy target if we stole something from it. Init with this flag in case of player.
    +2a []       ???
    +2b
    +2c [][][][] some data checked after damage apply in action_type_09 function.
    +30 [][][][] some data checked after damage apply in action_type_09 function.
    +34 [][][][] init with status protect mask in case of player. Add statuses from equipment here (like haste or barrier from accessory). Set inversed status immunities from enemy data structure in case of enemy (+b0).
    +38 [][][][] pointer to enemy name.
    +3c [][]     current hp.
    +3e [][]     current mp.
    +40
    +41
    +42
    +43

800f5e60 some unit structure (posibly data for battle hud unit records) (size 0x34 3 items).
    +00 [][][][] pointer to character data in savemap.
    +05 []       limit level (0-3,0xff)
    +06 []       manipulated entity id?
    +08 [][]     init with limit bar value. We copy this to +a every battle cycle (for player units).
    +0a [][]     init with limit bar value. We copy +08 here every battle cycle (for player units).
    +0c [][]     store current unit MP here.
    +0e [][]     store current unit HP here.
    +10 [][]     store max mp here.
    +12 [][]     store max hp here
    +14 [][]     store 999 here as init (9999 if hp<>mp). max mp?
    +16 [][]     store 9999 here as init (999 if hp<>mp). max hp?
    +18 [][]     if this is not -1 get this value and store -1 back (during attacks with 0x40 bit seted). Some 1st value checked in large function.
    +1a [][]     if this is not -1 get this value and store -1 back (during attacks with 0x40 bit seted). Some 2nd value checked in large function.
    +1c [][][][] hp divisor for limit break.
    +20 [][][][] init with 0. Add player status mask here.
    +24 [][][][] store here 80XXXXXX if unit has materia with materia type lower 4 bitx == 7 (in game there only enemy skill materia whth enemy type 57) where XXXXXX expirience in materia.
    +28 [][][][] store here 80XXXXXX if unit has materia with materia type lower 4 bitx == 7 (in game there only enemy skill materia whth enemy type 57) where XXXXXX expirience in materia.

800f5efc Struct with weapon attack info for each player. (0x18 size)
    +00 []       target type flags (0x20 - not long range). Set from +0 equipped weapon data.
    +01 []       set from +1 equipped weapon data. Attack effect id.
    +02 []       damage formula id. Set from +2 equipped weapon data.
    +03 []       weapon hit chance. Set from +8 equipped weapon data.
    +04 []       impact effect id. Set from +27 equipped weapon data.
    +05 []       critical hit chance. Set from +7 equipped weapon data.
    +06
    +07
    +08 [][]     normal attack sound. Set from +24[] equipped weapon data. Add bit 0x0100 if mask set in +b[] equipped weapon data
    +0a [][]     critical attack sound. Set from +25[] equipped weapon data. Add bit 0x0100 if mask set in +b[] equipped weapon data
    +0c [][]     miss attack sound. Set from +26[] equipped weapon data. Add bit 0x0100 if mask set in +b[] equipped weapon data
    +0e [][]     attack element. Set from +10 equipped weapon data and currently calculated attack element in player structure.
    +10 [][]     camera movement id. Set from +c equipped weapon data. (always 0xffff)
    +12 [][]     special attack flags. set from +28 equipped weapon data. (always 0xffff)
    +14 [][][][] set status attack mask from player structure.



800f5f44 enemy data structure from scene file (0xb8 size 0x3 records).
    +00 enemy name (0x20 size string).
    +20 []       level.
    +21 []       dexterity.
    +22 []       luck.
    +23 []       evade.
    +24 []       strength.
    +25 []       defense.
    +26 []       magic.
    +27 []       magic defense.
    +28 array of elements id (0x8 items 0x1 size)
    +30 array of elements influence (0 - death, 2 - 200%damage, 3 - normal, 4 - 50%damage, 5 - 0%damage, 6 - 100%absorb, 7 - fully recover) (0x8 items 0x1 size)
    +38 array of action animation index (0x10 items 0x1 size).
    +48 array of attack ids (0x10 items 0x2 size).
    +68 array of attacks camera id for single and multiple targets. If set this will overwrite camera movement set in attack. (0x10 items 0x2 size)
    +88 []       1st stole item chance.
    +89 []       2nd stole item chance.
    +8a []       3rd stole item chance.
    +8b []       4th stole item chance.
    +8c [][]     1st stole item id.
    +8e [][]     2nd stole item id.
    +90 [][]     3rd stole item id.
    +92 [][]     4th stole item id.
    +94 [][]     manipulate attack id 0.
    +96 [][]     manipulate attack id 1.
    +98 [][]     manipulate attack id 2.
    +9a [][]     unknown, 0xffff and 0xfffe
    +9c [][]     mp.
    +9e [][]     ap.
    +a0 [][]     enemy can be morphed into this item. 0xffff if it can't be morphed.
    +a2 []       multiplier for back damage. damage = damage * 0xXX / 8.
    +a3 []       align 0xff.
    +a4 [][][][] hp.
    +a8 [][][][] exp.
    +ac [][][][] gil.
    +b0 [][][][] status immunities mask.

800f616c attack data structure from scene file (0x1c size 0x20 records).
    +00 []       hit %.
    +01 []       impact effect id.
    +02 []       target hurt action id.
    +04 [][]     mp cost.
    +06 [][]     impact sound id.
    +08 [][]     camera movement Id for single target.
    +0a [][]     camera movement Id for multiple targets.
    +0c []       target flags.
    +0d []       attack effect id.
    +0e []       formula.
    +0f []       strength of attack for damage calculation.
    +10 []       condition sub-menu.
    +11 []       status effect change.
    +12 []       attack additional effects.
    +13 []       additional effects modifier.
    +14 [][][][] status.
    +18 [][]     element mask (0xffff means no element).
    +1a [][]     special attack flags.

800f64ec array of attack id data from scene file (0x20 items 0x02 size).

800f652c array of attack names from scene file (0x20 items 0x20 size).

800f692c attack stack data (0x200(all) + 0x8(current)).
    +00 []       priority. Init with 0xff (exept current).
    +01 []       order inside priority.
    +02 []       unit_id.
    +03 []       action type (0x01 - player attack
                    0x02 - player magic
                    0x03 - player summon
                    0x04 - player item
                    0x05 - player steal
                    0x06 - player sense
                    0x07 - player coin
                    0x08 - player throw
                    0x09 - player morph
                    0x0A - player deathblow
                    0x0B - player manipulate
                    0x0C - player mime
                    0x0D - player enemy skill
                    0x0E - ???
                    0x0F - ???
                    0x10 - ???
                    0x11 - player mug
                    0x12 - player change
                    0x13 - player defend
                    0x14 - player limit
                    0x15 - this replaces with magic after modification
                    0x16 - this replaces with summon after modification
                    0x17 - this replaces with item after modification
                    0x18 - player slash-all
                    0x19 - player 2x-cut
                    0x1A - player flash
                    0x1B - player 4x-cut
                    0x1C - ???
                    0x1D - ???
                    0x1E - ???
                    0x1F - ???
                    0x20 - enemy attack
                    0x21 - ???
                    0x22 - run scripts
                    0x23 - ???
                    0x24 - ???
                    0x25 - ???
    +04 [][]     attack index.
    +06 [][]     attack mask.

800f6b34 array of something for units. 0x0-0x3 players, 0x4-0x9 enemy. We copy here data during some circumstances in battle queue function (0x8 size 0xa items).
    +00 []       init with 0xff in case of enemy.

800f6b84 store here data after command executement for player (0x8 size 0x2 items).
    +00 []       priority. Init with 0xff (exept current).
    +01 []       order inside priority.
    +02 []       unit_id. Init with 0xff.
    +03 []       action type (0x01 - player attack
    +04 [][]     attack index.
    +06 [][]     attack mask.

800f6b94 []       array of executed order number for priority. Readed during main battle queue function. Must be different from 800F6B9B to anything happens.

800f6b9b []       array of current order number for priority. It copied to 800f692c + 01 and incremented by 1. Must be different from 800f6b94 to anything happens.

800f6ba4 formation ai scripts from scene file (0x200 size).

800f6da4 enemy ai scripts from scene file (0x1000 size).

800f7da6 [][]     calculated battle speed stored here (10000 / (((battle_speed * 1e0) / 100) + 78) * 2). Looks like this speed in slow (normal - x2, haste - x4).
800f7da8 [][]     calculated, dexterity value ((total_dexterity - 1 + number_of_party) / number_of_party + 32)
800f7daa [][]     atb type.

800f7db2 [][]     store here escape counter.

800f7db6 [][]     store here escape counter.
800f7db8 [][]     store 0 here at start of attack queue executed parcing
800f7dba [][]     store currently executed priority in main battle queue here.
800f7dbc [][]     store set bit here before run opcode cycle.
800f7dbe [][]     store 0051 here if attacker in lucky 7777 in large_function.
800f7dc0 [][]     store 002F here if attacker in lucky 7777 in large_function.
800f7dc6 [][]     store here status(from attack param) & 00000003 (if 0x80000000 bit (imprisoned) in status mask set).
800f7dc8 [][]     store here preemptive/side/pincer battle type (00 - normal, 01 - preemptive, 02 - back, 03 - side, 04 - both sides, 05 - normal).
800f7dce [][]     petrified unit mask.
800f7dd4 []       number of enemy type 0. Init with 0. Increment for each enemy id 0.
800f7dd5 []       number of enemy type 1. Init with 0. Increment for each enemy id 1.
800f7dd6 []       number of enemy type 2. Init with 0. Increment for each enemy id 2.
800f7dd8 [][]     store attacker unit mask here. Probably for counter attack. (if priority >= 2)
800f7dda [][]     atore here [address + f0] (1f8000f0) for player.
800f7dde [][]     store action priority (bu[A0 + 0]) during attack set.

800f7de2 [][]     we increment number stored here by 1 and if it is less than 0x40 than add some action during lucky 7777 in funca2894.
800f7de4 []       init with 1.
800f7de8 [][]     add 0x0001 bit during units init function.

800f7df4 []       store 0 here during battle init. Increment with each enemy unit, that will be at battle.
800f7df8 [][][][] store here enemy id + 14 for each enemy that has formation record, -1 otherwise. (3 items)

800f7e04 []       store here number of enemy unit in battle during battle init.

800f7e08 formation copied data.
    +00 [][]     enemy id.
    +02 [][]     pozition x.
    +04 [][]     pozition y.
    +06 [][]     pozition z.
    +08 [][][][] +c from formation data


800f7ed0 [][][][] init with "A" string (0x21)
800f7ed4 []       init with 0.
800f7ed8 struct 0x28 size. 0x10 items. Camera related.
// for function 800bfda0
+00 [][]     store here value from 800f8360.
+02 [][]     
+04 [][]     number of steps.
+06 [][]     joint Z offset.
+08 [][]     store attacker id here.
+0a [][]     store given joint here.
+0c [][]     store used camera struct id here.
+0e [][]     joint X offset.
+10 [][]     joint Y offset.
+12 [][]     
+14 [][]     
+16 [][]     
+18 [][]     
+1a [][]     
+1e [][]     
// for function 800c0410
+00 [][]     store here value from 800f8360.
+02 [][]     looks like state. (0-init, 1-execute).
+04 [][]     number of steps left.
+06 [][]     final position camera X.
+08 [][]     final position camera Y.
+0a [][]     final position camera Z.
+0c [][]     start position camera X.
+0e [][]     start position camera Y.
+10 [][]     start position camera Z.
+12 [][]     camera struct id that we use for this calculation.
+14 [][]     X value by step.
+16 [][]     Y value by step.
+18 [][]     Z value by step.
+1a [][]     number of steps.
+1e [][]     current step.
// for function 800c0900
+00 [][]     store here value from 800f8360.
+02 [][]     looks like state. (0-init, 1-execute).
+04 [][]     number of steps left.
+06 [][]     final direction camera X.
+08 [][]     final direction camera Y.
+0a [][]     final direction camera Z.
+0c [][]     start direction camera X.
+0e [][]     start direction camera Y.
+10 [][]     start direction camera Z.
+12 [][]     camera struct id that we use for this calculation.
+14 [][]     X value by step.
+16 [][]     Y value by step.
+18 [][]     Z value by step.
+1a [][]     number of steps.
+1e [][]     current step.



800f8158 0x34 size struct that contain field background position and rotation
+00 [][][][] final rotation matrix R11R12.
+04 [][][][] final rotation matrix R13R21.
+08 [][][][] final rotation matrix R22R23.
+0c [][][][] final rotation matrix R31R32.
+10 [][][][] final rotation matrix R33.
+14 [][][][] final translation X.
+18 [][][][] final translation Y.
+1c [][][][] final translation Z.
+20 [][]     rotation X
+22 [][]     rotation Y
+24 [][]     rotation Z
+28 [][]     translation X.
+2a [][]     translation Y.
+2c [][]     translation Z.
+30 [][][][] store 800fa63c here??? Address to current matrix?

800f8360 [][]     copy data from here to 800f7ed8 during 0xe8 camera opcode. Looks like 800f7ed8 struct current id.

800f8368 [][][][] store 0 here during battle init.
800f836c [][]     mask of units with reflection.

800f8370 [][]     camera id to use (same as camera in attack (-2 init, -1 default, -3 win)).
800f8374 []       init with 0xe. Default wait time. We use this value in action opcodes, when we want MonoDrive to teleport (this is fade time)
800f8378 []       set to 0 at start of 0x4 or 0x5 hurt action.
800f837c []       index of 80151844 and 801518a4 camera structures that we use. Init with 0.
800f8380 []       some flags byte readed during inited and according to it bits initing with control byte 0x01 go. Init with 0.
                  0x01 - don't draw background.
                  0x02 - don't draw main part of background.
                  0x04 - don't draw main background parts.
                  0x08 - don't draw rain on map 0x3a.

800f8390 [][][][] address where model data for 1st enemy model stored (without texture because it's loaded to vram)
800f8394 [][][][] address where model data for 2nd enemy model stored (without texture because it's loaded to vram)
800f8398 [][][][] address where model data for 3rd enemy model stored (without texture because it's loaded to vram)



800f83a4 battle global structure. (address 0x2000).
    +00 []       store data performed action type id here. (0x20 for example)
    +01 []       store data performed attack index here.
    +04 []       formation type id.
    +0a [][]     add bits for every inited unit here. Mask for alive units???
    +0c [][]     self mask for current unit ().
    +0e [][]     attack mask for current unit (2070).
    +10 [][]     friends mask for current unit (2080).
    +12 [][]     0 ().
    +14 [][]     opponents mask for current unit (0x20A0).
    +16 [][]     0 ().
    +18 [][]     init with 0. Add bits for player units.
    +1a [][]     init with 0. Add bits for inited enemy units.
    +1c [][]     all units mask ().
    +22 [][]     init with 0 at start of battle cycle. Some flags. A0 = (V0 & 25) ? 1 : 7; funca23e0; // battle queue function
    +28 [][]     store battle id here.
    +2c [][]     something flags used during attack queue coping. Used during 8 and A 2bytes copying from attack data. 0x0004 checked in battle cycle.
    +2e [][]     flags. 0x0004 (magical or physical attack)
    +30 [][]
    +38 [][][][] 


800f83e0 unit data structure. (size 0x68). (address 0x4000).
800f8580 enemy start
    + 00 [][][][] current status. Init with 0.
                00000001 - death. Set if current hp of character is 0.
                00000010 - sadness.
                00000020 - fury.
    + 04 [][][][] some flags. Init with 0 in case of enemy. Set +0c in battle formation &0x1f here in case of enemy.
                00000002 - looks like if this bit set we are left fighters (right otherwise) in case of side battle.
                00000008 - seems like enabled units in battle. Init with this in case of player.
                00000010 - units with activates auto script 0x01 (action).
                00000020 - defend flag. Remove this flag if we add action with priority >= 2.
                00000040 - set this bit if we in back row.
                00000080 - set this bit for: enemies in case of battle type 0, player in case of battle 2, left row an player 2 in case of battle 4.
                00000100 - looks like nullify phisical attack.
                00000200 - looks like nullify magic attack.
                00000400 - maybe like immune to statuses?.
                00000800 - probably bit for temporary unreachable unit (set in battle_update_unit_mask).
                00001000 - no death animation?
                00002000 - set this bit if unit is dead in battle (if unit was dead at the begin of battle flag is not set).
                00004000 - invisibility flag. All attack will miss this target.
                00008000 - reflect all?
                00020000 - absorb all magic?
    + 08 []       index. Init with 0xff. Set player character id here in case of player. Set scene index in case of enemy.
    + 09 []       level.
    0b []       store minimum elemental influence here (0 - death, 2 - 200%damage, 3 - normal, 4 - 50%damage, 5 - 0%damage, 6 - 100%absorb, 7 - fully recover)
    + 0c []       formation number. Init with 0. If we init second unit of this type we increment this value by 1 for this unit. If 6 same unit on field they will have 0,1,2,3,4,5 as this value. Set player character id + 0x10 in case of player.
    + 0d []       attack power (strength in enemy data format).
    + 0e []       magic power (magic in enemy data format).
    + 0f []       set evade from armor in case of player (defense% in game).
    + 10 []       init with 0. Set 0x10 during player init. Init with 0 in case of enemy. Idle action id.
    + 11 []       init with 5 in case of player. Init with 1 in case of enemy. Hurt action id.
    + 12 []       back damage multiplier. (usually 0x10).
    13 []       model scale (just changing doesn't work)?. init with 10.
    + 14 []       dexterity.
    + 15 []       luck.
    + 16 []       init with 0 in case of player.
    17 []       store 0xff here at start of battle_main_damage_calculation. Index of character that we cover.
    18 [][]     attack mask set during run command.
    1a [][]     - some mask (maybe mask of those who attack this unit)
    + 20 [][]     defense. Multiplied by 2 in case of enemy.
    + 22 [][]     magic defense. Multiplied by 2 in case of enemy.
    + 24 [][]     init with 0xffff. Set enemy id here.
    26 [][]     elements mask. add this to absorb elements mask during damage calc.
    + 28 [][]     current MP.
    + 2a [][]     max MP.
    + 2c [][][][] current HP.
    + 30 [][][][] max HP.
    + 44 [][][][] init with 0. Store status of this unit here during initialization.
    + 4c []       init with 1.
    + 4d []       set magic evade (magic defense% in game) from armor equipped in case of player.
    + 4e []       store row from battle formation here during init.
    + 4f []       init with 0xff.
    + 50 [][]     init with 0.
    + 52 [][]     init with 0xffff.
    54 [][]     elements mask. add this to no damage elements mask during damage calc.
    + 56 []       store 2 here during init in case of enemy. Init with 8 in case of player.
    56 [][]     ap.
    + 58 [][][][] gil.
    + 5c [][][][] exp.

800f87f0 temp variable unit data structure. (size 0x80). (address 0x0000).
800f89f0 enemy part. Init whole structure with 0.
    +00 []       set to 0 at start of ai cycle
    +04 []       set to 0 at start of ai cycle
    +08 []       set to 0 at start of ai cycle

800f8cf0 []       set to 0 in 0xf7 action opcode

800f9980 []       number of players units in battle.

800f99e8 []       store target id here (used in animation opcodes).

800f99ec array where we store data for futher use during F7 animation opcode (attack impact). (0xc size)
+00 [][]     damage.
+02 [][]     1f800220 damage flags (heal critical damage to mp).
+04 [][]     impact sound.
+06 [][]     impact effect id.
+08 [][]     store 800fa9d0 + 3 index here.
+0a []       ???

800f9d94 []       init with 0.
800f9d98 []       init with 0.
800f9d9c []       init with 0.

800f9da8 some array (0x40 items 0x6 size)
    +0 [][]     string index in buffer + 0x100
    +2 [][]     ???
    +4 []       string argument
    +5 []       ???

800f9f28 [][][][] array of somethinf (0x3 items). All inited with 0.

800f9f3c               temp additional array where we store data for attack impact.
+0 [][]     target id.
+2 [][]     damage.
+4 [][]     1f800220 damage flags (heal critical damage to mp).
+6 [][]     current target hp.
+8 [][]     current target mp.
+a [][]     impact sound.
+c [][]     impact effect id.

800fa614 we get translation vector for field matrix here

800fa63c matrix user for field render. Camera matrix.
    +20 [][]     rotation X
    +22 [][]     rotation Y
    +24 [][]     rotation Z
    +28 [][]     translation X
    +2a [][]     translation Y
    +2c [][]     translation Z

800fa69c [][]     mask of units covered with magic barrier.
800fa6d0 []       store formation type id here. +12[] in battle setup 1.
800fa6d4 []       we store target unit id here during attack. Used in effects animation opcodes. Init with 0.

800fa6d8 some secondary animation unit struct 0x40 size. In this structure can be more than 1 bone (bone data 0x34) but it seems that here will be error in this case. And seems all models has only 1 weapon bone.
    +00 []       we store 1 if secondary animation in process, 0 if we need to read ot from start.
    +04 [][][][] pointer to some data in [last file in model file - 1]
    +08 []       some additional bone flags (0x1 size).
                 0x08 - add this in die effect 0.
    +28 [][]     rotation X.
    +2a [][]     rotation Y.
    +2c [][]     rotation Z.
    +30 [][]     translation X. Init with 0.
    +32 [][]     translation Y. Init with 0.
    +34 [][]     translation Z. Init with 0.
    +3c [][]     number of bones in secondary animations.
    +3e [][]     init with 0.



800fa958 primary camera matrix (orthonormal). Multiplied with field matrix.

800fa978 some array of 4bytes value. Store 800fa978 here if it == 0 during 0xe8 camera opcode (0x10 slots). Maybe camera function.
800fa9bc [][]     increment by 1 every time we add element to 800fa978.

800fa9c0 []       store target id here during executing hurt effect.

800fa9d0 temp array where we store data for attack impact (animation related). Every time we tried to receive pointer via "funca2fd0" we move to next struct element. (size 0xc)
+00 []       store target id here.
+01 []       store attacker id here.
+02 []       Set hurt animation script here from 1f8000224.
+03 []       store -1 here during pointer reciving. Store here index of 800f9f3c additional array.
+04 [][]     init with 0. Add some flags later.
                0x0001 - add if we do damage.
+08 [][][][] store current status of target.

800fafd0 [][][][] init with "0" string (0x10)

800fafdc []       init with 0.
800fafe0 []       store attacker id here.

800faff4          depth queue for packets.

801031e0 []       init with 1.
801031e4 []       bool that indicates that we must transit from current camera to camera from battle setup.
801031e4 [][][][] store 0 here during battle init.

801031e8 [][]     camera start X.
801031ea [][]     camera start Y.
801031ec [][]     camera start Z.

801031f0 []       store 1 here if number of targets greater than 1.

80130200 model and animation block copied here.

8013699c snimation description block of first enemy model.



80151200 some model struct 0x74 size.
+00 [][][][] ???
+04 [][]     init from +44 from animation description block.
+06 [][]     init from +46 from animation description block.
+08 [][]     init from +48 from animation description block.
+0a [][]     init from +4a from animation description block.
+0c [][]     some flags.
+0e [][]     init from +4c from animation description block.
+10 [][]     init from +4e from animation description block.
+12 [][]     init from +50 from animation description block.
+14 [][]     init from +52 from animation description block.
+16 [][]     init from +54 from animation description block.
+18 [][]     init from +56 from animation description block.
+1a [][]     init from +58 from animation description block.
+1c [][]     init from +5a from animation description block.
+1e [][]     init from +5c from animation description block.
+20 [][]     init from +5e from animation description block.
+22 [][]     init from +60 from animation description block.
+24 [][]     init from +62 from animation description block.
+26 [][]     init from +0c from animation description block.
+28 [][]     init from +0e from animation description block.
+2a [][]     init with [+0c] - 0x384 from animation description block.
+2c [][]     delayed rotation for target. We will use this data when target will be hitted.
+2e [][]     init with 0.
+30 [][]     init from +64 from animation description block.
+32 []       unit index (0, 1, 2 for player, init with 0 for enemy). Init with 0. If this == 6 then we use enemy with id 6.
+34 []       store 0 here during battle init.
80151236 []       reset to 0 at start of idle and then increment this each frame.

801516a0 [][]     init with 0.

801516f4 []       we copy id of camera position/direction vector struct from here to 800f837c.

80151774 [][]     Target mask.

801517c0 [][][][] store 800faff4 here during battle init. offset to packet depth queue.
801517c4 []       init with 0.

801517f0 [] array of 0x4e elements of some unit id.

80151844 struct for camera position vector (0xe size).
+00 [][]     X
+02 [][]     Y
+04 [][]     Z
+08 []       init with 0xff.
+0d []       init with 0. Smooth or linear transition. 0x0 - smooth, 0x1 - linear

801518a4 struct for camera direction vector (0xe size).
+00 [][]     X
+02 [][]     Y
+04 [][]     Z
+08 [][]     camera script pointer. Init with 0.
+0a [][]     init with 0. Wait timer.
+0c []       init with 0. Smooth or linear transition. 0x0 - smooth, 0x1 - linear



801518dc []       if this is not 0 then something is loading in background.

801518e4 struct for 3d models (0xb9c size). 0x00-0x09 parts of battle field.
80154754 enemy starts here
+000 [][]     init from +00 from animation description block in case of player.
+002 [][]     action id. If this == bu[80163784 + unit_id] we do some specific treatment with animation.
+004 [][]     action id to perform. We copy action id from here to actual. As I see used for delayed hurt action while it wait to sync with attacker.
+006 [][]     scale of model.
+008 [][]     Init from +06 from animation description block.
+00a [][]     Init from +08 from animation description block.
+00c [][]     Init from +0a from animation description block.
+00e [][]     animation to play.
+010 [][]     number of bones in model.
+012 [][]     collision radius. Init from +04 from animation description block. Used when calculated how much move to target to hit it.
+014 [][]     alpha for additional color.
+018 [][]     default rotation.
+022 []       effect id from attack that we use. Init with 0.
+023 []       store here action id we performing. (0x20 - enemy attack, 0x2 - magic)
+025 []       some flags (add 0x80 byte if 801518e6 == 0x39)
+026 []       init with 1.
+027 []       is &80 then we play secondary animation. Init from +02 from animation description block. Add 0x40 bit here if +00 in animation block != 0.
+028 []       R additional color.
+029 []       G additional color.
+02a []       B additional color.
+02b array of joints (size 0x01 items 0x10).
+03b []       init with 1.
+03c []       pointer in current action script. Init with 0.
+03d []       init with 0. Frames to wait.
+03e []       some flags.
                add 0x01 when we add hurt actions.
                add 0x02 if we want unit to disappear.
                add 0x04 if we want unit to appear.
                add 0x20 at 0x4 or 0x5 hurt type action.
+03f array of some bone flags (0x1 byte size).
    +00 []       some flags.
                 0x08 - add this in die effect 0.
+074 []       we store 1 if animation in process, 0 if we need to read ot from start.
+078 [][][][] array of pointers to bone data in model file (0x4 size).
+140 [][][][] pointer to struct with field background rotation and translation (or some other matrixes in special cases)
+160 [][]     Root rotation X.
+162 [][]     Root rotation Y. Seted in 0xfc animation opcode (0800(look right) or 0000 (look left)).
+164 [][]     Root rotation Z.
+168 [][]     Root translation X. Used in 0xfc animation opcode.
+16a [][]     Root translation Y.
+16c [][]     Root translation Z. Used in 0xfc animation opcode.

+174 start of data where we store translation and rotation in secondary animation (0x34 size for each bone)
    +14 [][][][] real translation X.
    +18 [][][][] real translation Y.
    +1c [][][][] real translation Z.
    +20 [][]     rotation X.
    +22 [][]     rotation Y.
    +24 [][]     rotation Z.
    +28 [][]     translation X.
    +2a [][]     translation Y.
    +2c [][]     translation Z.
    +30 [][][][] offset to parent.

80153c74      [][][][] some pointer used in unctnown function funcba360. Looks like packet drafts offset.

80158d00 [][]     camera end X
80158d02 [][]     camera end Y
80158d04 [][]     camera end Z

801590cc []       store attacker id here (used in animation opcodes). Init with 0.
801590d0 [][]     get movement callback here for execute.
801590d4 [][]     we get here id for effect to render.
801590d8 []       init with 0.
801590dc []       if this not 0 then we will not call camera script.
801590e0 []       index in 80163798 struct. Init with 0.
801590e4      copy 8d04 bytes of field data file here. Battle field file

80161de8 [][]     some target mask. Looks like dead targets.

80162084      [][]     store 0200 here during battle init.

8016209c      [][][][] store offset to first mesh sector in battle field here.

801620a0 []       init with 0.
801620a4 []       init with 0.
801620a8 [][][][] init with -1;



801620ac array of data for unit movements callbacks. Callback function itself 80163b48. (0x20 size)
+02 [][]     stage. 0 - init, 1 - inited.
+04 [][]     steps.
+06 [][]     Y movement by step.
+08 [][]     unit id.
+0a [][]     target id.
+0c [][]     X movement by step.
+0e [][]     Z movement by step.
+10 [][][][] 2nd argument in D1 function.
+14 [][][][]
+18 []       store byte from 80166f58 here. We wait this number of frames before start movement.
+19 []
+1a []



801621f0 effects callback data table. (0x20 size)
// 800d061c
+04 [][]     frames to wait.
+06 [][]     argument 2
// 800d3af0 machinegun splash
+04 [][]     position X.
+06 [][]     position Y.
+08 [][]     position Z.
+0e [][]     some value 200 or 400
+10 [][]     some value 400 or 800
// 800d3bf0 foot_dust part
+00 [][]     id of effect.
+02 [][]     step (if 7 then we stop play this effect)
+04 [][]     position X.
+06 [][]     position Y. Set to 0 because we want it always be on ground.
+08 [][]     position Z.
+0e [][]     X scale.
+10 [][]     Y scale.
// 800d3d88 foot_dust
+00 [][]     unit id.
+02 [][]     counter for effect (4 will end effect)
+0e [][]     X scale.
+10 [][]     Y scale.
// 800d7368 machinegun shell
+00 [][]     init with 0.
+06 [][]     attacker id.
+08 [][]     position X.
+0a [][]     position Y.
+0c [][]     position Z.
+10 [][]     direction vector X.
+12 [][]     direction vector Y.
+14 [][]     direction vector Z.
+18 [][]     attacker Y rotation.
// 800d751c machinegun fire&light light
+00 [][]     bool for effect color (808080 or 202020).
+08 [][]     position X.
+0a [][]     position Y.
+0c [][]     position Z.
// 800d7888 machinegun fire&light
+02 [][]     current frame.
+04 [][]     target id (destination of effect)
+06 [][]     attacker id (source of effect)
+1a [][]     distance from joint.
+1c [][][][] attached bone matrix offset.
// 800d7888 machinegun
+02 [][]     current frame.
+04 [][]     target id (destination of effect)
+06 [][]     attacker id (source of effect)
+08 [][]     frame at which start effect.
+0a [][]     frame at which stop effect.
+1a [][]     distance from joint.
+1c [][][][] attached bone matrix offset.



80162974 []       init with 0.



80162978 damage callbacks. (0x20 size)
// 800ce7e0
+04 [][]     frames to wait.
+08 [][]     target id.
+0a [][]     damage.
+0c [][]     attacker id.
+0e [][]     damage flags  (0x0001 - heal, 0x0002 - critical damage, 0x0004 - damage to MP).

// 800ce970
+04 [][]     store 0 here.
+06 [][]     hu[800f99f4 + A0 * c]
+08 [][]     unit id.
+0a [][]     damage value.
+0c [][]     attacker id.
+0e [][]     damage flags  (0x0001 - heal, 0x0002 - critical damage, 0x0004 - damage to MP).
+10 [][]     impact sound id.
+14 [][]     impact effect id.
+18 []       1 if we don't want to display damage. 0 otherwise.
+19 []       bu[800f99f6 + A0 * c]
// 800d5350 function seted in additional effect routine.
+00 [][]     index of current unit. Init with 0.
+02 [][]     frame counter.
+04 [][]     target mask.
+06 [][]     attacker id.
+08 [][]     time to wait before call function for next unit in mask.
+0c [][][][] function to call.
// 800d57c0 function in f7 action opcode.
+00 [][]     store 0 here if we call F7 animation opcode. Looks like current unit id.
+02 [][]     current wait time. Increments by one every check.
+04 [][]     frames to wait.
+06 [][]     store 1 here.
+08 [][]     target mask.
+0a [][]
+0e [][]
+10 [][]     store impact sound id here.
+1a [][]
+1c [][][][]
// fire 801b0000
+08 [][]     position X.
+0a [][]     position Y.
+0c [][]     position Z.
+12 [][]     0 - target collision radius.
// fire 801b00b8
+02 [][]     frame counter.
+04 [][]     target id.
+06 [][]     init with 0. Bone id we attach fire effect to.
+12 [][]     0 - target collision radius.

80163608 [][]     mask of units covered with physical barrier.

8016360c data from scene file.
    +00 [][]     enemy 1 id.
    +02 [][]     enemy 2 id.
    +04 [][]     enemy 3 id.
    +06 [][]     0xffff from scene file.
    +08 [][]     location id.
    +0a [][]     after victory begin battle with this id.
    +0c [][]     escape counter.
    +0e [][]     0xffff from scene file.
    +10 [][]     1st formation id of candidates for next arena battle.
    +12 [][]     2nd formation id of candidates for next arena battle.
    +14 [][]     3rd formation id of candidates for next arena battle.
    +16 [][]     4th formation id of candidates for next arena battle.
    +18 [][]     escape flags.
                    Some flags checked as &10 during enemy init.
                    If (this & 4) == 0 then add 0x08 to previous battle result.
                    Make this & fffb if previous battle result &08.
                    Add 0x04 bit to this if previous battle result &40.
    +1a []       formation type id.
                    Used for load camdat (0,1,8 - CAMDAT0.LZS, 2 - CAMDAT1.LZS, 3,4,5,6,7 - CAMDAT2.LZS).
                    Checked if this ==0 during enemy init and store 1 here if few conditions met.
                    00 - Normal fight
                    01 - Preemptive
                    02 - Back attack
                    03 - Side attack (we surround enemy)
                    04 - Attacked from both sides (pincer attack, reverse side attack)
                    05 - Side attack (we surround enemy)
                    06 - Side attack (we surround enemy)
                    07 - A third side attack
                    08 - Normal battle that locks you in the front row, change command is disabled.
    +1b []       init camera script id.
    +1c array of battle camera setup. (0x4 items 0xc size). 80163b3c - index for those.
        +00 [][]     start camera X
        +02 [][]     start camera Y
        +04 [][]     start camera Z
        +06 [][]     end camera X
        +08 [][]     end camera Y
        +0a [][]     end camera Z
    +4c array of enemies for current battle formation. (0x6 items 0x10 size)
        +00 [][]     enemy id. Set with index (0,1,2)
        +02 [][]     x
        +04 [][]     y
        +06 [][]     z
        +08 [][]     row
        +0a [][]     binary "Cover flags"
        +0c [][][][] &0000001f unit states (set to +4 in unit structure). Store status of enemy here from +4 0x68 structure.

801636b8 units structure (size 0x10)
    00 []       init with -1. If this is not -1 and player not dead we execure ai script 0.
    01 []       idle action id. in case of enemy init with +10 from 0x68 structure (there is 0 there).
    02
    03
    04 []       dead effect. Init from 801518e4+27 & 3f.
    05
    06 [][]     backrow? In case of player store w[800f83e0 + A3 * 68 + 4] & 1 here for battle types 0,1. Store !(w[800f83e0 + A3 * 68 + 4] & 1) for battle 2 and 0 for battle types 3,4,5. Function func1b19ac.
    08 [][][][] we copy 0x0fffffff of unit status here during battle every cycle.
    0c
    0d
    0e
    0f

80163758 [][]     all enabled units.
8016375a [][]     unit mask. Seems to init with all posible enabled units in battle_update_unit_mask.
8016375c [][]     not covered units mask (short range accessable units). Set in battle_update_unit_mask.
8016375e [][]     store all enabled units here.

80163762 [][]     unit mask. Add players with limit break.

80163766 [][]     dead units mask.
80163768 [][]     mask with units with 00000010 flag in +4 unit structure 0x68. There is no units like this at start of battle. Autoscript.
8016376a [][]     store previous battle result here. If this is 0x40 then set battle location to 0x25 (arena battle).
                    0x0004 - maybe escaped from prev battle. If next battle is normal and escape flag 0x0010 then set battle to preemptive.

8016376e [][]     right fighters mask.
80163770 [][]     middle fighters mask.
80163772 [][]     left fighters mask.

80163780 [][]     store here last mask with enemy units in case of battle type 4 (0 - there is no enemy in right mask, 1 - there is no enemy in left mask, 2 - enemies in both masks)
80163784 one byte unit array with idle? actions id for each.
80163790 [][][][] party slots data.



80163798 array of some struct to where we store data. Probably action to perform. Every time we tried to receive pointer via "funca2f4c" we move to next struct element. There can be 0x40 actions at once (size 0xc)
    // 2 - string to display
    +00 []       id of unit that init action. (sometimes set to 0xa)
    +01 []       2. Type string.
    +02 []       init with 0.
    +03 []       init with 0.
    +05 []       argument of fucnction battle_add_string_to_display than add this. Sometimes set to 1.
    +06 [][]     string index + 0x100.
    +08 [][]     0xffff.
    +0a [][]     0xffff.
    // 5 - ???
    +00 []       init with 0xff. Set attacker id here.
    +01 []       set 5 here. Set 1f80001c from temp attack here.
    +02 []       store 0 here during pointer reciving. Set attack effect id here (1F800024).
    +03 []       store 0 here during pointer reciving. Store 1f800028 (action id) here
    +04 []       set 0 here.
    +05 []       set 0 here. We store animation action id here.
    +06 [][]     set 0 here. Set attack id here (1f800098).
    +08 [][]     set 0xffff here. Set camera movement id here.
    +0a [][]     current index in 800f3948. set 0xffff here.

80163b38 []       init with 0.
80163b3c []       store 0 here during battle init. This is index to battle camera data in battle setup

80163b44 [][]     state variable for battle field animation structure.
80163b46 [][]     state variable for battle field animation structure. Init with 0x10.

80163b48 array of callback functions for unit movement.

80163b84 [][][][] array of 4 bytes elements (size 0x20). Looks like offsets to effects to play. Related to 801621f0 struct.
    value: 800d7888 - mashinegun effect

80163c7c []       init with 0.

80163c80 array of default positions for units. (0x6 size)
+0 [][]     X.
+2 [][]     Y.
+4 [][]     Z.

80163f30 []       Init camera script id. +13[] from battle setup 1.

80166f58 []       init with 0.

80166f74 []       number of rows in battle item menu. Minimum 3.

80166f78 some structure where we store manipulate attacks from monster (size 0x6, 0x10 per monster (only 0-2 inited as manipulate, others inited with base value0xff 0 0 3))
    +00 []       local attack id (global used in whole game but after load we index into loaded array)
    +01 []       init with 0.
    +02 []       target flags. Switch 0x02 in mamipulate attack.
    +03 []       init with 3. Set 0 here if attack is added.
    +04
    +05

801671b8 battle item struct. (0x6 size)
    +00 [][]     item id.
    +02 []       item quantity.
    +03 []       target type
    +04 []       item command restriction & b.

80167938 copy here whole savemap character data during battle init.








1f800000 [][][][] unit id.
1f800004 [][][][] reading offset.
1f800008 [][][][] stack pointer.
1f80000c [][][][] store opcode here.
1f800010 [][][][] store opcode lower 4 bits here. (X & F).
1f800014 [][][][] store opcode high 4 bits here. (X >> 4).
1f800018 [][][][] 1st slot data_type.
1f80001c [][][][] 2nd slot data_type.
1f800020 [][][][] 1st slot variable_type.
1f800024 [][][][] 2nd slot variable_type.
1f800028 [][]     1st slot to store mask for getting unit params.
1f80002a [][]     2nd slot to store mask for getting unit params.
1f80002c [][][][] 1st array to store result of load. (0xa elements).
1f800054 [][][][] 2nd array to store result of load. (0xa elements).
1f80007c          stack. (pointer in w[800f4ac4] + 08)



1f800000 attacker id.
1f800004 attacker level
1f800008 init with -1. Store enemy index here if this is enemy attack.
1f80000c action id. (0x20 - enemy attack)
1f800010 attack index
1f800014 init with -1. Store attacker id here if specified attack was magic, summon or enemy skill and player has it.
1f800018 target mask
1f80001c init with 1. Active Allies???
1f800020 animation script id to play.
1F800024 copy D byte from attack data here. (Attack effect id)
1f800028 action id.
1f80002c attack id.
1f800030 attacker mask.
1f800038 -1. MP cost.
1f80003c hit%
1f800040 damage formula id (default action damage formula id). Copy weapon damage formula id here.
1F800044 attack elements mask.
1f800048 power modifier.
1f80004c base damage.
1F800050 init with 0xFF. Set target type data from kernel if action id < 0x20. Target type data. (self/all/1target)
1f800054 init witn -1. Copy 6th byte from attack data here (normal attack sound).
1f800058 init with -1. Copy 6th byte from attack data here (critical attack sound).
1f80005c init with -1. Copy 6th byte from attack data here (miss attack sound).
1f800060 init with -1. Load default 8th byte here. Copy 8th 2bytes from attack data here or 0x0c from weapon attack. (Camera movement single).
1f800064 init with -1. Load default Ath byte here. Copy Ath 2bytes from attack data here or 0x0c from weapon attack. (Camera movement multiple).
1f800068 init with -1. Impact effect id.
1f80006c init with -1. Special attack flags. 0x0004 - magic attack.
                                             0x0002 - if not set - add bit 0x2000 to 0x220
                                             0x0080 - if not set - ignore status effect defense when attempting to inflict.
                                             0x0200 - if not set - can be reflected
                                             0x0400 - if not set - ignore defense (if this bit is set we calculate defense)
                                             0x2000 - if not set - critical hit in case of physical damage calculation.
1f800078 we add here target unit mask for current damage calculation if we not attacking self.
1f800080 status to add.
1f800084 status to remove.
1f800088 status to change.
1f80008c init with FF. Status infliction chance (0-255).
1f800090 something from 800a0002 (default action flags). (00000002 - flag checked in funcaa738 function.
                                                          00000004 - if steal as well need to be performed.
                                                          00000010 - check if this == 0 in funcab674 function.
                                                          00000040 - if hp absorb need to be performed.
                                                          00000080 - if mp absorb need to be performed.
                                                          00000200 - seted if there is no target (for player) or more than one target)
                                                          00000800 - if add cut need to be performed.
                                                          00020000 - add if long range materia equipped in something related to target rows in funcab674.
                                                          00080000 - if this flag is set - do something in action_type_09 function.
                                                          00400000 - add bit if unknown data in large function file exist. Reduce mp cost to 0.
                                                          00100000 - add bit if no mega all stars left (force single target?).
                                                          01000000 - if this bit is set we can attack dead units too.
1f800094 target mask
1f800098 attack index. Attack index in group magic summon enemy skill, limit or attack index in scene data.
1f8000a0 formula upper
1f8000a4 formula lower
1f8000a8 reset it after action if we use sense.
1f8000ac store high byte of unknown data seted in large_function file + 3 if it not 0 (if greater than 8 store 8). Quater damage.
1f8000b0 number of multiple attacks.
1f8000b4 init with 1. Time to caclulate whole cycle of attack (only for 2x and 4x cut).
1F8000b8 number of targets (counted with target mask).
1f8000bc init with -1. Copy 12th byte from attack data here (Additional effects). Set this with special byte related to lower damage function if upped damage function 0xa.
1F8000c0 copy 13 byte from attack data here (additional effect modifier).
1f8000c4 store power modifier here.
1f8000c8 attacker status.
1f8000cc copy 2nd byte from attack data here. Hurt action id?
1f8000d0 init with 0xFFFFFFFF.
1f8000d4 init with 0xFFFFFFFF.
1f8000d8 *2 used in 0x09 lower formula as base damage.
1f8000dc init with -1. String to display.
1f8000e0 init with 0. This is increment when we do damage.
1f8000e4 init with -1.
1f8000e8 set ((w[1f8000f0] >> 5) * 0xa) if w[1f8000f0] & 0xe0 != 0. Mp Turbo stars * 0xa. Mp boost%
1f8000ec store target mask here.
1f8000f0 store lower byte of unknown data seted in large_function file. Set flags (0x01 - mp absorb, 0x02 - hp absorb, 0x08 - steal as well, 0x10 - added cut) from unit data for actions that we perform if priority 5 or 6.
1f8000f4 store current unit id here in damage cycle.
1f8000f8 store high byte of unknown data seted in large_function file here if it not 0.
1f8000fc copy number of multiple attacks here.
1f800200 address 800f5bb8 + target * 44.
1f800204 address 800f5e60 + target * 34 or -1 in case of not player.
1f800208 target entity id.
1f80020c store -1. Set enemy index here (1 2 3) (only in case of enemy).
1f800210 init with 0. Calculated defense.
1f800214 init with 0. Calculated damage.
1f800218 init with 1f800090 flags. 0x0001 if we have power modifier 0 and we not add/remove/change statuses and if unit is undamagable (auto-miss).
                                   0x0002 add this bit in case of lower function 0 or if we done no damage.
                                   0x0020 then we hit target for sure in case of physical attack.
1f80021c init with 0.
1f800220 init with 0. attack flag. (0x0001 - heal, 0x0002 - critical damage, 0x0004 - damage to MP)
1f800224 store hurt action id. Store 33 here if 1f800048 == 0.
1f800228 target status.
1f80022c target status immunities mask.
1f800230 init with 0. mask of immunities to current attack (0x01 - death, 0x04 - double, 0x10 - half, 0x20 - nullify, 0x40 - absorb, 0x80 - full cure)
1f800234 init with 0. flags. 0x0001 - attack from back
                             0x0002 in funcb0c14 in upper_function_00.
1f800238 init with 0. Copy status to add here.
1f80023c init with 0. Copy status to remove here. Flags based on statuses of target. 0x0004 - target sleeps.
                                            0x0040 - target confused
                                            0x00a0 - target is manipulated
1f800240 init with 0. Copy status to change here.
1f800244 init with 0. Statuses to add/remove/change (united mask).
1f800248 init with -1. Store attack (impact sound here).
1f80024c init with -1. Store impact effect id here.
1f800250 init with -1. store fffffffe here if need to we kill target instantly (due to 1f800230 death). fffffffd if we recover. Or copy damage here from 1f800214.
1f800254 init with target level.
1f800258 init with target current hp.
1f80025c init with target current mp.
1f800260 init with 1f80003c hit%.



// animation case
1f800020 []       store 1 here at start of animation big function
1f800021 []       we take animation to play from here.
1f800024 [][][][] we store different offsets here (800eeaa0) acording to 801518e6.
1f80002c [][]     we store &f0 from weapon model id.
1f80002e [][]     we store 4, 5 or 6 here acording to &f0 from weapon model id.