80018088 [][][][] init with 6. Looks like game mod (battle map ie).

8004e948 array if file indexes in dir 0_1.

8004e97c kernel cursor position.

8004e998 [][][][] init with 0.
8004e99c [][][][] init with 0.
8004e9a4 [][][][] 0 - dont show software credits
8004e9a8 [][][][] init with 0.
8004e9ac [][][][] init with -1. (-1 during battle load.)
8004e9b0 [][][][] init with 0.
8004e9b4 [][][][] init with 0.
8004e9b8 [][][][] init with 0.
8004e9bc [][][][] init with 0.
8004e9c0 [][][][] init with 0.
8004e9c4 [][][][] init with 0.
8004e9c8 [][][][] init with 000000ff. Store here value from 800b1774 + encounter * 2.
8004e9cc [][][][] init with 000000ff.
8004e9d0 [][][][] init with -1. If this is 0 then 10\0590.sed already loaded into temp buffer and we can copy it.
8004e9d4 [][][][] init with -1. Looks like current field.
8004e9d8 [][][][] init with -1. After field load and set to 0 when start field load.
8004e9dc [][][][] music. Init with -1. Compare this with value from 800b1774 + encounter * 2 during battle load.
8004e9e0 [][][][] wave. Init with -1.
8004e9e4 [][][][] init with -1.
8004e9e8 [][][][] init with 0. Load some textures in file 0xa7 for field.
8004e9ec [][][][] init with 0. Store here 1 in some cases during battle load.
8004e9f0 [][][][] init with -1. Field id to load.
8004e9f4 [][][][] init with 0.
8004e9f8 [][][][] init with 0.
8004e9fc [][][][] set to 1 when we start loading of music.
8004e9a0 [][][][] init with 0.
8004ea00 [][][][] init with 0.
8004ea04 [][][][] init with 0.
8004ea08 [][][][] init with 1.
8004ea0c [][][][] init with 0.
8004ea10 [][][][] init with 0.
8004ea14 [][][][] init with 0.
8004ea18 [][][][] init with 0. Set to 1 if some memory inited.
8004ea1c [][][][] init with 0. Draw compass.
8004ea20 [][][][] init with 0. Draw sprites.
8004ea24 [][][][] init with 0. Draw 3d models?
8004ea28 [][]     init with 0.

8004f23c store 4 points xyz for sprite tile during calculation in func1e264
    +00 [][] x0
    +02 [][] y0
    +04 [][] z0
    +06 [][]
    +08 [][] x1
    +0a [][] y1
    +0c [][] z1
    +0e [][]
    +10 [][] x3
    +12 [][] y3
    +14 [][] z3
    +16 [][]
    +18 [][] x2
    +1a [][] y2
    +1c [][] z2
    +1e [][]

8004f25c matrix used to render sprite.

8004f488 [][][][] N1 error when read sector and requested sector not equal.
8004f48c [][][][] N2
8004f490 [][][][] N3
8004f494 [][][][] pointer to 0x80010004 (file with data about files and directories). File "cdrom.mdg"
8004f498 [][][][] pointer to 0x80018004 (dir->file number). File "cdrom.fid"
8004f49c [][][][] file size left to cdrom load.
8004f4a0 [][][][] number of files to cdrom load.
8004f4a4 [][][][] ???
8004f4a8 [][][][] current file sector to cdrom load.
8004f4ac [][][][] pointer to allocated memory for file load.
8004f4b0 [][][][] 0
8004f4b4 [][][][] index 8004f4d0 of current texture stream. Cant exeed 8004f4e4.
8004f4b8 [][][][] start id of files in current dir.
8004f4bc [][][][] start id of files in current dir (stored for async cd loading).
8004f4c0 [][][][] cd state:
                    [1] CdlSetloc => [2] CdlReadN 80059b1c+1 (fail [a][4] CdlNop 80059b20+1 store_ready) => [0] unset 80059b1c+1 (fail [a][3] CdlNop 80059b20+1 store_ready)
                    [3] CdlSetloc => [4] CdlSeekL (fail [a][1] CdlNop ) => [0] unset (fail [a][1] CdlNop )
                    [6] CdlPause => [1] CdlSetloc param_800595ac 80059b18+1 80059b24+1 restore_ready (fail [a][3] CdlNop 80059b28+1) => [2] CdlReadN 80059b1c+1 (fail [a][4] CdlNop 80059b20+1 store_ready) => [0] unset 80059b1c+1 (fail [a][3] CdlNop 80059b20+1 store_ready)
                    [9] CdlSetmode => [5] CdlPause (fail [a][6] CdlNop 80059b44+1 ) => [0] unset (fail [a][2] CdlNop)
                    [a] CdlNop => [b] CdlGetTN (fail [a] CdlNop ) => 1 [3] CdlSetloc param_800595ac     (fail [a] CdlNop )
                                                                     2 [5] CdlPause
                                                                     3 [6] CdlPause
                                                                     4 [7] CdlStop
                                                                     5 [c] CdlSetmode param_800595b4
                                                                     6 [9] CdlSetmode param_800595b4
                    0x1 - CdlSetloc (load file)
                    0x2 - CdlReadN
                    0x3 - CdlSetloc (just set loc)
                    0x4 - CdlSeekL
                    0x5 - CdlPause
                    0x6 - CdlPause
                    0x7 - CdlStop
                    0x8 - CdlSetfilter
                    0x9 - CdlSetmode
                    0xa - fail command chain handle that call CdlGetTN to get track number.
                    0xb - fail command chain handle
                            0x1 - fail to CdlSetloc with start state 3.
                            0x2 - fail to CdlPause step of CdlSetmode with start state 9.
                            0x3 - 
                            0x4 - fail to CdlSetloc with start state 1.
                            0x5 - fail to CdlSetmode with start state 0xc.
                            0x6 - fail to CdlSetmode with start state 9.
                    0xc - CdlSetmode
8004f4c4 [][][][] sync result. Call different func in sync callback:
                    0x1 - CdlSetloc
                    0x2 - CdlPause
                    0x3 - CdlPause
                    0x4 - CdlStop
                    0x5 - CdlSetmode
                    0x6 - CdlSetmode
8004f4c8 [][]     
8004f4ca [][]     R. Total number of loaded stream parts.
8004f4cc [][]     D. Total number of loaded stream parts in whole load.
8004f4d0 [][][][] pointer to +4 part of 8004f4d4 struct.
8004f4d4 [][][][] pointer to some struct.
    +0 [][][][] size.
    items
    +0 [][]     texture stream part state:
                    0 - texture not loaded to main memory.
                    1 - texture loaded to main memory.
                    2 - texture load to vram started.
                    3 - finish loading file part.
    +2 [][]     number of this stream part.
    +4 [][]     init with 0. some size.
    +6 [][]     init with 0.
8004f4d8 [][][][] 0 when load file. 1 when disable cdrom.
8004f4dc [][][][] some func param (0). dir_file_id??
8004f4e4 [][][][] number of items for texture stream.
8004f4e8 []       init with 1.
8004f4e9 []       movie id to play.
8004f4ea []       init with 1.
8004f4eb []       init with 0.
8004f4ec [][][][] pointer to some debug filenames maybe files on working disk. They are not in release so debug wont work. File "cdrom.fnd"
                  0 - CD-ROM MODE1
                 -1 - CD-ROM MODE2
                  else - PC HDD MODE
8004f4f0 [][][][] init with -1. Some debug filehandler.

8004f4f4 data for load 3d data.
// load_poly functions
//                                                         18       1c       20       24
//00 8002DE48 8002EB30 8002E280 8002E6EC 8002DE48 8002DE48 8002CBDC 08000000 04000000 14000000 triangle monochrome (80058bd8)
//01 8002DE5C 8002F0F0 8002E294 8002E700 8002ED1C 8002EEF4 8002D624 08000000 08000000 20000000 triangle monochrome textured (d8)
//02 8002DE34 8002F4C4 8002E26C 8002E6D8 8002DE34 8002DE34 8002D4BC 08000000 04000000 1C000000 triangle gourad (80058bc8)
//03 8002DE20 8002F2C4 8002E258 8002E6C4 8002DE20 8002DE20 8002D824 08000000 08000000 28000000 triangle gourad textured (c8)
//04 8002DE48 8002DE48 8002E280 8002E6EC 8002DE48 8002DE48 8002CD44 08000000 04000000 14000000 triangle monochrome
//05 8002DE5C 8002DE5C 8002E294 8002E700 8002ED1C 8002EEF4 8002D794 08000000 08000000 20000000 triangle monochrome textured
//06 8002DE34 8002DE34 8002E26C 8002E6D8 8002DE34 8002DE34 8002D58C 08000000 04000000 1C000000 triangle gourad (c8)
//07 8002DE20 8002DE20 8002E258 8002E6C4 8002DE20 8002DE20 8002D824 08000000 08000000 28000000 triangle gourad textured (c8)
//08 8002E064 8002F6E0 8002E484 8002E8F0 8002E064 8002E064 8002CD68 08000000 04000000 18000000 quad monochrome (d8)
//09 8002E078 8002F8F8 8002E498 8002E904 8002FB0C 8002FD1C 8002D340 08000000 0C000000 28000000 quad monochrome textured (d8)
//0a 8002E050 8002E050 8002E470 8002E8DC 8002E050 8002E050 8002CF90 08000000 04000000 24000000 quad gourad (c8)
//0b 8002E03C 8002E03C 8002E45C 8002E8C8 8002E03C 8002E03C 8002D054 08000000 0C000000 34000000 quad gourad textured (c8)
//0c 8002E064 8002E064 8002E484 8002E8F0 8002E064 8002E064 8002CED0 08000000 04000000 18000000 quad monochrome
//0d 8002E078 8002E078 8002E498 8002E904 8002FB0C 8002FD1C 8002CEF4 08000000 0C000000 28000000 quad monochrome textured
//0e 8002E050 8002E050 8002E470 8002E8DC 8002E050 8002E050 8002CF90 08000000 04000000 24000000 quad gourad (c8)
//0f 8002E03C 8002E03C 8002E45C 8002E8C8 8002E03C 8002E03C 8002D054 08000000 0C000000 34000000 quad gourad textured (c8)

//00                   8002E280 8002E6EC                   8002CBDC 08000000 04000000 14000000 triangle monochrome (80058bd8)
//01 8002DE5C 8002F0F0 8002E294 8002E700 8002ED1C 8002EEF4 8002D624 08000000 08000000 20000000 triangle monochrome textured (d8)
//02 8002DE34 8002F4C4 8002E26C 8002E6D8 8002DE34 8002DE34 8002D4BC 08000000 04000000 1C000000 triangle gourad (80058bc8)
//03 8002DE20 8002F2C4 8002E258 8002E6C4 8002DE20 8002DE20 8002D824 08000000 08000000 28000000 triangle gourad textured (c8)
//04                   8002E280 8002E6EC                   8002CD44 08000000 04000000 14000000 triangle monochrome
//05 8002DE5C 8002DE5C 8002E294 8002E700 8002ED1C 8002EEF4 8002D794 08000000 08000000 20000000 triangle monochrome textured
//06 8002DE34 8002DE34 8002E26C 8002E6D8 8002DE34 8002DE34 8002D58C 08000000 04000000 1C000000 triangle gourad (c8)
//07 8002DE20 8002DE20 8002E258 8002E6C4 8002DE20 8002DE20 8002D824 08000000 08000000 28000000 triangle gourad textured (c8)
//08 8002E064 8002F6E0 8002E484 8002E8F0 8002E064 8002E064 8002CD68 08000000 04000000 18000000 quad monochrome (d8)
//09 8002E078 8002F8F8 8002E498 8002E904 8002FB0C 8002FD1C 8002D340 08000000 0C000000 28000000 quad monochrome textured (d8)
//0a 8002E050 8002E050 8002E470 8002E8DC 8002E050 8002E050 8002CF90 08000000 04000000 24000000 quad gourad (c8)
//0b 8002E03C 8002E03C 8002E45C 8002E8C8 8002E03C 8002E03C 8002D054 08000000 0C000000 34000000 quad gourad textured (c8)
//0c 8002E064 8002E064 8002E484 8002E8F0 8002E064 8002E064 8002CED0 08000000 04000000 18000000 quad monochrome
//0d 8002E078 8002E078 8002E498 8002E904 8002FB0C 8002FD1C 8002CEF4 08000000 0C000000 28000000 quad monochrome textured
//0e 8002E050 8002E050 8002E470 8002E8DC 8002E050 8002E050 8002CF90 08000000 04000000 24000000 quad gourad (c8)
//0f 8002E03C 8002E03C 8002E45C 8002E8C8 8002E03C 8002E03C 8002D054 08000000 0C000000 34000000 quad gourad textured (c8)
+18 - function to fill the packet.
+1c - size of polygon data.
+20 - size of tex data.
+24 - size of packets data.

8004f7a4 [][][][] shifter for depth sort OTZ.

8004f7ac [][][][] some tex page global setting. If 1 or 2 we use some default values.
8004f7b0 [][][][] some clut global setting. If 0 then we use some default values.

8004f834 clut for fonts (0x20 items).

8004f8a4 [][][][] init with 1. Buttons related.
8004f8a8 [][][][] init with 0. Buttons related.
8004f8ac [][][][] init with 0. Set to 1 if button buffer is overflow.

8004f8d0 [][][][] timer for repeated buttons for controller 1 (80058b40).
8004f8d4 [][][][] timer for repeated buttons for controller 2 (80058b44).

8004f8d8 []       init with 0. Button related.
8004f8d9 []       init with 1. Button related.
8004f8da []       init with 2. Button related.
8004f8db []       init with 3. Button related.
8004f8dc []       init with 4. Button related.
8004f8dd []       init with 5. Button related.
8004f8de []       init with 6. Button related.
8004f8df []       init with 7. Button related.

8004ff84 [][][][] address of SPU registers 0x1f801c00.

80050050 array of something (0x1 size).

80050134 array of something (0x1 size).

80055aa0 [][][][] 0x1f801100.

80055ab4 [][][][] set to 1 after gamepad init.

80055ac0 array of some data/checks for Cdl commands (size 0x04 items 0x20). Checked if not 0.

80055b48 [][][][] cd sync interrupt handler.
80055b4c [][][][] cd ready interrupt handler.

80055b54 [][][][] cd debug level.
                  0: no checks performed
                  1: check primitive commands
                  2: print execution status of primitive commands
                  3: print issued command error
80055b58 [][][][] stored cdrom status code (stat).
80055b5c [][][][] stored second response fifo. Init with 0.
80055b60 [][][][] increment by 1 when cdrom shell opened.
80055b64 stored cdlloc struct for CdlSetloc command.
    +0 []       minute.
    +1 []       second.
    +2 []       sector.
    +3 []       track number.
80055b68 []       stored param of CdlSetmode command.
80055b69 []       stored cdl command.

80055b70 array of pointers to Cdl commands strings (size 0x04 items 0x20).
         00 CdlSync      01 CdlNop       02 CdlSetloc    03 CdlPlay      04 CdlForward   05 CdlBackward  06 CdlReadN     07 CdlStandby
         08 CdlStop      09 CdlPause     0a CdlReset     0b CdlMute      0c CdlDemute    0d CdlSetfilter 0e CdlSetmode   0f ?
         10 CdlGetlocL   11 CdlGetlocP   12 ?            13 CdlGetTN     14 CdlGetTD     15 CdlSeekL     16 CdlSeekP     17 ?
         18 ?            19 ?            1a ?            1b CdlReadS     1c ?            1d ?            1e ?            1f ?
80055bf0 array of pointers to CD interupts result strings (size 0x04 items 0x8).
         00 NoIntr       01 DataReady    02 Complete     03 Acknowledge  04 DataEnd      05 DiskError    06 ?            07 ?
80055c90 array of reset 80055e29 cd ready interrupt result for Cdl commands (size 0x04 items 0x20).
        0 0 0 1 1 1 1 0
        0 0 0 0 0 0 0 0
        0 0 0 0 0 1 1 0
        0 0 0 1 0 0 0 0

80055d10 array of some data for Cdl commands. Checked during global response interrupt handling (0x4 size 0x20 items).
         0 01000000 01000000 01000000 01000000 01000000 01000000 01000000 01000000
         8 01000000 01000000 01000000 01000000 01000000 01000000 01000000 01000000
        10 00000000 00000000 01000000 01000000 01000000 01000000 01000000 01000000
        18 01000000 01000000 01000000 01000000 01000000 01000000 01000000 01000000

80055d90 array of number of arguments in Cdl commands (size 0x04 items 0x20).

80055e10 [][][][] cd_1800 (1f801800).
80055e14 [][][][] cd_1801 (1f801801).
80055e18 [][][][] cd_1802 (1f801802).

80055ee4 [][][][] some callback cd related.
80055f18 [][][][] some callback cd related.

80055e28 []       cd sync interrupt result.
80055e29 []       cd ready interrupt result.
80055e2a []       cd read interrupt result.

80055e2c address of cd init data.

80055ef8 [][][][] 200 - something.
80055efc [][][][] 

80055f70 []       gpu mode type (old commands or new commands).
                    0 - old cpu.
                    1 - enabled textures old gpu.
                    2 - disabled textures old gpu.
                    3 - enabled textures new gpu.
                    4 - disabled textures new gpu.
80055f71 []       init with 1.
80055f72 []       graph debug level.
                    0 No checks are performed. (Highest speed mode)
                    1 Checks coordinating registered and drawn primitives.
                    2 Registered and drawn primitives are dumped.
80055f73 []       graph debug reverse.
80055f74 [][]     max load image width.
80055f76 [][]     max load image height.
80055f78 [][][][] set draw flag to call draw sync callback when necessary.
80055f7c [][][][] draw sync callback pointer.

80055f80 draw enviroment (0x5c size).
80055fdc display enviroment (0x14 size).

80056018-80056028 MoveImage gpu packet static memory.
8005602c some default otag.

80056064 [][][][] current render queue transfer func.
80056068 [][][][] current render queue otag ptr.
8005606c [][][][] current render queue data src (data to transfer).

80056074 [][][][] index into render queue to insert.
80056078 [][][][] index into render queue to render 8006b4c4 8006b4c8 8006b4cc.
80056080 [][][][] store prev value of 1f801074 interrupt mask register here.

80056088 [][][][] store here current number of frames + 0xf0.
8005608c [][][][] init with 0.

800560a0 square root data (0x2 each). 12bit fixed point.

80056234

800566d0          rotation for angle 0 - 45 (each 2 bytes)

80056ee4 [][][][] previous timer1 value.
80056ee8 [][][][] store previous 80058000.

80056f44 clear 0x41a area when init interrupts.
80056f44 [][]     interrupt init flag. If inited set to 1 and never init again.
80056f46 [][]     flag that set when we inside interrupt exception handler.
80056f48 array of interrupt callbacks.

80056f74 [][]     interrupt callbacks mask.
80056f76 [][]     store interrupt mask register here during reset to default handlers.
80056f78 [][][][] store dma control register here during reset to default handlers.
80056f7c store custom interrupt handler here (registers).
80056f80 [][][][] init with 0x80057f5c.

80057fcc [][][][] pointer to some func callbacks (80057fac).
    + 0 80019468
    + 4 system_dma_additional_callback_inter()
    + 8 system_int_set_interrupt_callback_inter()
    + c system_interrupts_timer_dma_initialize_inter()
    +10 8004bb98
    +14 system_main_timer_additional_callback_inter()
    +18 8004bc44
    +1c 80056f44
80057fd0 [][][][] 1f801070 interrupt status register.
80057fd4 [][][][] 1f801074 interrupt mask register.
80057fd8 [][][][] 1f8010f0 dma control register.
80057fdc [][][][] interrupt timeout timer.
80057fe0 array of 8 callbacks called everytime when wait timer updates (0x4 size).
            4 - set with system_call_main_timer_additional_callback_4();

80058000 [][][][] frame timer.
80058004 [][][][] 1f801114 Timer 1 Counter Mode (R/W)
80058008 [][][][] 1f8010f4 address for flags for enabling dma callbacks.
8005800c array of dma callbacks.
80058030 [][][][] set to 0 during game init.
8005803c [][][][] store irq9 spu command completed event here.
80058040 [][][][] init with 0.
80058044 [][][][] init with 0.
80058048 [][][][] reverb master enable(1)/disable(0).
8005804c [][][][] if this 1 when we enable reverb master else check whether the reverb area is available.
80058050 [][][][] sound ram reverb work area start address.
80058058 [][][][] init with 0. Current reverb type.
8005805c [][]     stored reverb output volume left.
8005805e [][]     stored reverb output volume right.
80058060 [][][][] reverb delay for Echo and Delay type reverb. Init with 0.
80058064 [][][][] reverb feedback for Echo and Delay type reverb. Init with 0.
80058068 [][][][] init with 0.
8005806c [][][][] init with 0.

800584a0 [][][][] init with 0.
800584a4 [][][][] spu event registered. Store 1 when register.
800584a8 [][][][] 1f801c00 start of spu registers.
800584b8 [][][][] 1f8010f0 dma control register.
800584c0 [][]     sound ram data transfer address. Set to 0x0200 during spu init.
800584c4 [][][][] init with 0.
800584c8 [][][][] init with 0.
800584cc [][][][] init with 2.
800584d0 [][][][] shifter for spu address. Init with 3.
800584d4 [][][][] init with 8.
800584d8 [][][][] init with 7.
800584dc [][][][] init with 1.
800584e0 [][][][] spu dma transfer stop callback.
800584e4 [][][][] spu interrupt callback.

80058504 [][][][] init with 0. Set to 4 during sound init.
80058508 [][][][] init with 0.
8005850c [][][][] init with 0. Set to 8006f158 during sound init.
80058510 array of some pointers (0xa items 0x4 size)

80058810 GP
    + 14 [][][][] some id for GP + 420 or GP + 418 struct. Increment after inserting new.
    + 18 [][][][] increment after inserting new to GP + 418.
    + 1c [][][][] increment after inserting new to GP + 420.
    + 20 [][][][] pointer to last struct_164 (used to create list of render sprites).
    + 24 [][]     some y of texture (used as * 0x40 + 140). Increment by 1 when +26 >= 0x41 each func call limited by 3.
    + 26 [][]     some x of texture (used as + 300). Increment by A1 each func call limited by 41.
    + 28 [][][][] ???
    + 38 [][][][] rotation dta for some sprite animation if flag 0x2000 in sprite animation data not set.
    + 3c []       init with 0 during battle attack struct init.
    + 3d []       if this != 0 then we use +38 to calculate rotation matrix for sprite animation (if flag 0x2000 not set).
    + 3e []       
    +17c [][][][] increment during sprite update.
    +1a8 [][]     init with 0x20. 0xfc000000 type of memory alloc.
    +1ac [][]     init with 0xa. 0x01e00000 owner for memory alloc.
    +1b0 [][][][] pointer to start of allocated memory.
                  memory allocates as follows
                  -8 pointer to next.
                  -4 flags:
                    0x001fffff - place in code from where we call allocate function.
                    0x00200000 - final allocated memory block.
                    0x01e00000 - owner. hu[GP + 1ac] & 000f. (if this is 0 then we clear this memory block)
                                 0x0 ....
                                 0x1 END 
                                 0x2 HIG  Katsuhisa Higuchi (Battle Menu Programmer)
                                 0x3 KAZM (model data) Kazumi Kobayashi (World Map Programming)
                                 0x4 MASA Masaki Kobayashi (Gear Motion/Movie Programming)
                                 0x5 MIYA Yoshiyuki Miyagawa (Character Effect Programming)
                                 0x6 SUGI Koji Sugimoto (Polygon,3D Graphics Engine,Memory Manager,Message,Font,Controler,VSync,Kernel OS,Compress,Debugger&Tools) Library 'LibLS.LIB'
                                 0x7 SUZU (func32930() func32988()) Hidenori Suzuki (Sound Programming)
                                 0x8 YOSI Kiyoshi Yoshii (Main Programmer)
                                 0x9 SIMA Masaki Kobayashi (Gear Motion/Movie Programming)
                                 0xa ????
                                 0xb TEST
                    0x02000000 - can't clear this memory block.
                    0xfc000000 - hu[GP + 1a8] flag 0x20 and mem contents id:
                                 0x00 ""
                                 0x01 FREE AREA
                                 0x02 fake malloc
                                 0x03 fake calloc (func32988())
                                 0x04 MDL Data
                                 0x05 MDL Packet (model packets)
                                 0x06 MDL Light (lighting data)
                                 0x07 CD CHACE
                                 0x08 MES IMAGE
                                 0x09 MES WORK
                                 0x0a MES CUE
                                 0x0b MIMe Work (init +1c in model data)
                                 0x0c MIMe Vertex (model vertexes)
                                 0x0d MIMe Normal ([part_header + c])
                                 0x0e SYMBOL DATA
                                 0x0f SOUND (func32930())
                                 0x10 MES FONT
                                 0x11 MES SYSDATA
                                 0x12 LsFONT
                                 0x13 DelayFree
                  -0 start of memory.
    +1bc [][][][] set to 1 if some memory marked to remove in system_memory_mark_removed_alloc().
    +1c0 [][][][] store 1 when we start load some data for field, and 0 when finish process. Maybe this is to restrict new memory allocation till we finish process.
    +1c4 [][][][] init with 0. Start of function debug names.
    +1c8 [][][][] init with 0. End of function debug names.
    +1cc [][][][] store size of allocated data here.
    +1d0 [][][][] place in code from where we call current function.
    +1d4 [][][][] memory error filehandle (for devkit).
    +418 [][][][] last inserted struct (size 0x1c)
    +41c [][][][] current struct.
    +420 [][][][] last inserted struct (size 0x1c)
                    +00 [][][][] struct_164.
                    +08 [][][][] init with 0.
                    +0c [][][][] ptr to func1c9d4() for +420 and func1cc20() for +418. Looks like destructor.
                    +10 [][][][] some flags.
                                    0x1fffffff id from GP + 14
                                    0xe0000000 ???
                    +14 [][][][] some flags.
                                    0x1fffffff id from prev struct
                                    0xe0000000 ???
                    +18 [][][][] prev struct.
    +428 []       store 1 here at start of battle load.

80058954 start of working area
80058954 [][][][] pointer to some func.
80058958 [][][][] pointer to file loaded via func19a50() (we allocate place for file here).
8005895c [][][][] store here id of file to load via func19a50().

8005896c [][][][] kernel selection not confirmed flag. Exit kernel if this = 0.

800589a8 [][]     store tex page setting here during initialization.
800589ac [][]     store here clut setting during initialization.
800589b0 [][][][] we get here default tex page setting and store it to 800589a8 if 8004f7ac == 2, in case of 1 we load only tex X and Y from here.
800589b4 [][][][] we get here default clut Y setting and store it to 800589ac if 8004f7ac == 0.

800589e8 [][][][] store start of extended text characters here. 0xf8 in japanese.
800589fc [][][][] pointer to pack of some texts.

80058a10 [][]     previously pressed button mask for controller 1 (details in 80058c0c).
80058a14 [][]     previously pressed button mask for controller 2 (details in 80058c0c).
80058a18 [][][][] number of button mask received since last update.
80058a1c [][][][] current store index of buffer for received button masks.
80058a20 [][][][] current receive index of buffer for received button masks.

80058a24 []       ID1 of last reveived controller input.
80058a28 []       init with 1.
80058a2c [][][][] init with 0. If set then call some dev breakpoint.

80058a30 [][][][] pointer to printf struct buffer.
    +00 [][]     flags.
                    0x0001 - not use 2nd buffer.
                    0x0002 - ???
                    0x0004 - memory allocation flag.
                    0x0008 - not use new row wher text reach string end.
    +02 [][]     texpage settings.
    +04 [][][][] pointer to +d4 (packet buffer 1).
    +08 [][][][] pointer to +d4 or +d4 + max_letters * 0x10 (packet buffer 2).
    +0c [][]     start x.
    +0e [][]     start y.
    +10 [][]     area width.
    +12 [][]     area height.
    +14 [][]     letter width (if +2e 0x0008 is not set).
    +16 [][]     row height.
    +18 [][][][] default colour.
    +1c texpage settings packet 0x8 size for buffer 1.
    +24 texpage settings packet 0x8 size for buffer 2.
    +2c [][]     max number of letters.
    +2e [][]     flags.
                    0x0001 - current render buffer.
                    0x0002 - 16x16 letters.
                    0x0004 - use uppercase letter (only if >= 0x60).
                    0x0008 - use letter width.
    +30 [][]     current x of letter.
    +32 [][]     current y of row.
    +34 [][]     current number of letters.
    +36 [][]     x of new row.
    +38 [][][][] pointer to letter render packet (move to next +10 each time we add new letter).
    +3c array of letter clut (0x4 items 0x2 size).
    +44 packet for background 0x10 size for buffer 1.
    +47 []       3
    +48 []       0
    +49 []       0
    +4a []       0
    +4b []       62 // Monochrome Rectangle (variable size) (semi-transparent)
    +4c [][][][] start xy.
    +50 [][][][] size
    +54 packet for background 0x10 size for buffer 2.
    +64 array of letter width (starting from letter 0x20).
    +c4 [][][][] start of packets 1.
    +c8 [][][][] start of packets 2.
    +cc [][]     stored current x pos.
    +ce [][]     stored current y pos.
    +d0 [][]     stored x of new row.
    +d2 []       x offset of letter texture in vram.

80058a3c [][][][] allocated memory for print routine?

80058a48 [][][][] pointer to bios SetPadEnableFlag().
80058a4c [][][][] pointer to bios ClearPadEnableFlag().
80058a54 [][][][] pointer to bios SetPadOutput(src1,blah1,src2,blah2).

80058a88

80058aa0 [][][][] number of channels to activate. Store 2 here when starting new sound.

80058aa5 []       reverb type.
80058aa6 []       reverb delay.
80058aa7 []       reverb feedback.
80058aa8 [][]     reverb output volume left.
80058aaa [][]     reverb output volume right.
80058aac [][][][] pointer to start of all sound alloc memory structs (800651a0). Structs is dynamic size with 0x10 bytes header. Can be in range 800651a0-8006b490

80058ab4 []       number of seconds game working.
80058abc []       number of minutes game working.
80058ac0 [][][][] store here pointer to place for packets.
80058ac4 [][][][] store here data from sprite opcode 0xa7 & 0x7f if 0x80 is set. Some wait.
80058ac8 []       init with 0.
80058acc []       state of LeftJoyX for controller 1 (0x00=Left, 0x80=Center, 0xFF=Right).
80058ad4 []       state of LeftJoyY for controller 1 (0x00=Up, 0x80=Center, 0xFF=Down).
80058adc [][][][] start of sed files linked array.
80058ae0 []       state of RightJoyX for controller 1 (0x00=Left, 0x80=Center, 0xFF=Right).
80058ae4 []       state of RightJoyX for controller 2 (0x00=Left, 0x80=Center, 0xFF=Right).
80058ae8 []       state of RightJoyY for controller 1 (0x00=Up, 0x80=Center, 0xFF=Down).
80058aec []       state of RightJoyY for controller 2 (0x00=Up, 0x80=Center, 0xFF=Down).
80058ad0 []       state of LeftJoyX for controller 2 (0x00=Left, 0x80=Center, 0xFF=Right).
80058ad8 []       state of LeftJoyY for controller 2 (0x00=Up, 0x80=Center, 0xFF=Down).

80058af4 [][][][] pointer to sound spu dma transfer struct (0x14 size 0x8 items).
    +08 [][][][] start address.
    +0c [][][][] size.
    +10 [][][][] some callback.

80058afc []       menu to render.

80058b00 [][][][] init with 0 during battle attack struct init.

80058b14 [][][][] number of initing channels.

80058b18 []       ???

80058b20 []       number of hours game working.
80058b24 [][][][] if this &3 then we always return pressed buttons in 80058b40. Increment every frame.
80058b28 [][]     mask of buttons that was pressed in last update for controller 1 (details in 80058c0c).
80058b2c [][]     mask of buttons that was pressed in last update for controller 2 (details in 80058c0c).

80058b30 [][]     store here 0 when sprite update wait is over.
80058b34 [][][][] store here pointer to precalculated normal for polygon lighting. Allocated memory from +18 in model data file.

80058b40 [][]     repeated buttons for controller 1 (details in 80058c0c). 0x20 timer to repeat.
80058b44 [][]     repeated buttons for controller 2 (details in 80058c0c). 0x20 timer to repeat.

80058b6c []       init with 0.

80058b74 [][][][] init with -1.
80058b80 [][][][] init with 0x12345678. Random for sound opcodes.

80058b90 [][]     id of loaded spu dma transfer.
80058b94 [][][][] store here 0 when start load battle exe.
80058b98 [][][][] flags for turning SPU Voice ON.
80058b9c [][]     spu sound error id. Init with 0.
                    0x01 sed file +0 don't equal 0x73646573.
                    0x02 
                    0x04 sed file +c don't equal 0x0101.
                    0x15 this sed already loaded to linked array.
                    0x1e cant allocate place for smd struct.
                    0x28 already inited

80058ba0 [][][][] increment each system_sound_main() call.
80058ba4 [][][][] store here id of encounter in field.
80058bac [][]     current load spu dma transfer.
80058bb0 [][][][] init with 0.
80058bb4 [][][][] init with 0.
80058bb8 [][][][] size of sound structs memory.

80058bc4 [][][][] store here pointer to polygons data block in 3d model file.
80058bc8 [][][][] we store here +0c [][][][] from model parts header. Maybe for futher use in inner functions.

80058bd4 [][][][] store here pointer to texture data block in 3d model file.
80058bd8 [][][][] pointer to vertex block in model data file during packet init.

80058be0 [][][][] init with 0x8. Looks like num of channels for sound or first channel for sound.
80058be8 []       ??? something
80058bec [][][][] init with 0.

80058bf0 [][][][] mask 2 for turning SPU Voice OFF. In addition during turning off channels in this mask set linear release and time to 6.
80058bf4 [][][][] pointer to SND array (with wds signature).
80058bfc [][][][] pointer to struct from STRIPCD1\1\0025.snd file.

80058c00 [][][][] pointer to main sound structs data.
80058c04 [][][][] ???

80058c0c [][]     pressed buttons in Xeno format for controller 1. (1=Pressed, 0=Released)
                    0x0001 L2
                    0x0002 R2
                    0x0004 L1
                    0x0008 R1
                    0x0010 Triangle
                    0x0020 Circle
                    0x0040 Cross
                    0x0080 Square
                    0x0100 Select
                    0x0200 L3
                    0x0400 R3
                    0x0800 Start
                    0x1000 Up
                    0x2000 Right
                    0x4000 Down
                    0x8000 Left
80058c10 [][]     pressed buttons in Xeno format for controller 2.

80058c18 [][]     some sound control flags. Init with 0xb801
                    0x0001 sound event in 80058c58 enabled.
                    0x0008 add if we genegate sound error.
                    0x0010 ???
                    0x0020 ???
                    0x0040 we don't play system_sound_main() if this is set. Maybe pause sound.
                    0x0080 do not generate sound error if this flag set.
                    0x0100 if this flag is set then we use mono sound without separation on different channels. Set during init.
                    0x0200 pan left to right.
                    0x0400 pan right to left.
                    0x0800 enable sounds played by sed id.
                    0x1000 reverb enabled (init reverb if this is set)
                    0x2000 enable reverb.
                    0x4000 set cd out volume to spu.
                    0x8000 already inited flag.

80058c20 [][][][] allocated spu pointer for pcm data.
80058c24 [][][][] size of pcm data.

80058c38

80058c40 [][][][] pointer to some memory 0x840 size.
80058c48 [][][][] pointer to struct from STRIPCD1\1\0027.snd file.

80058c58 [][][][] sound event id.
80058c5c [][][][] we add here number of polygons for which we create packets.

80058c70 [][]     1st clut field for font.
80058c72 [][]     2nd clut field for font.

80058c74 [][][][] offset to current main channel settings (0x94 size - global settings, then 0x10 channes settings 0x158 size).
    +00 [][][][] store here previous music data pointer from 80058c00.
    +04 [][][][] ???
    +08 [][][][] pointer to smd file.
    +0c [][][][] pointer to allocated additional data for this main. Stored after all channel structs with size 0x180.
    +10 [][]     some flags.
                    0x0001 add during init.
                    0x0002 add during init.
                    0x0004 ???
                    0x0006 check if global reverb not disabled.
                    0x0010 ???
                    0x0040 ???
                    0x0080 ???
                    0x8000 if set then we update main struct. Remove when stops all channels.
    +12 [][]     smd + 10. init with 0x7fff.
    +14 []       number of channels.
    +16 [][]     snd id.
    +18 [][]     smd + 18. init with 0x7f.
    +1a []       init with 0.
    +1b []       init with 0.
    +1c [][]     noise frequency shift and step.
    +1e [][]     check if this == +32 and (reset this to 0.)
    +20 [][][][] init with 0. Maybe number of cycles.
    +24 [][][][] init with 0.
    +28 [][][][] init with 0. Increase by +64+2[][] each cycle.
    +2c [][][][] ???
    +30 [][]     init with 0.
    +32 [][]     Incremented each time +34 become greater than +38. Init with 0x1.
    +34 [][]     incremented each time +36 reach 0. If greater than +38 then reset to 1 and increment +32. Init with 0.
    +36 [][]     counter value. Init with 0x1.
    +38 [][]     board value for +34. Init with 0x0004.
    +3a [][]     base value for +36 counter. Init with 0x30.
    +3c [][]     init with 0x0004.
    +3e [][]     init with 0x0004.
    +41 []       reverb type.
    +42 []       reverb delay.
    +43 []       reverb feedback.
    +44 [][]     reverb volume.
    +48 [][][][] mask of active channels.
    +4c [][][][] init with 0.
    +50 [][][][] main struct update wait. Set to 0x10000 and discrease by +54 each update call. If less than 0 then update.
    +54 [][][][] update real speed.
    +58 [][][][] update base speed (<< 0x10).
    +5c [][][][] base speed increase add.
    +60 [][]     steps in update base speed increase.
    +62 [][]     base speed increase final value.
    +64 update speed mod increase.
    +70 global volume increase?
    +7c global pitch increase?
    +88 global volume increase?
        +0 [][][][] value.
        +4 [][][][] increase value.
        +8 [][]     current counter value.
        +a [][]     value set when counter reach 0.
    +7e [][]     pitch related.
    +8a [][]     volume distribution addition.
// +94 start of SPU channel structures (size 0x158)
    +000 [][]     control flags.
                    0x0001 - channel inited.
                    0x0002 - disable reverb.
                    0x0008 - if set then we will not update volume.
                    0x0010 - ???
                    0x0020 - ???
                    0x0100 - stops sequence.
                    0x0200 - this flag is set if 0x0800 flag set at the end of sequence parsing.
                    0x0400 - add play channel.
                    0x0800 - if this flag set at the end of sequence parsing - we will add 0x0200 flag.
                    0x1000 - set if in sequence next pause will be note. Remove othewise. This will set new release just before next note.
                    0x8000 - instrument for channel was set but not updated yet.
    +002 [][]     calculate flags.
                    0x0001 - calculate enable
                    0x0002 - calculate disable
                    0x0100 - calculate volume.
                    0x0200 - calculate pitch.
    +004 [][]     update timers flags.
                    0x0001 - base pitch update.
                    0x0002 - if set then update base pitch without timer.
                    0x0008 - base volume update.
                    0x0010 - base volume distribution update.
                    0x0020 - note volume update.
                    0x0100 - ???
    +006 []       channel id.
    +007 []       init with 0x10.
    +008 [][]     sed inner id.
    +00a [][]     sed file id.
    +00c [][][][] sound tick when channel starts from 80058ba0
    +010 [][][][] sequence start pointer.
    +014 [][][][] sequence current pointer.
    +018 [][][][] stored sequence pointer (opcode 0x91).
    +01c [][][][] init with 0.
    +020 [][]     init with 0.
    +022 []       init with 0.
    +023 []       we store here +066 during opcode 91. Restore +066 from here during opcode 90.
    +025 []       snd id for this sed.
    +026 []       instrument id.
    +027 []       spu channel id.
    +028 []       store base release rate here.
    +02c [][][][] pointer to snd file (instruments data).
    +030 [][]     store here channel id.
    +032 [][]     enable flags.
                    0x0010 - enable channel fm (pitch lfo) mode.
                    0x0020 - enable channel noise mode.
                    0x0040 - enable channel reverb mode.
    +034 [][]     init with 0x0100.
    +036 [][]     update flags.
                    0x0001 - update left and right volume.
                    0x0004 - update pitch.
                    0x0008 - update start and loop sound address.
                    0x0010 - update attack mode and attack rate.
                    0x0020 - update decay rate.
                    0x0040 - update sustain mode and sustain rate.
                    0x0080 - update release mode and release rate.
                    0x0100 - update sustain level.
                    0x1000 - update channel fm (pitch lfo) mode.
                    0x2000 - update channel noise mode.
                    0x4000 - update channel reverb mode.
    +038 [][]     left volume.
    +03a [][]     right volume.
    +03c [][]     init with 0.
    +03e [][]     init with 0.
    +044 [][]     pitch.
    +04c [][][][] start address.
    +050 [][][][] loop address.
    +054 []       0x04 - attack mode.
    +055 []       this >> 1 - sustain mode.
    +056 []       this >> 2 - release mode.
    +057 []       attack rate.
    +058 []       decay rate.
    +059 []       sustain rate.
    +05a []       release rate.
    +05b []       sustain level.
    +05c [][]     script wait timer.
    +05e [][]     timer to stop playing note.
    +060 []       init with 0.
    +062 [][]     init with 0x000f.
    +064 []       init with 0.
    +065 []       additional data id. +66 + some wait related data
    +066 []       init with 0x003c.
    +068 [][][][] base pitch.
    +06c [][]     instrument pitch.
    +06e [][]     pitch add. Init with 0.
    +070 [][]     init with 0.
    +072 [][]     stack id for cycles data in +09c. Init with -1.
    +074 [][]     volume distribution (left/right). Init with 0x4000 (center).
    +076 [][]     note volume.
    +078 [][][][] base volume.
    +07c [][][][] base volume add step value.
    +080 [][]     base volume add steps.
    +082 [][]     base volume add final value.
    +084 [][][][] base pitch add for timer.
    +088 [][][][] base volume add for timer.
    +08c [][]     note volume add for timer.
    +08e [][]     note volume final value for the timer.
    +090 [][]     volume distribution step value.
    +092 [][]     volume distribution final value.
    +094 [][]     base pitch update timer.
    +096 [][]     base volume update timer.
    +098 [][]     volume distribution steps.
    +09a [][]     volume update steps.
    +09с stack structs (0xc size)
        +0 []       number of cycles left
        +2 []       stored base pitch.
        +3 []       stored base pitch before jump back.
        +4 [][][][] sequence position.
        +8 [][][][] sequence position before jump back.
    +0cc [][]     some id in +d8
    +0ce [][]     init with 0.
    +0d0 [][]     pitch related. Init with 0.
    +0d2 [][]     volume mod.
    +0d4 [][]     volume distribution add.
    +0d8 start of some data.
        +00 [][][][] function to call. Base value returned by this func.
        +04 [][][][] function current return value. Reset with 0.
        +08 [][][][] function addition to current return value + 4.
        +0c [][][][] function base return value.
        +10 [][]     func exec current wait (inside func update only when this is 0).
        +12 [][]     func exec wait.
        +14 [][]     current update wait.
        +16 [][]     base wait for reset.
        +18 [][]     multiplier for value returned by func.
        +1a [][]     addition to +18.
        +1c []       type of mod (0 - +d0 pitch, 1 - +d2 volume, 2 - +d4 volume distribution).
        +1d []       fucntion id to call (different type of modifiers for +1d updates).
        +1e [][]     init with 0. 0x0003 - reset.
                        0x0001 - enabled.
                        0x0002 - ???
                        0x0004 - ???
                        0x0008 - flag that switch value for fucntions.
    // some additional data related with bu[smd + 15]

80058c78 [][][][] 
80058c7c [][][][] 
80058c80 [][][][] end of memory for sound structs (8006b490).

80058c84 addresses for kernel debug enviroments
    +00 draw enviroment 1 (0x5c size).
    +5c display enviroment 2 (0x14 size).
    +74 mono triangle 1 (cursor) packet.

    +88 draw enviroment 2 (0x5c size).
    +e4 display enviroment 1 (0x14 size).
    +fc mono triangle 2 (cursor) packet.

80058d94 defaul address for some error load from cdrom in system_cdrom_ready_callback_3().

80059594 [][][]   struct.
    +0 []       minute.
    +1 []       second.
    +2 []       sector.
80059598 [][][][] 0
8005959c [][][][] 0

800595a4 [][][][] store cdrom ready callback here.
800595a8 [][][][] local file id to load.
800595ac cd command param array (CdlLOC struct).
    +0 []       minute.
    +1 []       second.
    +2 []       sector.
    +3 []       track number.

800595b4 []       cdrom command param 1.
800595b5 []       cdrom command param 2.
800595b6 []       cdrom command param 3.
800595b7 []       cdrom command param 4.
800595b8 store here result of CdlStandby (MotorOn) and CdlPause cdrom command.

80059b6c [][][][] error counter. If less than 3 errors then we pause cdrom, Then we stop cdrom, wait and restart from scratch.

800595a0 [][][][] opened PC file handler.

800595b1 []

800595c0 [][]     image: 1 - global vram pos + move pos. 2 - global vram pos + inner pos + move pos. Other - inner pos + move pos.
800595cc [][]     clut: 1 - global vram pos + move pos. 2 - global vram pos + inner pos + move pos. Other - inner pos + move pos.
800595c4 [][]     global image vram x.
800595c8 [][]     global image vram y.
800595d0 [][]     global clut vram x.
800595d4 [][]     global clut vram y.

800595d8 [][][][] number of something.
800595dc [][]     vram x.
800595e0 [][]     current vram y.
800595e4 [][]     vram width.
800595e8 [][]     pointer to current chunk heights.
800595ec [][][][] number of image chunks left to load.

80059600 light matrix
    +00 [][][][] R11R12 for light matrix calculation.
    +04 [][][][] R13R21 for light matrix calculation.
    +08 [][][][] R22R23 for light matrix calculation.
    +0c [][][][] R31R32 for light matrix calculation.
    +10 [][][][] R33 for light matrix calculation.

80059640 array of four bytes values. Store 0 in slot GP + 0x1ac when we start parse model and animation.
         during model initialization if flaf 0x2000 i  +58 in model struct exist we store [80059640 + 3 * 4] = w(0) before +1c initialization
         after +1c init we store [80059640 + 8 * 4] = w(0)
         looks like we store in GP + 0x1ac index of this struct. GP + 1c0 set to 0 in both cases. Turn off garbage collection?

80059668 [][][][] init with 0.

80059674 struct with data for text.
    +1c [][][][] pointer to next character.

80059764 [][]     store addition here (0x10) when translate number to letters for text.
80059766 temp array with decimal numbers generated from number to render as text (0x2 size 0xa items).
8005977a [][]     store -1 here when translate number to letters for text.
80059780 temp array with letters generated from numbers to insert number in text (in usual text format).

800597b8 array for pressed buttons controller 2 (0x10 item 0x2 size).
800597d8 array for pressed in last update controller 1 (0x10 item 0x2 size).
800597f8 array for pressed in last update controller 2 (0x10 item 0x2 size).
80059818 array for repeated buttons controller 1 (0x10 item 0x2 size).
80059798 array for pressed buttons controller 1 (0x10 item 0x2 size).
80059838 array for repeated buttons controller 2 (0x10 item 0x2 size).

80059858 vibration command for controller 1.
80059860 vibration command for controller 2.

8005989c [][][][] init with 0.
800598a0 [][][][] init with callback to 8004085c.
800598a4 [][][][] init with callback to 800408c4.
800598a8 [][][][] init with 0.
800598ac array of stored cdl command response fifo (0x1 size 0x8 items). Cd sync interrupt result.
800598b4 array of stored cdl command response fifo (0x1 size 0x8 items). Cd ready interrupt result.
800598bc array of stored cdl command response fifo (0x1 size 0x8 items). Сd read interrupt result.

800598c4 [][][][] cdrom timeout frame value.
800598c8 [][][][] cdrom current wait time.
800598cc [][][][] store here string to print during cdrom timeout.

800598d4-80059904 temp for DMA2 transfer

80059918 some gpu mem set (0x100 size).

80059a38 [][][][] pointer to start of player data. Init with 8006ccc4.

80059a3c some array 0x2 size.

80059a5c [][][][] init with 0xc.
    +00 [][][][] flags.
                    0x00000001 main volume left.
                    0x00000002 main volume right.
                    0x00000004 predefined main volume left.
                    0x00000008 predefined main volume right.
                    0x00000040 cd volume left.
                    0x00000080 cd volume right.
                    0x00000100 cd audio reverb.
                    0x00000200 cd audio enable.
                    0x00000400 extern volume left.
                    0x00000800 extern volume right.
                    0x00001000 external audio reverb.
                    0x00002000 cd audio reverb.
    +04 [][]     main volume left.
    +06 [][]     main volume right.
    +08 [][]     predefined main volume left id.
    +0a [][]     predefined main volume right id.
    +10 [][]     cd volume left.
    +12 [][]     cd volume right.
    +14 [][][][] cd audio reverb (0-off else on).
    +18 [][][][] cd audio enable (0-off else on).
    +1c [][]     extern volume left.
    +1e [][]     extern volume right.
    +20 [][][][] external audio reverb (0-off else on).
    +24 [][][][] cd audio reverb (0-off else on).

80059a84 [][]     stored spu main volume.
80059a86 [][]     stored spu cd volume.
80059a88 [][]     reverb volume.
80059a8a [][]     stored cd to spu volume.

80059a8c main volume left/right increase struct.
80059a98 cd volume left/right increase struct.
    +00 [][][][] volume.
    +04 [][][][] increment value.
    +08 [][]     steps left.
    +0a [][]     if +08 == 0 then set value with this << 10.

80059aa4 pointer to player sprite data for party slot 1 (0x14000 size).
80059aa8 pointer to player sprite data for party slot 2 (0x14000 size).
80059aac pointer to player sprite data for party slot 3 (0x14000 size).

80059ad4 array of party slot - entity id association. (size 0x04).
80059ad8 [][][][] entity id in party 2.
80059adс [][][][] entity id in patry 3.

80059b18 [][][][] init with 0. Increment by 1 when download starts.
80059b1c [][][][] init with 0.
80059b20 [][][][] init with 0.
80059b24 [][][][] init with 0.
80059b28 [][][][] init with 0.
80059b2c [][][][] init with 0.

80059b34 [][][][] init with 0.
80059b38 [][][][] init with 0.

80059b44 [][][][] init with 0.

80059b4c [][][][] pointer to temp buffer for 10\0590.sed loaded in advance for field data.
80059b50 [][][][] file size for loading field file.
80059b58 array of something spu related. Init with 0. (size 0x2 items 0xa)
80059b70 [][][][] pointer to allocated memory for loading field file.

80061ba8 [][][][] init with 0.
80061bac [][][][] pointer to struct from 1\0025.snd file.
80061bb0 [][][][] init with 0.
80061bb4 [][][][] pointer to struct from 1\0027.snd file.
80061bb8 [][][][] pointer to field music main struct.
80061bbc array of pointers to channel + 30 offsets by spu channel id (0x18 items 0x4 size).

80061c20 [][][][] party member 1.
80061c24 [][][][] party member 2.
80061c28 [][][][] party member 3.

80061c2c [][][][] pointer to 10\0590.sed file in field (maybe sound effects for field)

80061c30 pointer to allocated menu memory (0x1e98 size) Render data.
    +   6с draw enviroment packet buffer 1.
    +   c8 display enviroment packet buffer 1.
    +  120 draw enviroment packet buffer 2.
    +  17c display enviroment packet buffer 2.
    +  1d4 current render queue.
        +  0 draw enviroment
        + 5c display enviroment.
        + 70
        + 80 otag.
        + ac otag.
    +  308
    +  33c pointer to tooltip text render data
        + c array of 8 bytes for enable letter renders.
    +  350
    +  6e0 array of text 0x80 packets data.
    + 14e0 array of some 0x80 packets data.
        +  0 packets buffer 1
        + 28 packets buffer 2
        + 50 raw quad data array (0x20 size)
            +  0 [][]     X1.
            +  2 [][]     Y1.
            +  4 [][]     Z1.
            +  8 [][]     X2.
            +  a [][]     Y2.
            +  c [][]     Z2.
            + 10 [][]     X3.
            + 12 [][]     Y3.
            + 14 [][]     Z3.
            + 18 [][]     X4.
            + 1a [][]     Y4.
            + 1c [][]     Z4.
        + 7d buffer to render.

80061c34 array of structs (0x8 size 0x3 items) for party members sprites loading.
    + 0 [][]     dir file id.
    + 4 [][][][] allocated memory.

80061c8c controller input buffers (size 0x22 items 0x2).
    +02 [][]     button mask. (0=Pressed, 1=Released)
                    0x0001 Select
                    0x0002 L3
                    0x0004 R3
                    0x0008 Start
                    0x0010 Up
                    0x0020 Right
                    0x0040 Down
                    0x0080 Left
                    0x0100 L2
                    0x0200 R2
                    0x0400 L1
                    0x0800 R1
                    0x1000 Triangle
                    0x2000 Circle
                    0x4000 Cross
                    0x8000 Square

80064ed8 store mouse input from second controller here.
    +00 [][][][] pos X
    +04 [][][][] pos Y.
    +08 [][][][] mouse buttons mask.
    +0c [][][][] relative movement X from last update.
    +10 [][][][] relative movement Y from last update.

80064f6c array of encounters. Extract part 6 of fieldfile here. (0x20 size 0x10 items).
// tutorial field 0x616
09A3120100 000000 8081818181FFFFFF 0000000000FFFFFF 0001020304FFFFFF
0B001C0000 000000 80FFFFFFFFFFFFFF 00000000000000FF 00020000FFFFFFFF
0200110000 000000 0101010180FFFFFF 0000000000FFFFFF 0000000000FFFFFF
0100030080 808000 000001010101FFFF 000000000000FFFF 000001010101FFFF
0F00070000 000000 80FFFFFFFFFFFFFF 0000000000000000 0001020001010101
0B001D0000 000000 80FFFFFFFFFFFFFF 0000000000000000 0001020001010101
02001E0000 000000 8282FFFFFFFFFFFF 0000000000000000 0100020001010101
0900110000 000000 818181FFFFFFFFFF 00000000000000FF 00010200000000FF
0400000000 000000 010101010101FFFF 000000000000FFFF 010100000202FFFF
09000B0002 020200 818181FFFFFFFFFF 000000FFFFFFFFFF 000102FFFFFFFFFF
0300160000 000000 00000000FFFFFFFF 000000000000FFFF 000000000202FFFF
0700020000 000000 01010102FFFFFFFF 0000000000000000 0000000001010101
0200070000 000000 00000000FFFFFFFF 00000000FFFFFFFF 00000000FFFFFFFF
0200070000 000000 00000000FFFFFFFF 00000000FFFFFFFF 00000000FFFFFFFF
0200070000 000000 00000000FFFFFFFF 00000000FFFFFFFF 00000000FFFFFFFF
0200070000 000000 00000000FFFFFFFF 00000000FFFFFFFF 00000000FFFFFFFF
8006516c chances for encounters (0x10 items 0x1 byte size).

8006518c array of 3 pointers of allocated memory for char sprites. Data from here extracts to 80059aa4.

80065198 [][][][] store entity id which perform move here during func821cc.

800651a0-8006b490. Sound memory alloc struct
First struct is just header struct (0x10 size), later we add more structs different size.
// header (0x10 size)
    +00 [][]     some id. For main structs set to 2; Init with 0x8000.
    +02 [][]     0.
    +04 [][][][] 0.
    +06 [][]     add 0x01f5 when we enable channel.
    +08 [][][][] end of data in this memory alloc.
    +0c [][][][] link to next memory alloc header.

8006b4c4 render queue of 0x40 structs with size 0x60.
8006b4c4 [][][][] pointer to transfer func.
8006b4c8 [][][][] otag ptr.
8006b4cc [][][][] data src (data to transfer).
8006b4d0 start of otag data.

8006ccc4 start of player data. savemap?

8006e5f6 [][]     init from 8006efe4.

8006e5fc [][]     init as hu[8006efe0] >> 9.

8006efde [][]     field id to load.
8006efe0 [][]     ???
8006efe4 [][]     copied to 8006e5f6.
8006efe6 [][]     copied to 8004e9c8.

8006f020 array of 3 items with size 0x4. Init with 0.

8006f08c array of spu memory allocation structs with size 0x10. 0xc items.
         Insert first item right after init. (+0 0x81, +1 0x05, +2 0x0000, +4 0x00000000, +8 0x00001010)
    +0 []       0x80 here.
    +1 []       0x00 here.
    +2 [][]     id of next item.
    +4 [][][][] start of allocated memory.
    +8 [][][][] size of allocated memory.

8006f14c array of 3 items with size 0x4. Init with 0. At start of field init with 0xff. Related with party members.

8006f158 some struct spu memory related. Store pointer to 8005850c.
    +0 [][][][] 40001010.
                    0x80000000 - disabled.
                    0x40000000 - allocated.
    +4 [][][][] (10000 << shifter) - 1010. size.

8006f17c end of worknig area

8006f180 start of heap region.
    +0 [][][][] pointer to end of heap.
    +4 [][][][] some flags.
801fc000 end of heap region.
    -8 [][][][] pointer to end of heap.
    -4 [][][][] some flags.



Sprite struct 0x164. Can be allocated anywhere.
    +  0 [][][][] store x here from struct_138 + 20.
    +  4 [][][][] store y here from struct_138 + 24.
    +  8 [][][][] store z here from struct_138 + 28.
    +  c [][][][] animation move x. init with 0 in some cases.
    + 10 [][][][] animation move y. init with 0 in some cases. When move set as [struct_138 + f0] >> 1.
    + 14 [][][][] animation move z. init with 0 in some cases.
    + 18 [][][][] move speed. Set to 0 if +6 == 84. If animation id == 2 (run) set as +82 * 60 else +82 * 30.
    + 1c [][][][] some multiplication of +82 with w[80058810 + 28] + 1 and +ac (0x001ffe00) and data from flags in animation data.
    + 20 [][][][] pointer to +b4.
    + 24 [][][][] pointer to +110.
    + 28 [][][][] packet header 0x2c808080 or 0x2b during init.
    + 2b []       init with 0x2d.
    + 2c [][]     scale of sprite. Init with 0x1000.
    + 30 [][]     init with 0.
    + 32 [][]     store rotation here. Init with 0.
    + 34 [][]     frame id to render. Init with 0.
    + 36 [][]     some data from frame_data + 3 * sprite scale. Maybe frame offset.
    + 38 [][]     some data from frame_data + 1 * sprite scale. Maybe frame offset.
    + 3a [][]     init with 0. Some scale. Multiplied with rotation matrix.
    + 3c [][][][] init with 0. Some flags.
                    0x00000003 - set to 1 during init. If 1 then remove sprite offset in b4+3c and b4+3d.
                                    0x1 - init animation.
                    0x00000004 - add some packets after normal packet creation.
                    0x00000008 - invert tile x and width.
                    0x00000010 - invert tile y and height.
                    0x000000e0 - semi transparency mode?
                    0x0000ff00 - mask of add tiles.
                    0x00000800 - different queue inserting.
                    0x10000000 - add if we set scale.
                    0x40000000 - if set then we ??? during sprite update and remove flag.
    + 3e [][]     hu[S3 + 3e] & 00f0 palette id to load.
    + 40 [][][][] init with 0. Some flags.
                    0x00000001 - use identity matrix for render.
                    0x000000fc - number_of_tiles in current render.
                    0x00001f00 - scale
                    0x0001e000 - removed during init.
                    0x00020000 - this struct was added to sprite struct list.
                    0x00040000 - set when init sprite if h[800b1662] != 0 (move length).
                    0x00080000 - if set we init frame.
                    0x00100000 - add when we starting animation. If 0 and +3c 0x00000003 == 1 and b4+34 != 0 then reset all data in +124 (add rot and trans).
    + 44 [][][][] pointer to loaded sprite pack.
    + 48 [][][][] pointer to sprite pack.
    + 4c [][][][] pointer to some sprite pack (used if animation id < 0).
    + 50 [][][][] init with 0.
    + 54 [][][][] pointer to some start frame id for different directions in sprite data file 0. Pointer to first direction start frame.
    + 58 [][][][] pointer to animation data in sprite data file 0.
    + 5c [][][][] pointer to animation data in sprite data file 0 + 6, set when sprite has only two directions (one animation sequence).
    + 60 [][][][] pointer to 1st animation data in sprite data file 0.
    + 64 [][][][] current pointer to sprite sequence data from file 0. Init with 0.
    + 68 [][][][] callback. Init with 0.
    + 6c [][][][] init with 0. Pointer to itself (allocated struct start).
    + 70 [][][][] init with 0.
    + 74 [][][][] pointer to some other entity struct_168.
    + 7c [][][][] pointer to +f4.
    + 80 [][]     init with 0. Maybe direction.
    + 82 [][]     init as 0x2000 when init PC entity. Used co calculate +1c. Set to +18 as * 30 or * 60.
    + 84 [][]     init with 0. Checked with +6. Store triangle Y here during move.
    + 86 [][]     size of allocated data (0x164).
    + 88 [][][][] some script pointer here.
    + 8c []       pointer to item in stack +8e. Init with 0x10.
    + 8d []       ??? something related with +af in pointer from +70.
    + 8e start of stack for positions in script for function calls.
        + 0 []       1st byte.
        + 1 []       2nd byte.
        + 2 []       3rd byte.
    + 9e [][]     animation script wait timer. Init with 0x0001.
    + a0 [][]     some pos x.
    + a4 [][]     some pos z.
    + a8 [][][][] init with 0. Some flags.
                    0x00000001 - set if bu[80058810 + 3d] == 0, removed otherwise. Reset f4+0, f4+4, f4+c if set.
                    0x000007fe - removed when start animation.
                    0x0001f800 - next frame in direction frame id array (real frames differ for different direction). Usually there id only 1 frame.
                    0x000e0000 - direction id.
                    0x00300000 - store here flags from animation data 0x0003. Looks like this types of direction behaviour in animation.
                                    0x00 - 2 direction sprite.
                                    0x01 - 4 direction sprite.
                                    0x02 - 8 direction sprite.
                    0x0fc00000 - removed when start animation.
                    0x30000000 - init with 2 when start animation.
    + ac [][][][] init with 0x00020000.
                    0x00000010 - invert offset x.
                    0x00000020 - invert offset y.
                    0x001ffe00 - something multiplied and stored to +1c.
                    0xff000000 - animation id to play.
    + b0 [][][][] some flags. Init with 0.
                    0x000000ff - animation to play when we end animation script with 0x81 opcode. Maybe default animation id.
                    0x00000400 - remove this if we restarting animation. Add otherwise.
    + b4 start of some data (+20 points here)
        +  0 [][]     rotation x.
        +  2 [][]     rotation y.
        +  4 [][]     rotation z.
        +  6 [][]     scale x. Init with 0x1000.
        +  8 [][]     scale y. Init with 0x1000.
        +  a [][]     scale z. Init with 0x1000.
        +  c [][]     rot matrix 00.
        +  e [][]     rot matrix 01.
        + 10 [][]     rot matrix 02.
        + 12 [][]     rot matrix 10.
        + 14 [][]     rot matrix 11.
        + 16 [][]     rot matrix 12.
        + 18 [][]     rot matrix 20.
        + 1a [][]     rot matrix 21.
        + 1c [][]     rot matrix 22.
        + 20 [][][][] translation x.
        + 24 [][][][] translation y.
        + 28 [][][][] translation z.
        + 2c [][][][] pointer to allocated data for tiles data.
        + 30 [][][][] pointer to allocated current render tile data ( for all tiles size 0x18).
            + 0 [][]     x tile pos
            + 2 [][]     y tile pos
            + 4 []       texture x
            + 5 []       texture y
            + 6 []       width
            + 7 []       height
            + 8 []       width increase
            + 9 []       height inscease
            + a [][]     tpage
            + c [][]     clut id
            +10 [][][][] 2c808080 - command + color vertex 0
            +14 [][][][] flags
                            0x00000007 - additional tile data id
                            0x00000008 - ???
                            0x00000010 - flip horizontal
                            0x00000020 - flip vertical
        + 34 [][][][] pointer to +124.
        + 38 [][][][] pointer to previous sprite structure (struct_164). Init with 0.
        + 3c []       offset x.
        + 3d []       offset y.
    + f4 start of some data (+7c points here)
        +  0 [][][][] init with 0.
        +  4 [][][][] init with 0.
        +  8 [][][][] init with 0.
        +  c [][]     init with 0. If this is 0xff then do something during initialization.
        +  e [][][][] some tx.
        + 14 [][]     this entity id (used to get access to whole struct from 0x164 struct).
        + 18 [][][][] init with 0. Some pointer.
        + 38 [][][][] init with 0.
    +110 start of texture data for sprite
        +  0 [][][][] pointer to sprite file 1.
        +  4 [][]     texture x.
        +  6 [][]     texture y.
        +  8 [][]     clut x
        +  a [][]     clut y
        +  c [][][][] pointer to sprite data 2.
        + 10 [][][][] pointer to sprite data 0.
    +124 additional tile data (0x08 size 0x08 items)
        +  0 []       translation x
        +  1 []       translation y
        +  2 [][]     rotation x
        +  4 [][]     rotation y
        +  6 [][]     rotation z
