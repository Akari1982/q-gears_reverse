800acfd4 [][][][] ???
800acfda [][]     looks like this is timer when we stack during auto slide down.

800acfe0 [][][][] render buffer index (0 or 1).

800acff4 [][][][] we read something from here during rotation set. We will not set 80115cdc + 108 if this is not 0.

800acffc [][][][] init flag for buffers 800b1588 800b158c 800b1590 800b1594.

800ad008 [][][][] ???
800ad00c [][][][] flag that particle image is loaded. 0 - loaded. 1 - stored.
800ad010 [][][][] ???

800ad018 [][][][] store here entity id for particle.
800ad01c [][][][] store here entity id that inits particle.

800ad038 [][][][] init with 0. Field texture loaded.
800ad03c [][][][] ???

800ad040 [][][][] init with 0. checked in move function (func821cc) as well as some other condition to make entity play run animation if equal to 1.

800ad04c [][][][] if this is 1 then we set number of entities to 1 in script call call_run_script_8().

800ad054 [][][][] init with 0.

800ad070 [][][][] checked if equal to 0 in func83f40.
800ad074 [][][][] delta time from prev update.
800ad078 [][][][] cpu delta time.
800ad07c [][][][] gpu (draw sync) delta time. Updated if debug is set.
800ad07ñ [][][][] store here delta time from last draw.
800ad080 [][][][] 1 if we use cam y pos same as entity y. 0 otherwise.
800ad084 [][][][] set to 0 in cam mode 2. Counter for cam mode 0. Each &3 == 0 we do adjustments to 800aee58 and 800aee5c.
800ad088 [][][][] some incremental counter used while in cam mode 2. When reach 0x41 set cam mode (800aee08) to 0.

800ad0a8 [][][][] store 1 when start load battle.

800ad0b0 [][][][] init with -1.
800ad0b4 [][][][] battle not started (0 - started).
800ad0b8 [][][][] if this is 0 - we dont perform something in call_run_script_8 (move related).
800ad0bc [][][][] if this is 0 - we dont perform something in call_run_script_8 (move related).
800ad0c0 [][][][] init with -1.
800ad0c4 [][][][] field load not started ( 0 - started ).

800ad0c8 [][][][] pointer to field dialogs block (file 7).
800ad0cc [][][][] pointer to field triggers (file 8).
800ad0d0 [][][][] pointer to field entity file (file 5).
800ad0d4 [][][][] number of entity actors.
800ad0d8 [][][][] offset to field scripts in file 5.
800ad0dc [][][][] init with 2.

800ad0e4 [][][][] checked if equal to 1 in func83f40.
800ad0e8 [][][][] some index in 0x1f800000. Maybe move stack?
800ad0ec [][][][] pointer to main map texture stream for loading.

800ad0f4 array of 1 bytes of camera rotation mask for each direction.

800ad43c [][][][] store here 0, 1 during entity script2 3 call checking.

800ad440 array of rotations. Used if 800b1828 == 0. (size 0x02. items 0x10).
            0xf000 - 0x8000 stop (all buttons)
            0xe000 - 0x0400 down (left down right)
            0xd000 - 0x0800 left (left down up)
            0xc000 - 0x0600 down left
            0xb000 - 0x0c00 up (left right up)
            0xa000 - 0x8000 stop (left right)
            0x9000 - 0x0a00 up left
            0x8000 - 0x0800 left
            0x7000 - 0x0000 right (up right down)
            0x6000 - 0x0200 down right
            0x5000 - 0x8000 stop (up down)
            0x4000 - 0x0400 down
            0x3000 - 0x0e00 up right
            0x2000 - 0x0000 right
            0x1000 - 0x0c00 up
            0x0000 - 0x8000 stop (none)
800ad460 array of inverted rotations (press up - go down). Used if 800b1828 != 0. (size 0x02. items 0x10).
800ad480 default material walking rotation (size 0x02. items 0x08)
    000C 000E 0000 0002 0004 0006 0008 000A
800ad49c default material walking speed. (size 0x02. items 0x4)
    0400 0800 1000 2000

800ad778 opcodes table. (size 0x4).
800adb78 extended opcodes table. (size 0x4).

800adf08 data for rotation (each 2 bytes)

800ae74c [][][][] 
800ae750 array of particles sprite data (sprite size and textures). 0x18 size. Stored in field.exe
    4000 4000  0000 0000  0000 0000  4000 0000  0000 4000  4000 4000
    4000 4000  0000 C0FF  4000 0000  8000 0000  4000 4000  8000 4000
    2000 2000  0000 0000  0000 4000  2000 4000  0000 6000  2000 6000
    2000 2000  0000 0000  2000 4000  4000 4000  2000 6000  4000 6000
    2000 2000  0000 0000  4000 4000  6000 4000  4000 6000  6000 6000
    FE00 1F00  0001 0000  0000 6000  FF00 6000  0000 8000  FF00 8000
    1000 2000  0000 E0FF  E000 0000  F000 0000  E000 2000  F000 2000
    1000 6000  0000 A0FF  F000 0000  FF00 0000  F000 6000  FF00 6000
    6000 1000  A0FF 0000  F000 0100  F000 6000  FF00 0100  FF00 6000
    4000 4000  0000 0000  8000 0000  C000 0000  8000 4000  C000 4000
    2000 2000  0000 0000  6000 4000  8000 4000  6000 6000  8000 6000
    4000 4000  0000 0000  0000 8000  4000 8000  0000 C000  4000 C000
    4000 4000  0000 0000  4000 8000  8000 8000  4000 C000  8000 C000
    2000 2000  0000 0000  8000 4000  A000 4000  8000 6000  A000 6000
    2000 2000  0000 0000  A000 4000  C000 4000  A000 6000  C000 6000
    2000 2000  0000 0000  C000 0000  E000 0000  C000 2000  E000 2000
    2000 2000  0000 0000  C000 2000  E000 2000  C000 4000  E000 4000
    4000 4000  0000 C0FF  8000 8000  C000 8000  8000 C000  C000 C000
    2000 2000  0000 0000  C000 4000  E000 4000  C000 6000  E000 6000
    4000 4000  0000 0000  C000 8000  0001 8000  C000 C000  0001 C000
    1000 1000  0000 0000  E000 2000  F000 2000  E000 3000  F000 3000
    + 00 [][]     half width.
    + 02 [][]     half height.
    + 04 [][]     center x.
    + 06 [][]     center y.
    + 08 [][]     u1.
    + 0a [][]     v1.
    + 0c [][]     u2.
    + 0e [][]     v2.
    + 10 [][]     u3.
    + 12 [][]     v3.
    + 14 [][]     u4.
    + 16 [][]     v4.

800ae948 array of some particle data (0x1 size).
    02 03 04 05 06 07 00 01


800aec3c some data during texture set (func910b0).

800aec44 [][][][] ???

800aed04 [][][][] x pos. Set to 0 when shake less than 0.
800aed08 [][][][] y pos. Set to 0 when shake less than 0.
800aed0c [][][][] z pos. Set to 0 when shake less than 0.

800aed2c [][][][] store 0 here at start of movement calc.

800aed54 [][][][] Camera eye x pos. Init with 0.
800aed58 [][][][] Camera eye y pos. Init with 0.
800aed5c [][][][] Camera eye z pos. Init with 0.
800aed64 [][][][] Camera at x pos. Init with 0.
800aed68 [][][][] Camera at y pos. Init with 0.
800aed6c [][][][] Camera at z pos. Init with 0.
800aed74 [][][][] x pos. Init with 0.
800aed78 [][][][] y pos. Init with 0x10000000.
800aed7c [][][][] z pos. Init with 0.
800aed84 [][][][] Camera eye 2 x pos of cam after rot. Init with 0.
800aed88 [][][][] Camera eye 2 y pos of cam after rot. Init with 0.
800aed8c [][][][] Camera eye 2 z pos of cam after rot. Init with 0.
800aed94 [][][][] Camera at 2 x pos of cam after bound alterations. Init with 0.
800aed98 [][][][] Camera at 2 y pos of cam with height addition. Init with 0.
800aed9c [][][][] Camera at 2 z pos of cam after bound alterations. Init with 0.
800aeda4 [][][][] x pos. Init with 0.
800aeda8 [][][][] y pos. Init with 0x10000000.
800aedac [][][][] z pos. Init with 0.
800aedb4 [][][][] set to 0 when cam update. Shake data. Init with 0.
800aedb8 [][][][] set to 0 when cam update. Shake data. Init with 0.
800aedbc [][][][] set to 0 when cam update. Shake data. Init with 0.

800aee08 [][]     camera mode (0, 1, 2). Init with 0.

800aee10 [][]     flags in cam mod 1. Init with 0.
                    0x0001 - use counter 800aee12.
                    0x0002 - use counter 800aee34.
800aee12 [][]     counter. If not 0 increase 800aee14 by 800aee24 and so on. Init with 0.
800aee14 [][][][] some x value.
800aee18 [][][][] some y value.
800aee1c [][][][] some z value.
800aee24 [][][][] increase 800aee14 value.
800aee28 [][][][] increase 800aee18 value.
800aee2c [][][][] increase 800aee1c value.
800aee34 [][]     counter. If not 0 increase 800aee38 by 800aee48 and so on. Init with 0.
800aee38 [][][][] some x value.
800aee3c [][][][] some y value.
800aee40 [][][][] some z value.
800aee48 [][][][] increase 800aee38 value.
800aee4c [][][][] increase 800aee3c value.
800aee50 [][][][] increase 800aee40 value.

800aee58 [][][][] store 1 here if 800b16ac not 0. Init with 8.
800aee5c [][][][] store 1 here if 800b16ac not 0. Init with 8.
800aee60 [][]     some rotation (maybe camera rotation). Init with 0.
800aee62 [][]     init with 0.
800aee84 some rotation and translation matrix inited with 0.
800aeea4 [][]     init with 0.
800aeea6 [][]     init with 0.
800aeea8 [][]     init with 0.
800aeeac [][][][] some flags. Init with 0x00000000.
                    0x00000001 use 800aeef0 decrement counter.
                    0x00000008 use 800aeed4 counter. Add in 0xA4 CameraAngle.
                    0x00000010 use 800aeee4 decrement counter.
                    0x00004000 if this == 0 recalculate cam pos in cam mode 0 or 2.
800aeeb0 [][]     restriction cam x.
800aeeb2 [][]     restriction cam z.
800aeeb4 [][]     restriction cam width x.
800aeeb6 [][]     restriction cam height z.
800aeeb8 [][]     cam x rot. Init with 0.
800aeeba [][]     cam y rot. Init with 0x800.
800aeebc [][]     cam z rot. Init with 0.
800aeec0 [][][][] camera rotate one step size. Init with 0x400000.
800aeec4 [][][][] camera current rotation for rotate by steps. Init with 0x8000000.
800aeec8 []       Dolly Set. Some other disallowed camera direction (not used in manual rot restriction). Only in current check. Init with 0.
800aeec9 []       Dolly Stop. Disallowed camera directions mask. If bit is set then we cant rotate to that direction. Init with 0.
800aeeca [][]     number of camera rotate steps left. Init with 0.
800aeecc [][][][] SCRZ. Copy of upper part of 800aeee8. Used in 800aed88 and 800aed8c calculation. Init with 0x200.
800aeed0 [][]     DIP. Copy from 800aeed8. Init with 0x1e.
800aeed2 [][]     Scale. Copy from 800aeef4. Init with 0x1000.
800aeed4 [][][][] number of steps. If 0 the remove flag 0x00000008 in 800aeeac. Store here param_3 & 7f from opcode 0xA4 CameraAngle. Init with 0.
800aeed8 [][][][] main value. Increase this by 800aeedc. Start value 800aeed0 << 0x10 when call opcode 0xA4 CameraAngle.
800aeedc [][][][] step value. Increase 800aeed8 by this. Calculated in opcode 0xA4 CameraAngle.
800aeee0 [][][][] final camera rotation during step rotation. Init with 0x800.
800aeee4 [][]     number of steps left. Init with 0.
800aeee8 [][][][] Screen Z main value. Increase this by 800aeeec.
800aeeec [][][][] step value. Increase 800aeee8 by this.
800aeef0 [][][][] number of steps. If 0 the remove flag 0x00000001 in 800aeeac. Increment 800aeef4 by 800aeef8. Init with 0.
800aeef4 [][][][] Scale main value. Increase this by 800aeef8.
800aeef8 [][][][] step value. Increase 800aeef4 by this.
800aeefc [][]     if not 0 do shake logic. Init with 0.
800aeefe [][]     number of steps for increase shake 800aef04 800aef08 800aef0c.
800aef00 [][]     in not 0 set itself, 800aeefc and 800aef04 800aef08 800aef0c to 0. Init with 0.
800aef04 [][][][] increased by 800aef10 if 800aeefe not 0. Init with 0.
800aef08 [][][][] increased by 800aef14 if 800aeefe not 0. Init with 0.
800aef0c [][][][] increased by 800aef18 if 800aeefe not 0. Init with 0.
800aef10 [][][][] increment for 800aef04. Init with 0.
800aef14 [][][][] increment for 800aef08. Init with 0.
800aef18 [][][][] increment for 800aef0c. Init with 0.

800aef38 some matrix and translation.
800aef78 some matrix and translation.

800aefe0 [][][][] number of entity objects.
800aefe4 [][][][] pointer to model/sprite entity data (size 0x5c each).
    +   0 [][][][] pointer to allocated 0x24 size struct (only for models).
        +  4 [][][][] pointer to start of model parts header.
        +  8 [][][][] pointer to allocated memory for 1st packets buffer.
        +  c [][][][] pointer to allocated memory for 2nd packets buffer.
        + 12 [][]     ???
        + 14 [][][][] pointer to data for +1c things. (allocated as number of item in +1c * 20 + 14 size)
            header (0x14 size)
            +  0 [][][][] pointer to part data.
            +  4 [][][][] offset to original vertex block +8.
            +  8 [][][][] offset to original additional vertex block +c.
            +  c [][][][] number of items in +1c.
            + 10 [][][][] pointer to next data (+4 from this address);
            data (size 0x20 each)
            +  0 [][][][] init with 8002ff5c. Set to 8008002c during entity initialization.
            +  4 [][][][] init with 0.
            +  8 [][][][] init with 0.
            +  c [][][][] init with 0.
        +18 [][]     x.
        +1a [][]     y.
        +1c [][]     z.
        +20 [][]     ???
    +   4 [][][][] offset to sprite data (0x164 size).
    +   8 [][][][] pointer to allocated memory for model shadow (0x70 size).
        +  0 [][]     vertex0 x.
        +  2 [][]     vertex0 y.
        +  4 [][]     vertex0 z.
        +  8 [][]     vertex1 x.
        +  a [][]     vertex1 y.
        +  c [][]     vertex1 z.
        + 10 [][]     vertex2 x.
        + 12 [][]     vertex2 y.
        + 14 [][]     vertex2 z.
        + 18 [][]     vertex3 x.
        + 1a [][]     vertex3 y.
        + 1c [][]     vertex3 z.
        + 20 some packet for 1st buffer (maybe shadow under model) (size 0x28).
        + 48 some packet for 2nd buffer draw (size 0x28).
            +  3 []       init with 0x09.
            +  4 []       R. init with 0x80.
            +  5 []       G. init with 0x80.
            +  6 []       B. init with 0x80.
            +  7 []       init with 0x2c.
            +  c [][]     uv 0.
            +  e [][]     clut. 100 f3
            + 14 [][]     uv 1.
            + 16 [][]     tex page.
            + 1c [][]     uv 2.
            + 24 [][]     uv 3.
    +   c some matrix (looks like move matrix. Created from rotation and speed vectors).
    +  1e          solid range.
    +  20 [][][][] some X data.
    +  24 [][][][] some Y data.
    +  28 [][][][] some Z data.
    +  2c some matrix.
    +  3c [][][][] some flags.
                    0x10000000 - update render matrix.
    +  40 [][][][] some X data.
    +  44 [][][][] some Y data.
    +  48 [][][][] some Z data.
    +  4c [][][][] pointer to allocated total entity data (0x138 size).
        +   0 [][][][] entity flags (0x000000b0 init).
                       0x00000001: if flag is set - scripts will be not runned. In addition it make entity not solid (maybe this is turn entity off (ie it will not calculated at all))
                       0x00000002: flag added if 0x2A opcode called in this entity.
                       0x00000004: can be set in 0x20_SetFlags.
                       0x00000008: can be set in 0x20_SetFlags.
                       0x00000010: not pushable.
                       0x00000020: can be set in 0x20_SetFlags.
                       0x00000080: not solid.
                       0x00000100: NPC character (initialization with 0xBC and 0x0B opcodes) (movement material check).
                       0x00000200: PC follower (movement material check).
                       0x00000400: PC entity (player entity and this is patry leader. Seems like manipulatable entity) (movement material check).
                       0x00000800: ???
                       0x00001000: ???
                       0x00002000: 
                       0x00004000: if we remove this flag - entity not move, menu not called. Checked in move function. If this flag is set and (hu[800af370] & 0040) && (w[800ad040] == 1) then we set animation_id 2 (run) to play instead of 1 (walk).
                       0x00008000: managed in opcode 0xF6.
                       0x00010000: removed in 0x19_SetPosition.
                       0x00020000: added during initialization with 0x16 (SetPlayableCharacter) opcode.
                       0x00040000: removed during set position by x z.
                       0x00100000: if set then this entity (door) opened else closed.
                       0x00400000: flag added in SpriteGoToPosition opcode. Looks like make step to direction. Set during set position by x z. Maybe update position?
                       0x01000000: if this bit is set we will not perform move (we just skip movement).
                       0x04000000: add this bit if we can move where we want to move (in movement function after all checks).
                       0x08000000: can be set in 0x20_SetFlags. Removed if
        +   4 [][][][] entity flags 2 (0x00000800 init).
                       0x00000001:
                       0x00000002:
                       0x00000078: ignore walkmeshes material flags. 1 - ignore.
                       0x000000c0: for follow entity follow move.
                       0x00000180: ???
                       0x00000200: set if entity not on screen.
                       0x00000800: remove this flag during initialization in 0x0B opcode (with model). Add it in 0xBC opcode. Looks like if this entity has model or not.
                       0x00001000: remove this flag after move is done.
                       0x00002000:
                       0x00080000: managed in opcode 0xF6.
                       0x00200000: removed in 0x19_SetPosition.
                       0x00400000: maybe means that we checked this entity during movement collision check.
                       0x04000000: talk off.
        +   8 [][]     triangle id for walkmesh 0.
        +   a [][]     triangle id for walkmesh 1.
        +   c [][]     triangle id for walkmesh 2.
        +   e [][]     triangle id for walkmesh 3.
        +  10 [][]     walkmesh id (0 by default).
        +  14 [][][][] current triangle material for current walkmesh.
        +  18 [][]     x width of entity. Init with 0x10.
        +  1a [][]     height if entity. Init with 0x60
        +  1c [][]     z width of entity. Init with 0x10.
        +  1e          solid range. Init from +18 (0x10).
        +  20 [][][][] current X.
        +  24 [][][][] current Y.
        +  28 [][][][] current Z.
        +  30 [][][][] modified move vector X.
        +  34 [][][][] modified move vector Y.
        +  38 [][][][] modified move vector Z.
        +  40 [][][][] move vector X. Collect all move intention here.
        +  44 [][][][] move vector Y.
        +  48 [][][][] move vector Z.
        +  50 [][][][] normal X to current triangle.
        +  54 [][][][] normal Y to current triangle.
        +  58 [][][][] normal Z to current triangle.
        +  60 [][]     some X. Init with 0 when set position by x z
        +  62 [][]     some Y. Init with 0 when set position by x z
        +  64 [][]     some Z. Init with 0 when set position by x z
        +  68 [][]     presious pos X.
        +  6a [][]     presious pos Y.
        +  6c [][]     presious pos Z.
        +  6e [][]     init with 0.
        +  70 [][]     some coord applied to X or Y or Z.
        +  72 [][]     store current Y pos here.
        +  74 []       follow entity id. Init with 0xff. We dont calculate interaction with this entity.
        +  75 []       init with 0xff.
        +  76 [][]     move speed. Init with 0x0100.
        +  78          stored script pointers stack (2 size 4 item) (when we go to subroutine we store here return pointer).
        +  80 []       store character id here when we set avatar. Init with 0xff.
        +  81 []       store something from here to memory block + 14. Dialog related. Maybe cursor position.
        +  82 []       dialog width. Init with 0.
        +  83 []       dialog height. Init with 0.
        +  84 [][][][] something dialog related. Init with 0.
        +  88 [][]     dialog pixel width. Init with 0.
        +  8a [][]     dialog pixel height. Init with 0.
        +  8c start of slots (0x8 size 0x8 items)
            +0 [][]     pointer to requested script this slot. Init with 0xffff.
            +2 []       wait byte in this slot. Init with 0.
            +3 []       script id in this slot. Store 0xff  in 0x00_Return. Init with 0xff.
            +4 [][][][] flags for script this slot (script priority among them).
                           0x0000ffff: seems like number of steps to move. (SpriteGoToPosition == 0x0000ffff). Init with 0xffff.
                           0x00030000: remove during init.
                           0x003c0000: priority. Lower value - higher priority. Init with 0x3c.
                           0x00600000: remove during init. Maybe state os script. If 0 then we add new script in this slot.
                           0x01800000: how read argument in move reading function. (SpriteGoToPosition(vf80 x, vf40 y, f flag) - 0x00). Unknown setting. When add auto script during collision add script only if this not 1. Remove during init.
            here 7 more requersed script data 8 bytes each.
        +  cc [][]     current script pointer. Init with 0.
        +  ce []       current script slot id. Used in 0x00_Return. Init with 0.
        +  cf []       byte to get data for Requests. Init with 0.
        +  d0 [][][][] maybe current X. Init with 0 when set position by x z
        +  d4 [][][][] maybe current Y. Init with 0 when set position by x z
        +  d8 [][][][] maybe current Z. Init with 0 when set position by x z
        +  e2 []       init with 0. Current step when opening or closing door.
        +  e3 []       if this is >= 9 then we discrease it by 1 every step in move function. Init with 0. Used as push timer. When this > 20 then we push entity.
        +  e4 [][]     we store character id here. Init with 0x00ff.
        +  e6 [][]     init with 0. we store animation id to play here in SpritePlayAnimation2. Looks like default animation.
        +  e8 [][]     playing animation id. When entity is moving we store here animation id acording to that movement (1,2 and so on). Init with 0.
        +  ea [][]     init with 0xff. We store animation id to play here in SpritePlayAnimation.
        +  ec [][][][] init with 0 when set position by x z. Init with 0.
        +  f0 [][][][] init with 0 when set position by x z.
        +  f4 [][]     init with 0x1000. scale X.
        +  f6 [][]     init with 0x1000. scale Y.
        +  f8 [][]     init with 0x1000. scale Z.
        +  fc []       init with 0x80.
        +  fd []       init with 0x80.
        +  fe []       init with 0x80.
        +  ff []       init with 0x80.
        + 100 []       init with 0x80.
        + 101 []       init with 0x80.
        + 102 [][]     Init with two random bytes.
        + 104 [][]     we store rotation data here, also set during DialogShow (flags). Seems like current rotation. Init with 0x8000.
                        0x0fff - rotation.
                        0x8000 - if not set then perform move in this direction.
        + 106 [][]     we store rotation data here. Init with 0x8000. Add 0x8000 flag when start script.
        + 108 [][]     we store rotation data here (if 800acff4 == 0). Init with 0x8000.
        + 10d []       init with 0xff.
        + 110 [][][][] pointer to something with size 0xc.
            + 0 [][]     x rot
            + 2 [][]     y rot
            + 4 [][]     z rot
            + 8 [][]     store here distance between entity and follower.
        + 114 [][][][] pointer to some quad data. This quad restrict whole move area.
        + 118 [][][][] pointer to allocated 0x80 byte for +1c data. Size 0x4 for each +1c item.
            +  0 [][][][] init with 0.
        + 11c [][]     rotation stored to +106 sometimes.
        + 11e [][]     init with 0x0200.
        + 120 [][][][] init with 0. Pointer to some data.
        + 124 [][]     init with -1. If this not -1 then we allocate +120 struct.
        + 126 [][]     init with 0.
        + 124 [][][][] init with 0x0000ffff.
        + 128 [][][][] init with 0x0000ffff.
        + 12c [][][][] flags.
                        0x00000003 - remove during entity init.
                        0x0000001c - remove during entity init. clut Y. used for avatar render.
                        0x00000020 - if set - door opening or closing. Remove during init.
                        0x000001c0 - current script stack pointer.
                        0x00000e00 - remove during entity init. Rotation dir.
                        0x00001000 - remove during entity init. Checked in func81aa8(). If set then struct_138 + 114 allocated.
                        0x0000e000 - index in model pointers 801e8670.
                        0x00030000 - remove during entity init.
                        0x0ffc0000 - remove during entity init.

        + 130 [][][][] flags.
                        0x000001ff - remove during entity init.
                        0x0007fe00 - remove during entity init.
                        0x0ff80000 - remove during entity init.
        + 134 [][][][] flags.
                        0x00000060 - remove during entity init.
                        0x00000080 - set if struct_138 + 110 is allocated.
    +  50 [][]     X rotation.
    +  52 [][]     Y rotation (door opened with this).
    +  54 [][]     Z rotation.
    +  58 [][]     flags
                   0x000c: 0 - not calculate lighting
                           1 - calculate lighing but not store it
                           2 - calculate and store lighing for the first time and then use stored data
                           3 - calculate lighing and store it
                   0x0010: ???
                   0x0020: set if 0x0040 flag == 1 during init. Set in 0x29 and 0x23(only) opcode. Remove if we init this entity as player.
                   0x0040: model or sprite not loaded yet.
                   0x0080: if this is 0 - we set height for model depending on triangle.
                   0x0200: 
                   0x0f00: if at least one of this bits exist - we perform move.
                   0x2000: init +1c in model data if this is set.
                   0x4000: ???
    +  5a [][]     init with 0.
                   0x0001 - sprite inited.

800aefe8 [][][][] pointer to field model pack (field file 2).
800aefec [][][][] pointer to waklmesh data (field file 1).
800aeff0 [][][][] offset to 2dsprite block in field file.
800aeff4 [][][][] offset to material data in walkmesh file.
800aeff8          array of 4 offsets to triangle data.
800af008          array of 4 offsets to triangle vertex data.
800af018          array of 4 blocks number of triangles.
800af028 [][][][] number of walkmesh blocks.

800af0fc [][]     particle texture x.
800af0fe [][]     particle texture y.
800af100 [][]     particle texture width.
800af102 [][]     particle texture height.

800af104 some matrix and translation.

800af144 [][][][] store here particle texture from vram (3c0 100 40 100).
800af148 [][][][] every time we init entity model with func76150 we increment this by 1.

800af150 [][][][] store here how much opcodes to execute in run_script().

800af1e4 [][][][] number of materials.

800af1f0 [][][][] current entity id in script call.
800af1f4 [][]     store 0xff40 here if we init player entity.

800af2f8 some render buffer.
800af320 rect for some render effect.
    + 0 [][]     x.
    + 2 [][]     y.
    + 4 [][]     w.
    + 6 [][]     h.
800af328 some render buffer.
800af32c []       store here priority

800af370 [][]     current button mask for controller 1. (1 = pressed, 0 = released)
                    0x0001 L2
                    0x0002 R2
                    0x0004 L1
                    0x0008 R1
                    0x0010 Triangle
                    0x0020 Circle
                    0x0040 Cross
                    0x0080 Square
                    0x0100 Select
                    0x0200 L3
                    0x0400 R3
                    0x0800 Start
                    0x1000 Up
                    0x2000 Right
                    0x4000 Down
                    0x8000 Left
800af374 [][]     current button mask for controller 2 (details in 800af370).

800af4c0 [][][][] if this is 0 then we execute script till the end (or until wait type opcode). If 1 together with 800af594 then we end script cycle.

800af518 [][][][] particle bank. Init with 0.

800af528 [][][][] address to controller 1 system button buffer.
800af52c [][][][] address to controller 2 system button buffer.

800af530 [][]     mouse horizontal speed.
800af534 [][]     mouse vertical speed.

800af53c [][][][] mouse horizontal position controller 1.
800af540 [][][][] mouse horizontal position controller 2.
800af544 [][][][] mouse vertical position controller 1.
800af548 [][][][] mouse vertical position controller 2.

800af54c [][][][] offset to struct 0x138 for current entity in script call.

800af594 [][][][] seems like return result from function (wait opcode returns 1). Set to 0 at start of run_script function.

800af5dc array of particle entities id. 0x40 items 0x2 size.

800af7a0 temp struct for init patricle instance. Description at 800c2dec.

800af588 [][][][] used for particle scaled render.

800afb8c [][][][] offset to struct 0x5c for current entity in script call.

800afb90 array of 0x16 structs 0x70 size.

800b0984 array of 0x40 bool value. 0x1 size. Set to 1 if patricle is inited.

800b144c copy first 0x100 byte of field file here.

800b154c [][]     activate field distortion effect rendering. Init with 0.
800b154e [][]     set to finish distorion update after making it normal.
800b1550 [][]     number of steps.
800b1554 [][][][] val 1. Init with 0.
800b1558 [][][][] val 2. Init with 0.
800b155c [][][][] val 3. Init with 0.
800b1560 [][][][] val 4. Init with 0.
800b1564 [][][][] val 5. Init with 0.
800b1568 [][][][] val 6. Init with 0.
800b156c [][][][] step size for val 1.
800b1570 [][][][] step size for val 2.
800b1574 [][][][] step size for val 3.
800b1578 [][][][] step size for val 4.
800b157c [][][][] step size for val 5.
800b1580 [][][][] step size for val 6.
800b1584 [][]     ??? Init with 0.
800b1586 [][]     ??? Init with 0.
800b1588 pointer to buffer 0 for 0x10 copy rectangle pachets. 0x180 size. 0x18 each packet.
800b158c pointer to buffer 1 for 0x10 copy rectangle pachets. 0x180 size. 0x18 each packet.
800b1590 pointer to buffer 0 for 0x11 x 0x14 textured quads render data. 0x3840 size. 0x28 each quad.
800b1594 pointer to buffer 0 for 0x11 x 0x14 textured quads render data. 0x3840 size. 0x28 each quad.

800b15b0 array of some 0x58 size packets.

800b1648 [][][][] activated windows mask. If 1 then we lock all dialog script call.
800b164c [][]     additional rotation for movement (can be set from script).

800b1654 [][][][] increment during each entity initialization.

800b1660 [][][][] base walking speed. Move length (1 << 0xc) (can be set from script).

800b168c [][][][] store here id of sound to play.

800b16a0 []       if this is not 0 we nulify triangle material mask. If this not 0 we do not run scripts for party character entity (in call_run_script_8 (move related)).
800b16a1 []       if 0 then we use entity y pos for camera y.

800b16aa [][]     if this != 8 then dialog speed doubled (store 2 instead of 1)
800b16ac [][][][] increase by 2 if we set camera direction by opcode 0xC7 CameraRotate to 0. Store 1 to 800aee58 and 800aee5c if this not 0 and decrement.

800b1740 [][][][] store entity id which controls party leader here.

800b1764 [][]     store here value from 800b1774 + encounter * 2
800b1768 [][][][] decrement this by 1 each func7889c (encounter) call and when it reached 0 reinit 800b1774 array.
800b176c [][][][] after this number of calls we reinit 800b1774 array.
800b1770 [][][][] number of used 800b1774 values.
800b1774 array of 0x20 encounter random values (0x2 bytes each).

800b1810 [][]     mask of 4 music channel to stop during next field load.
800b1812 [][]     store entity id which controls party leader here.

800b1818 [][]     do something animation related during movement if this is 0.
800b181a [][]     maybe default animation id. Init with 3.
800b181e [][]     init with 0x40.
800b1820 [][]     init with 0xff.
800b1829 []       store this value to 80058be8 during battle load.
800b182a []       init with 0x5.

800b1834 array of stored index to party character data (somewhere in 800b09d8) (0x4 size)

800b1848 [][][][] temp entity id for particle system.
800b184c [][][][] temp render settings for particle system.
800b1850 [][][][] temp rotation x for particle system.
800b1854 [][][][] temp rotation y for particle system.

800b1858 [][][][] temp particle id for particle.

800b1970 render data.
    +00 DRAWENV struct (0x5c size).
    +5c RECT struct (0x8 size).
    +64
    +b8 DISPENV struct (0x14 size).
    +cc depth sorted array of lists.
    +40d0
    +80f0 otag

800c1b60 [][][][] 0 if debug mode.

800c1b68 [][]     pressed button mask for controller 1 (details in 800af370).

800c1b6c dialogs struct (0x498 size)(4 items)
    + 18 [][]     store 0x64 here in case of new row. Maybe how much symbols in new row we can put.
    + 1a [][]     index into +40 array.
    + 1c [][]     position x.
    + 1e [][]     position y.
    + 20 [][]     width in pixels.
    + 22 [][]     width in something (multiply by 4 to get width in pixels).
    + 24 [][]     height in number of rows.
    + 26 [][]     texture V (ty).
    + 28 [][]     some flags. Init with 0.
                    0x0008: wait for player input flag. Add this flag if we met 0x00_Return text opcode and there is no stored pointer or if we met 0x03_Wait text opcode.
                    0x0048: add this flags if we met 0x02_New text opcode.
                    0x0080: stored pointer for text. If set and met 0x00_Return() in text then we remove this flag, and jump to stored pointer +38.
                    0x0200: add this flag in 0x0F0D text opcode.
    + 2a [][]     width in something + 3.
    + 2c [][]     row height. Store 0xe here.
    + 34 [][][][] pointer to current position in text data
    + 38 [][][][] some pointer.
    + 40 [][][][] pointer to memory with size number of rows * 0x60.
        + 00 buffer1 packet for sprite 0x65 (0x14 size).
        + 14 buffer1 packet for sprite 0x65 (0x14 size).
        + 28 buffer2 packet for sprite 0x65 (0x14 size).
        + 3c buffer2 packet for sprite 0x65 (0x14 size).
        + 50 [][]     texture u.
        + 52 [][]     texture v.
        + 54 [][]     dialog_width + 3 in something.
        + 56 [][]     init with 0xd. texture height.
        + 58 [][]     init with 0x0. Store here rendered width in something (same as +18 in window)
        + 5a []       current row & 1.
        + 5b []       current row.
        + 5c []       texture v.
        + 5e [][]     hu[80058c70] or hu[80058ab0].
    + 44 [][][][] pointer to memory with size (width in something + 3) * 0x1c.
    + 48 buffer1 packet for render settings 0xe1 and 0xe2 (0xc size).
    + 54 buffer2 packet for render settings 0xe1 and 0xe2 (0xc size).
    + 60 buffer1 packet transparent black rectangle (0x10 size).
    + 70 buffer2 packet transparent black rectangle (0x10 size).
    + 80 []       default number of letters to read.
    + 81 []       letters to read at once. How much text read in one function call. 2 symbols opcodes counted as one.
    + 82 []       stored number of letters to read (to restore if we want).
    + 83 []       state. Init with 0. Set to 1 if we met 0x00 text opcode. Set to 2 if we met 0x02 opcode. Set to 3 if we met 0x03 text opcode.
    + 84 []       if 1 then window needs to be closed. Init with 0.
    + 85 []       init with 0.
    + 86 []       init with 0xff.
    + 88 [][][][] +0016 from memory block.
    + 8c [][][][] +0018 from memory block.
    + 90 [][][][] +001a from memory block.
    + 94 [][][][] +001c from memory block.
    + 98 [][]     +001c from memory block.
    + 9a [][]     init with 0. Number of +a4 element in list.
    + 9c [][]     wait timer. Init with 0.
    + 9e [][]     store value for 0x0F0E text opcode here.
    + a0 [][]     store value for 0x0F0E text opcode here.
    + a4 [][][][] init with 0. Pointer to list of allocated memory for dialog text data.
        +00 [][][][] pointer to next allocated memory element.
        +08 [][][][] offset to dialog text data.
    + a8 [][][][] offset to dialog text data.
    + ac [][]     dialog x.
    + ae [][]     dialog y.
    + b0 [][]     dialog width.
    + b2 [][]     dialog height.
    +37c [][]     store -1 during dialog init.
    +37e []       sum this and 382 and store to scruct 138 + 81 in entity when circle is pressed. Maybe start pos of cursor in select dialog.
    +382 []       related with +37e. Maybe offset pos of cursor in select dialog.
    +3c4 [][]     we store 0 here if 37c != 0 and 83 != 0 and 28 flag 0x0008 is set
    +40c [][]     some flags.
    +40e [][]     checked if this == 0 when search for dialog.
    +410 [][]     looks like order of dialogs. 0-top. 0xffff if window not inited.
    +412 [][]     ???
    +414 [][]     Set to 0 to close window. Usually 0xffff (not used in usual window render)
    +416 [][]     some entity id??? maybe owner.
    +418 [][]     some entity id???
    +450 buffer1 for avatar.
    +478 buffer2 for avatar.
        +00 []       u0.
        +01 []       v0.
        +02 [][]     CLUT.
        +08 []       u1.
        +09 []       v1.
        +10 []       u2.
        +11 []       v2.
        +18 []       u3.
        +19 []       u4.
    +47a [][]     buf2 CLUT for avatar.
    +494 []       1 if we render avatar, 0 otherwise.
    +495 []       store here avatar id from +80 from entity 138 struct.

800c2dcc [][]     pressed button mask for controller 2 (details in 800af370).
800c2dd4 [][]     repeated button mask for controller 1 (details in 800af370).
800c2ddc [][]     repeated button mask for controller 2 (details in 800af370).

800c2de4 [][][][] store -1 here at start of movement.

800c2dec array of pointers to particle system data (0x40 items 0x4 size)(same as 800af7a0)
         each particle system data is array of 0x8 items 0x78 size.
    + 00 [][]     init with 0.
    + 02 [][]     start wait. Init with 0.
    + 04 [][]     end wait (ttl). Init with 80. If 0x7fff then this particle will not die.
    + 06 [][]     max number of particles. Init with 0.
    + 08 [][][][] speed. Init with 8000.
    + 0c [][]     start x pos.
    + 0e [][]     start y pos.
    + 10 [][]     start z pos.
    + 14 [][]     end x pos. Init with 0.
    + 16 [][]     end y pos. Init with -3e8.
    + 18 [][]     end z pos. Init with 0.
    + 1c [][]     gravity x accel. Init with 0.
    + 1e [][]     gravity y accel. Init with 0.
    + 20 [][]     gravity z accel. Init with 0.
    + 24 [][]     speed coef. Init with 1.
    + 26 [][]     start range random. Init with 0.
    + 28 [][]     end range random. Init with 100.
    + 2a [][]     render settings. Init with 0.
                  0x0001 - random rotation on.
                  0x0006 - particles sort (0 - top, 1 - middle, 2 - normal, 3 - back)
                  0x0030 - type of patricle:
                           0 - use entity pos and rot, ignore scale.
                           1 - use data from +72, +74.
                           2 - use entity matrix for particle pos.
                           3 - use entity pos rot and scale. Ignore particle data.
                  0x0040 - use fized z variation pos.
                  0x0080 - use distance from emitter +26.
                  0x0300 - color mode (0 - 1.0*Bk + 1.0*Fw, 1 - 1.0*Bk - 1.0*Fw, 2 - 1.0*Bk + 0.25*Fw, 3 - 0.5*Bk + 0.5*Fw)
    + 2c [][][][] pointer to allocated particles memory. Size is sprite number * c0.
        + 00 [][]     init with 0. If this not 0 then we will not kill particle after ttl.
        + 02 [][]     wait value.
        + 04 [][]     ttl.
        + 06 [][]     z rot.
        + 08 [][][][] x pos.
        + 0c [][][][] y pos.
        + 10 [][][][] z pos.
        + 18 [][][][] x speed.
        + 1c [][][][] y speed.
        + 20 [][][][] z speed.
        + 28 [][][][] x accel.
        + 2c [][][][] y accel.
        + 30 [][][][] z accel.
        + 38 [][]     x trans.
        + 3a [][]     y trans.
        + 3c [][]     z trans.
        + 40 [][]     x trans add.
        + 42 [][]     y trans add.
        + 44 [][]     x trans add.
        + 48 []       R.
        + 49 []       G.
        + 4a []       B.
        + 4c []       R add (maybe -X).
        + 4d []       G add (maybe -X).
        + 4e []       B add (maybe -X).
        + 50 start of quad packet for buffer 1.
        + 78 start of quad packet for buffer 2.
        + a0 [][]     x1. From emitter particle data.
        + a2 [][]     y1. From emitter particle data.
        + a4 [][]     z1. Always 0.
        + a8 [][]     x2. From emitter particle data.
        + aa [][]     y2. From emitter particle data.
        + ac [][]     z2. Always 0.
        + b0 [][]     x3. From emitter particle data.
        + b2 [][]     y3. From emitter particle data.
        + b4 [][]     z3. Always 0.
        + b8 [][]     x4. From emitter particle data.
        + ba [][]     y4. From emitter particle data.
        + bc [][]     z4. Always 0.
    + 30 array of 0x8 offsets for all directions sprites. 0x4 size.
        + 0 [][]     rotation x offset. Init with 0.
        + 2 [][]     rotation z offset. Init with 0.
    + 50 [][]     scale. Init with 800.
    + 52 [][]     entity id (set entity id from script called).
    + 54 [][]     shape (particle id). Init with 0.
    + 56 [][]     particle start wait. Init with 1.
    + 58 [][]     particle end wait (ttl). Init with 1c.
    + 5a [][]     scale x. Init with 1c8.
    + 5c [][]     scale y. Init with 1c8.
    + 5e [][]     z trans. Init with 1c8.
    + 62 [][]     scale offset x. Init with 20.
    + 64 [][]     scale offset y. Init with 20.
    + 66 [][]     z trans add. Init with 20.
    + 6a []       R. Init with 80.
    + 6b []       G. Init with 20.
    + 6c []       B. Init with 0.
    + 6e []       R offset. Init with -4.
    + 6f []       G offset. Init with -1.
    + 70 []       B offset. Init with 0.
    + 72 [][]     rotation x.
    + 74 [][]     rotation y.
    + 76 [][]     rotation z.

800c2f18 [][][][] min horizontal movement for mouse controller.
800c2f20 [][][][] min vertical movement for mouse controller.
800c2f24 [][][][] max horizontal movement for mouse controller.
800c2f28 [][][][] max vertical movement for mouse controller.

800c2f3c memory block. used in get_bytes_from_800C2F3C.
+ 0000 [][]     progress.
+ 0002 [][]     spawn slot id (used when spawn pc).
+ 0004 [][]     current field id.
+ 0006 [][]     direction of pc entity during spawn.
+ 0008 [][]     direction of camera.
+ 0012 [][]     increment by 1 when we change field.
+ 0014 [][]     related to displayed window. Store something here during 0x9c opcode. Maybe cursor position.
+ 0016 [][]     slot1 for dialog temp variable.
+ 0018 [][]     slot2 for dialog temp variable.
+ 001a [][]     slot3 for dialog temp variable.
+ 001c [][]     slot4 for dialog temp variable.
+ 003c [][]     store loaded field id to load here.
800c373c [][][][] maybe number of inited windows.
800c3740          end of memory block.

800c3740 [][][][] pointer to 800b1970 (otag).

801e85f4 model data to init (0x8 size 0x8 items).
+0 [][][][] pointer to array that contains pointer to all model parts (dynamicly allocated).
+4 [][][][] number of parts in this model.



801e8634 [][][][] Temp index of currently inited model (index into 801e85f4). Store address of inited model 3d data here.
801e8638 [][][][] store address model 3d data here.

801e8670 looks like array of pointers to the model data? If this is not 0 during load - then we will not load model.



model struct (size 0x134)
+  0 [][][][] pointer to 801e85f4 item of this model.
+  4 [][][][] pointer to allocated place for skeleton (0x7c size).
+  8 [][][][] pointer to animation sub file addreses animation_0_1, animation_0_2 and so on.
+  c [][][][] init with 0.
+ 10 [][][][] init with 0. Store pointer to animation file like animation_0_1-animation_0_X.
+ 14 [][][][] pointer to animation_0_0.
+ 18 [][][][] init with 0.
+ 1c [][]     store 2 bytes from model_3_0 + 8 here.
+ 1e [][]     init with -1.
+ 20 []       model id or some other index???
+ 22 []       init with 0.
+ 23 []       init with 0.
+ 24 [][]     store 2 bytes from model_3_0 + 2 here.
+ 26 [][]     store 2 bytes from model_3_0 + 4 here.
+ 28 [][]     store 2 bytes from model_3_0 + 6 here.
+ 2a []       store byte from model_3_0 + a here.
+ 2b []       init with 0.
+ 34 []       init with 1.
+ 35 []       init with 0.
+ 36 []       init with 0.
+ 37 []       init with 0.
+ 38 []       init with 0.
+ 39 []       init with 0x6b.
+ 3a [][]     init with -1.
+ 3c [][]     init with -1.
+ 40 [][]     init with 0.
+ 42 [][]     init with 0.
+ 4a [][]     store 2 bytes from model_3_0 + c here.
+ 4c [][][][] init with 0.
+ 50 [][][][] init with 0.
+ 54 [][][][] init with 0.
+ 58 [][]     init with 0.
+ 5c []       init with -1.
+ 62 []       store 0 here during init.
+ 63 []       store 0 here during init.
+ 70 [][]     init with 0. Some root X rotation.
+ 72 [][]     init with 0. Some root Y rotation.
+ 74 [][]     init with 0. Some root Z rotation.
+ 76 [][]     init with 0. Some addition to +70.
+ 78 [][]     init with 0. Some addition to +72.
+ 7a [][]     init with 0. Some addition to +74.
+ 7c [][]     init with 0. X something.
+ 7e [][]     init with 0. Y something.
+ 80 [][]     init with 0. Z something.
+ 82 [][]     init with 0. Some addition to +7c.
+ 84 [][]     init with 0. Some addition to +7e.
+ 86 [][]     init with 0. Some addition to +80.
+ 88 [][]     init with 0.
+ 8a [][]     init with 0.
+ 8c [][]     init with 0.
+ 8e [][]     init with 1.
+ 90 [][]     TX as 0x3c0. or -1 if default TX TY clutX and clutY not used.
+ 92 [][]     TY as 0x100.
+ 94 [][]     clutX.
+ 96 [][]     clutY.
+ 98 [][]     init with -1.
+ ac [][][][] store animation file pointer here (or 0).
+ b0 [][][][] store pointer to animation_1 here.
+ b8 start of two quad monochrome textured packet (0x28 size)
+10a [][]     store here 2 bytes from 801e863c.
+10c []       store 1 byte from model_3_0 + e here. Number of something.
+10d []       store 1 byte from model_3_0 + 12 here. Number of something.
+10e []       store 1 byte from model_3_0 + 10 here. Number of something.
+110 [][][][] pointer to allocated place for something with size 0x70.
+118 [][][][] pointer to allocated place for something with size 0x30.



allocated place for skeleton ((number_of_bones + 1) * 0x7c)
+  0 [][][][] store 0 here or pointer to parent bone data.
+  4 []       store 1 here during init.
+  5 []       store 1 here during init.
+  6 []       store 0 here during init. In case of root store 1.
+  7 []       store 1 here during init. In case of root store 0. Some flags.
+  8 [][]     store part id here during init (ffff if there is no part).
+  a []       index of bone? start with 1. Increment with each bone. In case of root store number of bones here.
+ 2c          matrix in standart GTE format.
+ 4c [][]     store 1000 here during init. Scale X?
+ 4e [][]     store 1000 here during init. Scale Y?
+ 50 [][]     store 1000 here during init. Scale Z?
+ 52 [][]     store 0 here during init.
+ 54 [][]     store 0 here during init. Bone rotation X.
+ 56 [][]     store 0 here during init. Bone rotation Y.
+ 58 [][]     store 0 here during init. Bone rotation Z.
+ 5c [][][][] store 0 here during init. Bone translation X.
+ 60 [][][][] store 0 here during init. Bone translation Y.
+ 64 [][][][] store 0 here during init. Bone translation Z.
+ 68 [][][][] pointer to 1st packets buffer.
+ 6c [][][][] pointer to 2nd packets buffer.
+ 70 [][][][] store 0 here during init. Pointer to some rotation data (allocated place for skeleton animations data).
+ 74 [][][][] store 0 here during init. Pointer to some translation data (allocated place for skeleton animations data).
+ 78 [][][][] store 0 here during init.



allocated place for skeleton animations data.
+ 00 []       store 1 here.
+ 01 []       store 0 or 1 here (argument 3 from 0x13 animation opcode)
+ 02 []       store argument 0 from 0x13 animation opcode + 3.
+ 03 []       store id of animation file here.
+ 04 [][]     store current rotation X or translation here.
+ 06 [][]     store current rotation Y or translation here.
+ 08 [][]     store current rotation Z or translation here.
+ 0a [][]     store initial or difference between initial and current rotation X or translation here.
+ 0c [][]     store initial or difference between initial and current rotation Y or translation here.
+ 0e [][]     store initial or difference between initial and current rotation Z or translation here.
+ 10 [][]     store 0 here.
+ 12 [][]     store argument 4 from 0x13 animation opcode here or 1 if argument == 0.



allocated place for something with size 0x70. Number given in model struct with size 0x134 at +10c, offset at +110.
+  0 [][]     store -1 here during initialization.
+  8 [][][][] store 0 here during initialization.



allocated place for something with size 0x30. Number given in model struct with size 0x134 at +10c, offset at +118.
+  4 [][][][] store 0 here during initialization.
+  8 [][][][] store 0 here during initialization.
+  c [][][][] store 0 here during initialization.
+ 1a [][]     store 0 here during initialization.



allocated place for something with size 0x24. Number given in model struct with size 0x134 at +10d, offset at +118.
+  4 [][][][] store 0 here during initialization.
+  8 [][][][] store 0 here during initialization.
+  c [][][][] store 0 here during initialization.
+ 1a [][]     store 0 here during initialization.