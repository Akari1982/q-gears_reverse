//////////////////////////////////////////////////////////
// read_two_bytes_with_80
a0 - offset from current script pointer
v0 - 2 bytes interpreted from value from given offset

read data from given offset

if (0x8000 bit in data is set)
{
    this is immediate value and we return all bit from 0x7FFF
}
else
{
    A0 = A0 & ffff
    get_bytes_from_800C2F3C
}
//////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////
// read_two_bytes_based_on_flag_80
// read_two_bytes_based_on_flag_40
// read_two_bytes_based_on_flag_20
// read_two_bytes_based_on_flag_10
// read_two_bytes_based_on_flag_08
// read_two_bytes_based_on_flag_04
// read_two_bytes_based_on_flag_02
// read_two_bytes_based_on_flag_01
a0 - offset from current script pointer
a1 - flags

if (if bit in function name in A1 set)
{
    read_two_bytes_signed;
}
else
{
    read_two_bytes_unsigned;
    A0 = V0 & ffff
    get_bytes_from_800C2F3C [$800a25a8]
}

//////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////
// read_two_bytes_unsigned
A0 - offset from current script pointer

V0 = w[800AF54C];
V0 = hu[V0 + CC];
V1 = w[800AD0D8];
A1 = V1 + V0 + A0;
V1 = bu[A1 + 1];
V0 = bu[A1 + 0];
V1 = V1 << 8;
V0 = V0 | V1;
return V0;
//////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////
// read_two_bytes_signed
A0 - offset from current script pointer

V0 = w[800AF54C];
V0 = hu[V0 + CC];
A1 = w[800AD0D8];
A1 = A1 + V0 + A0;
V1 = bu[A1 + 1];
V0 = bu[A1 + 0];
V1 = V1 << 8;
V0 = V0 + V1; addu
V0 = V0 << 10;
V0 = V0 >> 10;
return V0;
//////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////
// get_bytes_sign
A0 - [00000000][00xxxxx0] => x     (memory slot id)
A0 - [xxxxxxxx][xx000000] => x * 4 (block with signs)

V0 = A0 >> 6;
V0 = V0 << 2;

V1 = w[800ad0d0];
V0 = V0 + V1;
V0 = w[V0];

A0 = A0 >> 1;
A0 = A0 & 1F;
V1 = 1 << A0;
V0 = V0 & V1; // bit set - 1        0
V0 = 0 < V0;  // bit set - 1        0
V0 = 0 - V0;  // bit set - FFFFFFFF 0
return V0;
//////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////
get_bytes_from_800C2F3C
A0 - [xxxxxxxx][xxxxxxx0] => x (offset to read)
A0 - [xxxxxxxx][xx000000] => x * 4 (offset to sign)
// bit set - unsigned

read_slot = A0 >> 1;

V0 = w[800ad0d0];
V1 = A0 >> 6;
V1 = w[V0 + V1 * 4]; // sign block

if (V1 & (1 << (read_slot & 1f))) // if bit in sign block is set
{
    V0 = hu[800c2f3c + read_slot * 2];
}
else
{
    V0 = h[800c2f3c + read_slot * 2];
}

return V0;
//////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////
// get_script_offset
V0 = w[800ad0d0];
return hu[V0 + 84 + A0 * 40 + A1 * 2];
//////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////
put_bytes_to_800C2F3C
A2 = A0 >> 1;
V0 = A2 << 1;
[800c2f3c + V0];
//////////////////////////////////////////////////////////



////////////////////////////////////////////////////////
// convert_magic_to_pc_id
if (A0 == ff)
{
    return w[80061c28];
}
else if (A0 == fe)
{
    return w[80061c24];
}
else if (A0 == fd)
{
    return w[80061c20];
}
else if (A0 == fc)
{
    return ff;
}

return A0;
////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////
// get_entity_id_from_opcode
V0 = w[800af54c];
V0 = hu[V0 + cc];
V1 = w[800ad0d8];
V0 = V0 + A0;
V1 = V1 + V0;
entity_id = bu[V1];

if (entity == ff)
{
    entity_id = w[80059ad4];
}
else if (entity == fe)
{
    entity_id = w[80059ad8];
}
else if (entity == fd)
{
    entity_id = w[80059adc];
}
else if (entity == fb)
{
    entity_id = w[800af1f0];
}

return entity_id;
//////////////////////////////////////////////////////////