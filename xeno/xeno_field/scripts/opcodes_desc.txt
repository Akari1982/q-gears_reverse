entity_id. (FF - 1st character in party entity id, FE - 2nd character in party entity id, FD - 3rd character in party entity id, FB - current entity)
flag used to set type of data for vfXX type.
u8   unsigned byte.
s16  signed two bytes.
u16  unsigned two bytes.
vf40 variable from memory wich can be immediate value if bit 0x40 in "f" set.
vf80 variable from memory wich can be immediate value if bit 0x80 in "f" set.
v    variable from memory.
v80  variable from memory which can be immediate value if 0x8000 bit is set.



0x0C EncounterInf()
        Size: 1 (waitable).
        Infinite encounter routine (calls opcode 0xA7). Set script to wait after each call and nether moves script forward.

0x4A SpriteGoToPosition( vf80 x, vf40 y, f flag )
        Size: 6 (waitable)
        Set ???

0x9C ()
        Size: 1 (waitable)
        Keep waiting if current entity has opened windows.

0xA7 Encounter()
        Size: 1
        Encounter routine.

0xF7 EncounterSetup( v80 reinit_timer, v80 number_of_encounter_slot )
        Size: 5
        Set setup timer and number of slots used in encounter. Reinit encounter slots with random values.





























//////////////////////////////////////////////////////////////////
// ENTITY_INIT
0x0B_EntityNPCSpriteInit( v80 sprite_id );
    init npc sprite.

0x16_EntityPCInit(v80 character_id);
    init values for player character entity with model.

0xBC_EntityNoModelInit();
    init values for entity without model.
//////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////
// ENTITY_MANAGEMENT
0x29_EntityTurnOff(entity_id);
    turn entity off (script will not be runned, close dialog from this entity and so on).
//////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////
// WINDOWS AND DIALOGS
0xD2_DialogShow(u16 dialog_id, u8 flags);

0xFE0D_SetAvatar(v80 character_id);
    assign avatar for current entity.
//////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////
// UNKNOWN
0x23();
    add flag 0020 in 80114f2c + 58 of current entity.

0x2A();
    add flag 00000002 in 80115cdc + 0 of current entity.
//////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////
// SCRIPT MANAGEMENT
0x00 Return();
    ends current script execution and frees current slot.

0x01 JumpTo( u16 address );
    set current script pointer to given address.

0x02 ConditionalJumpTo( u16 value1, u16 value2, u8 flag, u16 address );
    flag & 0xf0 - how read values.
        0x00 - v value1, v value2, sign from first value is used for both.
        0x40 - v value1, s16 value2, sign from first value is used for both.
        0x80 - s16 value1, v value2, sign from second value is used for both.
        0xc0 - s16 value1, s16 value2.
    flag & 0x0f - condition.
        0x00 - value1 == value2
        0x01 - value1 != value2
        0x02 - value1 >  value2
        0x03 - value1 <  value2
        0x04 - value1 >= value2
        0x05 - value1 <= value2
        0x06 - value1 &  value2
        0x07 - value1 != value2
        0x08 - value1 |  value2
        0x09 - value1 &  value2
        0x0A - (0 NOR value1) &  value2
    do condition with two values.
    if true continue with next opcode, jump otherwise.

0x26 Wait( v80 time );
    stop script execution till script will be called given number of times. (each time special variable descrease by 1).

0x84 ProgressLessEqualJumpTo( v80 value, u16 address );
    jump to given address if value less equal to progress variable (offset 0 in memory).

0x86 ProgressNotEqualJumpTo( v80 value, u16 address );
    jump to given address if value not equal to progress variable (offset 0 in memory).

0xCB TriggerJumpTo( u8 trigger_id, u16 address );
    jump to given address if party leader not in trigger.

//////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////
// MODEL OPCODES
0x19_SetPosition(vf80 x, vf40 y, flag);

0x20_SetFlags(v80 flags);
    0x01 - set flag 0x00000080 not solid
    0x04 - set flag 0x00000020
    0x08 - set flag 0x00000010 not pushable
    0x10 - set flag 0x00000008
    0x20 - set flag 0x00000004
    0x40 - set flag 0x08000000

0x69_SetRotation(v80 rotation);

0x6B_RotateClockwise(v80 rotation);

0x6C_RotateAntiClockwise(v80 rotation);

0x6F_RotateToEntity(entity_id);
//////////////////////////////////////////////////////////////////







//////////////////////////////////////////////////////////////////
// MATH OPCODES
0x36 VariableSetTrue(u16 address);
    set variable at given address to 1.

0x37 VariableSetFalse(u16 address);
    set variable at given address to 0.

0x3A VariableBitSet(u16 address, vf40 bit_number, f sign);
    set given bit (set with flag) at given address to 0.

0xA8 VariableRandom(u16 address, v80 border);
    store random variable (0 - border) to address.
//////////////////////////////////////////////////////////////////
